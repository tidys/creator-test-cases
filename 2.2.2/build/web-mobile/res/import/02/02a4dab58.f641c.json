[
  [
    {
      "__type__": "cc.SceneAsset",
      "_name": "mesh-texture",
      "scene": {
        "__id__": 1
      },
      "asyncLoadAssets": null
    },
    {
      "__type__": "cc.Scene",
      "_name": "New Node",
      "_children": [
        {
          "__id__": 2
        }
      ],
      "_anchorPoint": {
        "__type__": "cc.Vec2"
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          1
        ]
      },
      "autoReleaseAssets": false
    },
    {
      "__type__": "cc.Node",
      "_name": "Canvas",
      "_parent": {
        "__id__": 1
      },
      "_children": [
        {
          "__id__": 3
        },
        {
          "__id__": 4
        },
        {
          "__id__": 5
        }
      ],
      "_components": [
        {
          "__type__": "cc.Canvas",
          "node": {
            "__id__": 2
          }
        }
      ],
      "_contentSize": {
        "__type__": "cc.Size",
        "width": 960,
        "height": 640
      },
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          480,
          320,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      },
      "_id": "8aR48m/zVFqasq/8pwOQPE"
    },
    {
      "__type__": "cc.Node",
      "_name": "Main Camera",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.Camera",
          "node": {
            "__id__": 3
          },
          "_clearFlags": 7,
          "_backgroundColor": {
            "__type__": "cc.Color",
            "r": 56,
            "g": 59,
            "b": 65
          },
          "_depth": -1,
          "_nearClip": 0.1,
          "_ortho": false
        }
      ],
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "New Node",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 4
          },
          "_materials": [
            {
              "__uuid__": "e3titQGA5LMKAvoKAZXT/B"
            }
          ],
          "textures": [
            {
              "__uuid__": "6bT67Vq8NKd6+dNe1npaSL"
            }
          ]
        },
        {
          "__type__": "95a3dIihBlE1bM4psBuANTA",
          "node": {
            "__id__": 4
          }
        }
      ],
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          155.91700744628906,
          0.8579999804496765,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      }
    },
    {
      "__type__": "cc.Node",
      "_name": "New Node",
      "_parent": {
        "__id__": 2
      },
      "_components": [
        {
          "__type__": "cc.MeshRenderer",
          "node": {
            "__id__": 5
          },
          "_materials": [
            {
              "__uuid__": "e3titQGA5LMKAvoKAZXT/B"
            }
          ],
          "textures": [
            {
              "__uuid__": "6bT67Vq8NKd6+dNe1npaSL"
            }
          ]
        },
        {
          "__type__": "95a3dIihBlE1bM4psBuANTA",
          "node": {
            "__id__": 5
          }
        }
      ],
      "_trs": {
        "__type__": "TypedArray",
        "ctor": "Float64Array",
        "array": [
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1
        ]
      }
    }
  ],
  {
    "__type__": "cc.EffectAsset",
    "_name": "mesh-texture",
    "techniques": [
      {
        "passes": [
          {
            "blendState": {
              "targets": [
                {
                  "blend": true
                }
              ]
            },
            "rasterizerState": {
              "cullMode": 0
            },
            "program": "mesh-texture|sprite-vs:vert|sprite-fs:frag",
            "properties": {
              "texture": {
                "value": "white",
                "type": 29
              },
              "alphaThreshold": {
                "value": [
                  0.5
                ],
                "type": 13
              }
            }
          }
        ]
      }
    ],
    "shaders": [
      {
        "hash": 3644058257,
        "glsl3": {
          "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 uv0;\n#endif\n\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  uv0 = a_uv0;\n  #endif\n\n  return pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
          "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n#if USE_TEXTURE\nin vec2 uv0;\nuniform sampler2D texture;\n#endif\n\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, uv0);\n    #if _USE_ETC1_TEXTURE\n    o.a *= texture2D(texture, uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  ALPHA_TEST(o);\n\n  return o;\n}\n\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }\n"
        },
        "glsl1": {
          "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 uv0;\n#endif\n\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  uv0 = a_uv0;\n  #endif\n\n  return pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
          "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\n#if USE_TEXTURE\nvarying vec2 uv0;\nuniform sampler2D texture;\n#endif\n\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, uv0);\n    #if _USE_ETC1_TEXTURE\n    o.a *= texture2D(texture, uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  ALPHA_TEST(o);\n\n  return o;\n}\n\nvoid main() { gl_FragColor = frag(); }\n"
        },
        "builtins": {
          "globals": {
            "blocks": [
              {
                "name": "CCGlobal",
                "defines": []
              }
            ],
            "samplers": []
          },
          "locals": {
            "blocks": [
              {
                "name": "CCLocal",
                "defines": []
              }
            ],
            "samplers": []
          }
        },
        "defines": [
          {
            "name": "USE_TEXTURE",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "USE_MODEL",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "USE_ALPHA_TEST",
            "type": "boolean",
            "defines": []
          },
          {
            "name": "_USE_ETC1_TEXTURE",
            "type": "boolean",
            "defines": [
              "USE_TEXTURE"
            ]
          }
        ],
        "blocks": [
          {
            "name": "ALPHA_TEST",
            "members": [
              {
                "name": "alphaThreshold",
                "type": 13,
                "count": 1
              }
            ],
            "defines": [
              "USE_ALPHA_TEST"
            ],
            "binding": 0
          }
        ],
        "samplers": [
          {
            "name": "texture",
            "type": 29,
            "count": 1,
            "defines": [
              "USE_TEXTURE"
            ],
            "binding": 30
          }
        ],
        "dependencies": {},
        "name": "mesh-texture|sprite-vs:vert|sprite-fs:frag"
      }
    ]
  },
  {
    "__type__": "cc.Material",
    "_name": "mesh-texture",
    "_effectAsset": {
      "__uuid__": "2crixoCFNCWKJesrFp4HcA"
    },
    "_defines": {
      "USE_TEXTURE": true,
      "USE_MODEL": true
    },
    "_props": {
      "texture": {
        "__uuid__": "6bT67Vq8NKd6+dNe1npaSL"
      }
    }
  }
]