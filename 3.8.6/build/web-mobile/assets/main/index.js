System.register("chunks:///_virtual/acceleration-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Vec2, input, Input, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Vec2 = module.Vec2;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "44134JoDuRB5akTgWYcuSTB", "acceleration-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var accelerationEvent = exports('accelerationEvent', (_dec = ccclass('accelerationEvent'), _dec2 = property(Node), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(accelerationEvent, _Component);
        function accelerationEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "target", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btnLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "speed", _descriptor3, _assertThisInitialized(_this));
          _this.acc = new Vec2(0, 0);
          _this.accelerometerEnable = false;
          _this._skipCallback = false;
          return _this;
        }
        var _proto = accelerationEvent.prototype;
        _proto.start = function start() {
          this.accelerometerEnable = false;
          input.setAccelerometerInterval(0.5);
          input.on(Input.EventType.DEVICEMOTION, this.moveBall, this);
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.DEVICEMOTION, this.moveBall, this);
        };
        _proto.update = function update(dt) {
          var pos = this.target.position;
          this.target.setPosition(pos.x + this.acc.x * dt * this.speed, pos.y);
          pos = this.target.position;
          this.target.setPosition(pos.x, pos.y, pos.z + -this.acc.y * dt * this.speed);
        };
        _proto.moveBall = function moveBall(event) {
          // on some platforms, stopping accelerometer is an asynchronous operation.
          // need to skip this callback after stopping.
          if (this._skipCallback) {
            return;
          }
          this.acc.x = event.acc.x;
          this.acc.y = event.acc.y;
        };
        _proto.onOpenAccelerometer = function onOpenAccelerometer() {
          this.accelerometerEnable = !this.accelerometerEnable;
          if (this.accelerometerEnable) {
            this.btnLabel.string = 'Accelerometer On';
          } else {
            this.btnLabel.string = 'Accelerometer Off';
          }
          if (!this.accelerometerEnable) {
            this.acc.x = 0;
            this.acc.y = 0;
          }
          input.setAccelerometerEnabled(this.accelerometerEnable);
          this._skipCallback = !this.accelerometerEnable;
        };
        _proto.resetPosition = function resetPosition() {
          this.target.setPosition(0, 0.5, 0);
        };
        return accelerationEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationEventTesting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "bc36fyzATlDor7Phlki8dYB", "AnimationEventTesting", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AnimationEventTesting = exports('AnimationEventTesting', (_dec = ccclass("AnimationEventTesting"), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimationEventTesting, _Component);
        function AnimationEventTesting() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _this._times = 1;
          return _this;
        }
        var _proto = AnimationEventTesting.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.AnimationEventTest = function AnimationEventTest(param) {
          this.label.string = "第" + this._times++ + "次，" + param;
        };
        return AnimationEventTesting;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/asset-bundle-zip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Label, Node, assetManager, Component, log, Texture2D, Sprite, SpriteFrame, AudioClip, AudioSource, director, game;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      assetManager = module.assetManager;
      Component = module.Component;
      log = module.log;
      Texture2D = module.Texture2D;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      director = module.director;
      game = module.game;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "14a26xCrOlOiZGaqGY0Vbto", "asset-bundle-zip", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AssetBundleZip = exports('AssetBundleZip', (_dec = ccclass('AssetBundleZip'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property({
        type: [Label]
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AssetBundleZip, _Component);
        function AssetBundleZip() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "loadTips", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "showWindow", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labels", _descriptor3, _assertThisInitialized(_this));
          _this._isLoading = false;
          return _this;
        }
        var _proto = AssetBundleZip.prototype;
        // LIFE-CYCLE CALLBACKS:
        _proto.onLoad = function onLoad() {
          var testBundle = assetManager.getBundle('TestBundleZip');
          if (testBundle) {
            this.labels[0].string = "已加载";
          }
        };
        _proto.onClickBundle = /*#__PURE__*/function () {
          var _onClickBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this2 = this;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", new Promise(function (resolve, reject) {
                    var testBundle = assetManager.getBundle('TestBundleZip');
                    if (testBundle || _this2._isLoading) {
                      reject();
                      return;
                    }
                    _this2._onClear();
                    _this2._isLoading = true;
                    _this2.loadTips.string = "Bundle Loading....";
                    assetManager.loadBundle('TestBundleZip', function (err) {
                      if (err) {
                        log('Error url [' + err + ']');
                        reject(err);
                        return;
                      }
                      _this2._isLoading = false;
                      _this2.loadTips.string = "Bundle loaded Successfully!";
                      _this2.labels[0].string = "已加载";
                      resolve();
                    });
                  }));
                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function onClickBundle() {
            return _onClickBundle.apply(this, arguments);
          }
          return onClickBundle;
        }();
        _proto.onClickTexture = /*#__PURE__*/function () {
          var _onClickTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this3 = this;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise(function (resolve, reject) {
                    if (_this3._isLoading) return;
                    var testBundle = assetManager.getBundle('TestBundleZip');
                    if (!testBundle) {
                      _this3.loadTips.string = "操作失败，请先加载 Asset Bundle";
                      reject(_this3.loadTips.string);
                      return;
                    }
                    _this3._onClear();
                    _this3._isLoading = true;
                    _this3.loadTips.string = "Texture Loading....";
                    testBundle.load("content/texture", Texture2D, function (err, asset) {
                      if (err) {
                        log('Error url [' + err + ']');
                        reject(err);
                        return;
                      }
                      _this3._isLoading = false;
                      _this3.loadTips.string = "";
                      var node = new Node("New Node");
                      node.setPosition(0, 0);
                      var component = node.addComponent(Sprite);
                      var sp = new SpriteFrame();
                      sp.texture = asset;
                      component.spriteFrame = sp;
                      _this3.labels[1].string = "已加载";
                      _this3.showWindow.addChild(node);
                      resolve();
                    });
                  }));
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function onClickTexture() {
            return _onClickTexture.apply(this, arguments);
          }
          return onClickTexture;
        }();
        _proto.onClickAudio = /*#__PURE__*/function () {
          var _onClickAudio = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this4 = this;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", new Promise(function (resolve, reject) {
                    if (_this4._isLoading) return;
                    var testBundle = assetManager.getBundle('TestBundleZip');
                    if (!testBundle) {
                      _this4.loadTips.string = "操作失败，请先加载 Asset Bundle";
                      reject(_this4.loadTips.string);
                      return;
                    }
                    _this4._onClear();
                    _this4._isLoading = true;
                    _this4.loadTips.string = "Audio Loading....";
                    testBundle.load("audio", AudioClip, function (err, asset) {
                      if (err) {
                        log('Error url [' + err + ']');
                        reject(err);
                        return;
                      }
                      _this4._isLoading = false;
                      _this4.loadTips.string = "";
                      var node = new Node("New Node");
                      node.setPosition(0, 0);
                      var component = node.addComponent(AudioSource);
                      component.clip = asset;
                      component.play();
                      _this4.loadTips.string = "播放音乐";
                      _this4.labels[2].string = "已加载";
                      _this4.showWindow.addChild(node);
                      resolve();
                    });
                  }));
                case 1:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function onClickAudio() {
            return _onClickAudio.apply(this, arguments);
          }
          return onClickAudio;
        }();
        _proto.onClickScene = /*#__PURE__*/function () {
          var _onClickScene = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            var _this5 = this;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", new Promise(function (resovle, reject) {
                    if (_this5._isLoading) return;
                    var testBundle = assetManager.getBundle('TestBundleZip');
                    if (!testBundle) {
                      _this5.loadTips.string = "操作失败，请先加载 Asset Bundle";
                      reject(_this5.loadTips.string);
                      return;
                    }
                    _this5._onClear();
                    _this5._isLoading = true;
                    _this5.loadTips.string = "Scene Loading....";
                    testBundle.loadScene("sub-scene", function (err, asset) {
                      if (err) {
                        log('Error url [' + err + ']');
                        reject(err);
                        return;
                      }
                      _this5._isLoading = false;
                      _this5.loadTips.string = "";
                      director.runScene(asset, undefined, function (err) {
                        err ? reject(err) : resovle();
                      });
                      if (game.isPaused()) {
                        game.step();
                      }
                    });
                  }));
                case 1:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));
          function onClickScene() {
            return _onClickScene.apply(this, arguments);
          }
          return onClickScene;
        }();
        _proto.onClickDestroy = function onClickDestroy() {
          if (this._isLoading) return;
          var testBundle = assetManager.getBundle('TestBundleZip');
          if (!testBundle) {
            this.loadTips.string = "操作失败，请先加载 Asset Bundle";
            return;
          }
          this._onClear();
          assetManager.removeBundle(testBundle);
          this.loadTips.string = "分包已被销毁";
          this.labels[0].string = "加载 Asset Bundle";
          this.labels[1].string = "加载 Texture";
          this.labels[2].string = "加载 Audio";
          this.labels[3].string = "加载 Scene";
        };
        _proto.onClickRelease = function onClickRelease() {
          if (this._isLoading) return;
          var testBundle = assetManager.getBundle('TestBundleZip');
          if (!testBundle) {
            this.loadTips.string = "操作失败，请先加载 Asset Bundle";
            return;
          }
          this._onClear();
          testBundle.releaseAll();
          this.loadTips.string = "资源已被释放";
          this.labels[1].string = "加载 Texture";
          this.labels[2].string = "加载 Audio";
          this.labels[3].string = "加载 Scene";
        };
        _proto._onClear = function _onClear() {
          this.showWindow.destroyAllChildren();
          this.showWindow.removeAllChildren();
        };
        return AssetBundleZip;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadTips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showWindow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labels", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/asset-bundle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, assetManager, log, Texture2D, Layers, Sprite, SpriteFrame, AudioClip, AudioSource, director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      assetManager = module.assetManager;
      log = module.log;
      Texture2D = module.Texture2D;
      Layers = module.Layers;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "ec39dDiCpxNyrqH9XbtLdcb", "asset-bundle", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AssetBundle = exports('AssetBundle', (_dec = ccclass('AssetBundle'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property({
        type: [Label]
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AssetBundle, _Component);
        function AssetBundle() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "loadTips", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "showWindow", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labels", _descriptor3, _assertThisInitialized(_this));
          _this._isLoading = false;
          return _this;
        }
        var _proto = AssetBundle.prototype;
        // LIFE-CYCLE CALLBACKS:
        _proto.onLoad = function onLoad() {
          var testBundle = assetManager.getBundle('TestBundle');
          if (testBundle) {
            this.labels[0].string = "已加载";
          }
        };
        _proto.onClickBundle = function onClickBundle() {
          var _this2 = this;
          var testBundle = assetManager.getBundle('TestBundle');
          if (testBundle || this._isLoading) {
            return;
          }
          this._onClear();
          this._isLoading = true;
          this.loadTips.string = "Bundle Loading....";
          assetManager.loadBundle('TestBundle', function (err) {
            if (err) {
              log('Error url [' + err + ']');
              return;
            }
            _this2._isLoading = false;
            _this2.loadTips.string = "Bundle loaded Successfully!";
            _this2.labels[0].string = "已加载";
          });
        };
        _proto.onClickTexture = function onClickTexture() {
          var _this3 = this;
          if (this._isLoading) return;
          var testBundle = assetManager.getBundle('TestBundle');
          if (!testBundle) {
            this.loadTips.string = "操作失败，请先加载 Asset Bundle";
            return;
          }
          this._onClear();
          this._isLoading = true;
          this.loadTips.string = "Texture Loading....";
          testBundle.load("gold/texture", Texture2D, function (err, asset) {
            if (err) {
              log('Error url [' + err + ']');
              return;
            }
            _this3._isLoading = false;
            _this3.loadTips.string = "";
            var node = new Node("New Node");
            node.layer = Layers.Enum.UI_2D;
            node.setPosition(0, 0);
            var component = node.addComponent(Sprite);
            var sp = new SpriteFrame();
            sp.texture = asset;
            component.spriteFrame = sp;
            _this3.labels[1].string = "已加载";
            _this3.showWindow.addChild(node);
          });
        };
        _proto.onClickAudio = function onClickAudio() {
          var _this4 = this;
          if (this._isLoading) return;
          var testBundle = assetManager.getBundle('TestBundle');
          if (!testBundle) {
            this.loadTips.string = "操作失败，请先加载 Asset Bundle";
            return;
          }
          this._onClear();
          this._isLoading = true;
          this.loadTips.string = "Audio Loading....";
          testBundle.load("ss", AudioClip, function (err, asset) {
            if (err) {
              log('Error url [' + err + ']');
              return;
            }
            _this4._isLoading = false;
            _this4.loadTips.string = "";
            var node = new Node("New Node");
            node.layer = Layers.Enum.UI_2D;
            node.setPosition(0, 0);
            var component = node.addComponent(AudioSource);
            component.clip = asset;
            component.play();
            _this4.loadTips.string = "播放音乐";
            _this4.labels[2].string = "已加载";
            _this4.showWindow.addChild(node);
          });
        };
        _proto.onClickScene = function onClickScene() {
          var _this5 = this;
          return new Promise(function (resovle, reject) {
            if (_this5._isLoading) return;
            var testBundle = assetManager.getBundle('TestBundle');
            if (!testBundle) {
              _this5.loadTips.string = "操作失败，请先加载 Asset Bundle";
              return;
            }
            _this5._onClear();
            _this5._isLoading = true;
            _this5.loadTips.string = "Scene Loading....";
            testBundle.loadScene("sub-scene", function (err, asset) {
              if (err) {
                log('Error url [' + err + ']');
                reject(err);
                return;
              }
              _this5._isLoading = false;
              _this5.loadTips.string = "";
              director.runScene(asset, undefined, function (err) {
                err ? reject(err) : resovle();
              });
            });
          });
        };
        _proto.onClickDestroy = function onClickDestroy() {
          if (this._isLoading) return;
          var testBundle = assetManager.getBundle('TestBundle');
          if (!testBundle) {
            this.loadTips.string = "操作失败，请先加载 Asset Bundle";
            return;
          }
          this._onClear();
          assetManager.removeBundle(testBundle);
          this.loadTips.string = "分包已被销毁";
          this.labels[0].string = "加载 Asset Bundle";
          this.labels[1].string = "加载 Texture";
          this.labels[2].string = "加载 Audio";
          this.labels[3].string = "加载 Scene";
        };
        _proto.onClickRelease = function onClickRelease() {
          if (this._isLoading) return;
          var testBundle = assetManager.getBundle('TestBundle');
          if (!testBundle) {
            this.loadTips.string = "操作失败，请先加载 Asset Bundle";
            return;
          }
          this._onClear();
          testBundle.releaseAll();
          this.loadTips.string = "资源已被释放";
          this.labels[1].string = "加载 Texture";
          this.labels[2].string = "加载 Audio";
          this.labels[3].string = "加载 Scene";
        };
        _proto._onClear = function _onClear() {
          this.showWindow.destroyAllChildren();
          this.showWindow.removeAllChildren();
        };
        return AssetBundle;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadTips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showWindow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labels", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetLoading.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, Label, Prefab, SpriteFrame, Material, loader, director, SpriteAtlas, Font, TextureCube, Texture2D, log, AudioSource, Layers, instantiate, MeshRenderer, UIMeshRenderer, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Prefab = module.Prefab;
      SpriteFrame = module.SpriteFrame;
      Material = module.Material;
      loader = module.loader;
      director = module.director;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      TextureCube = module.TextureCube;
      Texture2D = module.Texture2D;
      log = module.log;
      AudioSource = module.AudioSource;
      Layers = module.Layers;
      instantiate = module.instantiate;
      MeshRenderer = module.MeshRenderer;
      UIMeshRenderer = module.UIMeshRenderer;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
      cclegacy._RF.push({}, "b7a38N/ysBPxb/1g3EBPfn4", "AssetLoading", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AssetLoading = exports('AssetLoading', (_dec = ccclass("AssetLoading"), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: [Node]
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: SpriteFrame
      }), _dec7 = property({
        type: Material
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AssetLoading, _Component);
        function AssetLoading() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._lastType = '';
          _this._curRes = null;
          _this._btnLabel = null;
          _this._audioSource = null;
          _this._isLoading = false;
          _this._urls = {
            Audio: "test_assets/audio",
            Txt: "test_assets/text",
            ImageAsset: "test_assets/PurpleMonster",
            Texture2D: "test_assets/PurpleMonster/texture",
            Font: "test_assets/font",
            SpriteAtlas: "test_assets/atlas.plist",
            SpriteFrame: "test_assets/image/spriteFrame",
            Prefab: "test_assets/prefab",
            Animation: "test_assets/testAnim",
            Scene: "test_assets/test-scene",
            TextureCube: "test_assets/cubemap",
            CORS: "https://download.cocos.org/CocosTest/test-case/logo.png",
            Material: "test_assets/testMat",
            Mesh: "test_assets/Monster/monster.mesh",
            Skeleton: "test_assets/Monster/Armature.skeleton"
          };
          _initializerDefineProperty(_this, "showWindow", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadTips", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadList", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadAnimTestPrefab", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadMaterialSpriteFrame", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "standardMaterial", _descriptor6, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AssetLoading.prototype;
        // use this for initialization
        _proto.onLoad = function onLoad() {
          // registered event
          this._onRegisteredEvent();
        };
        _proto.onDestroy = function onDestroy() {
          if (this._curRes) {
            loader.releaseAsset(this._curRes);
          }
        };
        _proto._onRegisteredEvent = function _onRegisteredEvent() {
          for (var i = 0; i < this.loadList.length; ++i) {
            this.loadList[i].on(Node.EventType.TOUCH_END, this._onClick.bind(this));
          }
        };
        _proto._onClick = /*#__PURE__*/function () {
          var _onClick2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
            var target, curType;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!this._isLoading) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return");
                case 2:
                  this._onClear();
                  target = event.target;
                  if (target) {
                    curType = target.name.split('_')[1];
                    if (curType in this._urls) {
                      this._curType = curType;
                    }
                  }
                  if (!(this._lastType !== "" && this._curType === this._lastType)) {
                    _context.next = 9;
                    break;
                  }
                  this.loadTips.string = '';
                  this._onShowResClick(event);
                  return _context.abrupt("return");
                case 9:
                  if (this._btnLabel) {
                    this._btnLabel.string = "已加载 " + this._lastType;
                  }
                  this._lastType = this._curType;
                  if (target) {
                    this._btnLabel = target.getChildByName("Label").getComponent(Label);
                  }
                  this.loadTips.string = this._curType + " Loading....";
                  this._isLoading = true;
                  return _context.abrupt("return", this._load());
                case 15:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function _onClick(_x) {
            return _onClick2.apply(this, arguments);
          }
          return _onClick;
        }();
        _proto._load = function _load() {
          var _this2 = this;
          return new Promise(function (resovle, reject) {
            var url = _this2._urls[_this2._curType];
            var loadCallBack = function loadCallBack(err, res) {
              _this2._loadCallBack(err, res);
              resovle(err ? false : true);
            };
            switch (_this2._curType) {
              case 'SpriteFrame':
                // specify the type to load sub asset from texture's url
                loader.loadRes(url, SpriteFrame, loadCallBack);
                break;
              case 'Texture2D':
                loader.loadRes(url, Texture2D, loadCallBack);
                break;
              case 'TextureCube':
                loader.loadRes(url, TextureCube, loadCallBack);
                break;
              case 'Font':
                loader.loadRes(url, Font, loadCallBack);
                break;
              case 'SpriteAtlas':
                loader.loadRes(url, SpriteAtlas, loadCallBack);
                break;
              case 'Animation':
              case 'Prefab':
              case 'Skeleton':
              case 'Mesh':
              case 'ImageAsset':
              case 'Txt':
              case 'Audio':
              case 'Material':
              case 'Skeleton':
                loader.loadRes(url, loadCallBack);
                break;
              case 'Scene':
                director.loadScene(url, function (error) {
                  resovle(error ? false : true);
                });
                break;
              case 'CORS':
                loader.load(url, loadCallBack);
                _this2.loadTips.string = "CORS image should report texImage2D error under WebGL and works ok under Canvas";
                break;
              default:
                loader.load(url, loadCallBack);
                break;
            }
          });
        };
        _proto._loadCallBack = function _loadCallBack(err, res) {
          this._isLoading = false;
          if (err) {
            log('Error url [' + err + ']');
            return;
          }
          if (this._curType === 'ImageAsset' || this._curType === 'CORS') {
            this._curRes = new Texture2D();
            this._curRes.image = res;
          } else {
            this._curRes = res;
          }
          if (this._btnLabel) {
            if (this._curType === "Audio") {
              this._btnLabel.string = "播放";
            } else {
              this._btnLabel.string = "创建";
            }
            this._btnLabel.string += this._curType;
          }
          this.loadTips.string = this._curType + " Loaded Successfully!";
        };
        _proto._onClear = function _onClear() {
          this.showWindow.removeAllChildren();
          if (this._audioSource && this._audioSource instanceof AudioSource) {
            this._audioSource.stop();
          }
        };
        _proto._onShowResClick = function _onShowResClick(event) {
          if (this._curType === "Scene") {
            return;
          }
          this._createNode(this._curType, this._curRes);
        };
        _proto._createNode = function _createNode(type, res) {
          this.loadTips.string = "";
          var node = new Node("New " + type);
          node.layer = Layers.Enum.UI_2D;
          node.setPosition(0, 0, 0);
          var component = null;
          switch (this._curType) {
            case "SpriteFrame":
              component = node.addComponent(Sprite);
              component.spriteFrame = res;
              break;
            case "SpriteAtlas":
              component = node.addComponent(Sprite);
              component.spriteFrame = res.getSpriteFrames()[0];
              break;
            case "Texture2D":
              var cube = instantiate(this.loadAnimTestPrefab);
              var model = cube.getComponent(MeshRenderer);
              model.material.setProperty('albedoMap', res);
              cube.setPosition(0, 0, 50);
              cube.setScale(100, 100, 100);
              cube.parent = this.showWindow;
              break;
            case 'ImageAsset':
            case "CORS":
              component = node.addComponent(Sprite);
              var spriteFrame = new SpriteFrame();
              spriteFrame.texture = res;
              component.spriteFrame = spriteFrame;
              break;
            case "Audio":
              component = node.addComponent(AudioSource);
              component.clip = res;
              component.play();
              this._audioSource = component;
              this.loadTips.string = "播放音乐。";
              break;
            case "Txt":
              component = node.addComponent(Label);
              component.lineHeight = 40;
              component.string = res.text;
              break;
            case "Material":
              component = node.addComponent(Sprite);
              component.sharedMaterials = res;
              component.spriteFrame = this.loadMaterialSpriteFrame;
              break;
            case "Font":
              component = node.addComponent(Label);
              component.font = res;
              component.lineHeight = 40;
              component.string = "This is BitmapFont!";
              break;
            case 'Mesh':
              component = node.addComponent(MeshRenderer);
              node.addComponent(UIMeshRenderer);
              node.setPosition(0, 0, 50);
              node.setScale(5, 5, 5);
              component.mesh = res;
              component.material = this.standardMaterial;
              break;
            case "Prefab":
              var prefab = instantiate(res);
              prefab.parent = node;
              prefab.setPosition(0, 0, 0);
              break;
            default:
              this.loadTips.string = "此项没有展示效果";
              break;
          }
          this.showWindow.addChild(node);
        };
        return AssetLoading;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "showWindow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loadTips", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "loadList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "loadAnimTestPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "loadMaterialSpriteFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "standardMaterial", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AsyncFunctionsTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ui-log.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Component, UILog;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      UILog = module.UILog;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "2c510NsGGFIbpHzebAjhUU0", "AsyncFunctionsTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var AsyncFunctionsTest = exports('AsyncFunctionsTest', (_dec = ccclass('AsyncFunctionsTest'), _dec2 = menu('TestCases/Scripting/LanguageFeature/AsyncFunctionsTest'), _dec3 = property(UILog), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AsyncFunctionsTest, _Component);
        function AsyncFunctionsTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "logPanel", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AsyncFunctionsTest.prototype;
        _proto.start = function start() {
          var _this2 = this;
          _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  // Directly running an async function should be OK.
                  _this2._getLogPanelChecked().addLabel("Async function starts at " + new Date());
                  // cc.log(`Async function starts at ${new Date()}`);
                  _context.next = 3;
                  return sleep(2000);
                case 3:
                  _this2._getLogPanelChecked().addLabel("Async function ends at " + new Date() + "(Expected: 2 seconds past)");
                  // cc.log(`Async function ends at ${new Date()}(Expected: 2 seconds past)`);
                  _context.prev = 4;
                  _this2._getLogPanelChecked().addLabel("Async function(which is throw-ful) starts at " + new Date());
                  _context.next = 8;
                  return sleepThrow(1000);
                case 8:
                  _context.next = 13;
                  break;
                case 10:
                  _context.prev = 10;
                  _context.t0 = _context["catch"](4);
                  _this2._getLogPanelChecked().addLabel("Async function(which is throw-ful) throws \"" + _context.t0 + "\" at " + new Date() + "(Expected: 1 seconds past)");
                case 13:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[4, 10]]);
          }))();
        };
        _proto._getLogPanelChecked = function _getLogPanelChecked() {
          if (this.isValid) {
            return this.logPanel;
          } else {
            // This may happen if the scene has been destroyed.
            // For simplification, we return a mocking stuff...
            return {
              addLabel: function addLabel() {
                // ...
              }
            };
          }
        };
        return AsyncFunctionsTest;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "logPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));
      function sleep(_x) {
        return _sleep.apply(this, arguments);
      }
      function _sleep() {
        _sleep = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(duration) {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new Promise(function (resolve, reject) {
                  // `await` in async function should be OK.
                  setTimeout(function () {
                    resolve();
                  }, duration);
                });
              case 2:
                return _context3.abrupt("return", _context3.sent);
              case 3:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        return _sleep.apply(this, arguments);
      }
      var sleepThrow = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(at) {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return new Promise(function (resolve, reject) {
                  // `await` in lambda should be OK.
                  setTimeout(function () {
                    reject(new Error("Oops..."));
                  }, at);
                });
              case 2:
                return _context2.abrupt("return", _context2.sent);
              case 3:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function sleepThrow(_x2) {
          return _ref2.apply(this, arguments);
        };
      }();
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/audioBuffer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, AudioSource, Graphics, Slider, Node, input, Input, UITransform, clamp, v3, Component, view;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
      Graphics = module.Graphics;
      Slider = module.Slider;
      Node = module.Node;
      input = module.input;
      Input = module.Input;
      UITransform = module.UITransform;
      clamp = module.clamp;
      v3 = module.v3;
      Component = module.Component;
      view = module.view;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "71b2e4H8xtJtKW5GyZtZ4vN", "audioBuffer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var audioBuffer = exports('audioBuffer', (_dec = ccclass('audioBuffer'), _dec2 = property(AudioSource), _dec3 = property(Graphics), _dec4 = property(Graphics), _dec5 = property(Slider), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(audioBuffer, _Component);
        function audioBuffer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "audioSource", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics1", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics2", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "slider", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "noSupported", _descriptor5, _assertThisInitialized(_this));
          _this._dataView1 = void 0;
          _this._dataView2 = void 0;
          _this._originalWidth1 = 0;
          _this._originalWidth2 = 0;
          _this._sampleRate = 0;
          _this._uiTrans1 = null;
          _this._uiTrans2 = null;
          _this._currentScaleX = 1;
          _this._maxScaleX = 10;
          _this._visibleSize = void 0;
          _this._currentProgress = -1;
          _this._updateInterval = 0.05;
          _this._updateTimer = 0;
          return _this;
        }
        var _proto = audioBuffer.prototype;
        _proto.onEnable = /*#__PURE__*/function () {
          var _onEnable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.audioSource.getPCMData(0);
                case 2:
                  this._dataView1 = _context.sent;
                  _context.next = 5;
                  return this.audioSource.getPCMData(1);
                case 5:
                  this._dataView2 = _context.sent;
                  if (!(!this._dataView1 && !this._dataView2)) {
                    _context.next = 9;
                    break;
                  }
                  this.noSupported.active = true;
                  return _context.abrupt("return");
                case 9:
                  _context.next = 11;
                  return this.audioSource.getSampleRate();
                case 11:
                  this._sampleRate = _context.sent;
                  this._originalWidth1 = this.graphics1.getComponent(UITransform).contentSize.width;
                  this._originalWidth2 = this.graphics2.getComponent(UITransform).contentSize.width;
                  this._uiTrans1 = this.graphics1.getComponent(UITransform);
                  this._uiTrans2 = this.graphics2.getComponent(UITransform);
                  this._visibleSize = view.getVisibleSize();
                  this.drawAudioBuffer();
                  input.on(Input.EventType.TOUCH_MOVE, this.onDragMove, this);
                case 19:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onEnable() {
            return _onEnable.apply(this, arguments);
          }
          return onEnable;
        }();
        _proto.onDisabled = function onDisabled() {
          input.off(Input.EventType.TOUCH_MOVE, this.onDragMove, this);
        };
        _proto.drawBufferFromChannel = function drawBufferFromChannel(graphics, dataView) {
          if (!dataView) {
            return;
          }
          // sample from 42 seconds
          var startSamplePoint = 42 * this._sampleRate;
          var maxSampleLength = 15000;
          var sampleLength = Math.min(dataView.length - startSamplePoint, maxSampleLength);
          var contentSize = graphics.node.getComponent(UITransform).contentSize;
          var startDrawingPoint = 0;
          var drawingStep = contentSize.width / maxSampleLength;
          graphics.moveTo(startDrawingPoint, 0);
          var endSamplePoint = startSamplePoint + sampleLength;
          for (var i = startSamplePoint; i < endSamplePoint; i++) {
            var data = dataView.getData(i);
            var y = data * contentSize.height / 2;
            graphics.lineTo(startDrawingPoint + (i - startSamplePoint) * drawingStep, y);
          }
          graphics.stroke();
        };
        _proto.drawAudioBuffer = function drawAudioBuffer() {
          this.graphics1.clear();
          this.graphics2.clear();
          this.drawBufferFromChannel(this.graphics1, this._dataView1);
          this.drawBufferFromChannel(this.graphics2, this._dataView2);
        };
        _proto.onDragMove = function onDragMove(event) {
          var deltaX = event.getDeltaX();
          var pos1 = this.graphics1.node.position;
          var pos2 = this.graphics2.node.position;
          var posX1 = pos1.x;
          var posX2 = pos2.x;
          posX1 += deltaX;
          posX2 += deltaX;
          posX1 = clamp(posX1, this._visibleSize.width - this._uiTrans1.width, 0);
          posX2 = clamp(posX2, this._visibleSize.width - this._uiTrans2.width, 0);
          this.graphics1.node.setPosition(v3(posX1, pos1.y, pos1.z));
          this.graphics2.node.setPosition(v3(posX2, pos2.y, pos2.z));
        };
        _proto.update = function update(dt) {
          if (this.noSupported.active) {
            return;
          }
          if (this.slider.progress === this._currentProgress) {
            return;
          }
          if (this._updateTimer < this._updateInterval) {
            this._updateTimer += dt;
            return;
          }
          this._updateTimer -= this._updateInterval;
          var progress = this._currentProgress = this.slider.progress;
          this._currentScaleX = progress * this._maxScaleX;
          this._currentScaleX = clamp(this._currentScaleX, 1, this._maxScaleX);
          this._uiTrans1.width = this._originalWidth1 * this._currentScaleX;
          this._uiTrans2.width = this._originalWidth2 * this._currentScaleX;
          this._correctPosition();
          this.drawAudioBuffer();
        };
        _proto._correctPosition = function _correctPosition() {
          var pos1 = this.graphics1.node.position;
          var pos2 = this.graphics2.node.position;
          var posX1 = pos1.x;
          var posX2 = pos2.x;
          posX1 = clamp(posX1, this._visibleSize.width - this._uiTrans1.width, 0);
          posX2 = clamp(posX2, this._visibleSize.width - this._uiTrans2.width, 0);
          this.graphics1.node.setPosition(v3(posX1, pos1.y, pos1.z));
          this.graphics2.node.setPosition(v3(posX2, pos2.y, pos2.z));
        };
        return audioBuffer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "audioSource", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "graphics1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "graphics2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "slider", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "noSupported", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioControl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioClip, AudioSource, Label, Slider, Toggle, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      Label = module.Label;
      Slider = module.Slider;
      Toggle = module.Toggle;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;
      cclegacy._RF.push({}, "9c53aAt3PtHfLz+ArxCBHfU", "AudioControl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AudioControl = exports('AudioControl', (_dec = ccclass('AudioControl'), _dec2 = property(AudioClip), _dec3 = property(AudioSource), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Slider), _dec7 = property(Slider), _dec8 = property(Label), _dec9 = property(Toggle), _dec10 = property(AudioSource), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Slider), _dec14 = property(Slider), _dec15 = property(Label), _dec16 = property(Toggle), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioControl, _Component);
        function AudioControl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "clip", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "source1", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "currentTimeLabel1", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "durationLabel1", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "progressSlider1", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "volumeSlider1", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "eventLabel1", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggle1", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "source2", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "currentTimeLabel2", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "durationLabel2", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "progressSlider2", _descriptor12, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "volumeSlider2", _descriptor13, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "eventLabel2", _descriptor14, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggle2", _descriptor15, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AudioControl.prototype;
        _proto.onEnable = function onEnable() {
          var _this$source1$clip, _this$source2$clip;
          console.log('AudioSource1 loadMode: ', (_this$source1$clip = this.source1.clip) == null ? void 0 : _this$source1$clip.loadMode);
          console.log('AudioSource2 loadMode: ', (_this$source2$clip = this.source2.clip) == null ? void 0 : _this$source2$clip.loadMode);
          this.source1.loop = this.toggle1.isChecked;
          this.source2.loop = this.toggle2.isChecked;
          this.volumeSlider1.progress = this.source1.volume;
          this.volumeSlider2.progress = this.source2.volume;
          this.progressSlider1.node.on('slide', this.onSlide, this);
          this.progressSlider2.node.on('slide', this.onSlide, this);
          this.volumeSlider1.node.on('slide', this.onVolume, this);
          this.volumeSlider2.node.on('slide', this.onVolume, this);
          this.toggle1.node.on(Toggle.EventType.TOGGLE, this.onToggle, this);
          this.toggle2.node.on(Toggle.EventType.TOGGLE, this.onToggle, this);
          this.source1.node.on(AudioSource.EventType.STARTED, this.onStarted, this);
          this.source1.node.on(AudioSource.EventType.ENDED, this.onEnded, this);
          this.source2.node.on(AudioSource.EventType.STARTED, this.onStarted, this);
          this.source2.node.on(AudioSource.EventType.ENDED, this.onEnded, this);
        };
        _proto.onDisable = function onDisable() {
          this.progressSlider1.node.off('slide', this.onSlide, this);
          this.progressSlider2.node.off('slide', this.onSlide, this);
          this.volumeSlider1.node.off('slide', this.onVolume, this);
          this.volumeSlider2.node.off('slide', this.onVolume, this);
          this.toggle1.node.off(Toggle.EventType.TOGGLE, this.onToggle, this);
          this.toggle2.node.off(Toggle.EventType.TOGGLE, this.onToggle, this);
          this.source1.node.off(AudioSource.EventType.STARTED, this.onStarted, this);
          this.source1.node.off(AudioSource.EventType.ENDED, this.onEnded, this);
          this.source2.node.off(AudioSource.EventType.STARTED, this.onStarted, this);
          this.source2.node.off(AudioSource.EventType.ENDED, this.onEnded, this);
        };
        _proto.playOneShot1 = function playOneShot1() {
          this.source1.playOneShot(this.clip);
        };
        _proto.playOneShot2 = function playOneShot2() {
          this.source2.playOneShot(this.clip);
        };
        _proto.update = function update(dt) {
          this.updateSlider(this.source1, this.progressSlider1, this.currentTimeLabel1, this.durationLabel1);
          this.updateSlider(this.source2, this.progressSlider2, this.currentTimeLabel2, this.durationLabel2);
        };
        _proto.updateSlider = function updateSlider(source, slider, currentTimeLabel, durationLabel) {
          var currentTime = Number.parseFloat(source.currentTime.toFixed(2));
          var duration = Number.parseFloat(source.duration.toFixed(2));
          currentTimeLabel.string = currentTime.toString();
          durationLabel.string = duration.toString();
          slider.progress = currentTime / duration;
        };
        _proto.onSlide = function onSlide(slider) {
          var source = slider === this.progressSlider1 ? this.source1 : this.source2;
          var currentTime = slider.progress * source.duration;
          source.currentTime = currentTime;
        };
        _proto.onVolume = function onVolume(slider) {
          var source = slider === this.volumeSlider1 ? this.source1 : this.source2;
          source.volume = slider.progress;
        };
        _proto.onToggle = function onToggle(toggle) {
          var source = toggle === this.toggle1 ? this.source1 : this.source2;
          source.loop = toggle.isChecked;
        };
        _proto.onStarted = function onStarted(audioSource) {
          var eventLabel = audioSource === this.source1 ? this.eventLabel1 : this.eventLabel2;
          this.showEventLabel(eventLabel, 'STARTED', 1);
        };
        _proto.onEnded = function onEnded(audioSource) {
          var eventLabel = audioSource === this.source1 ? this.eventLabel1 : this.eventLabel2;
          this.showEventLabel(eventLabel, 'ENDED', 1);
        };
        _proto.showEventLabel = function showEventLabel(eventLabel, text, timeInSeconds) {
          eventLabel.string = text;
          eventLabel.node.active = true;
          this.scheduleOnce(function () {
            eventLabel.node.active = false;
          }, timeInSeconds);
        };
        return AudioControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "clip", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "source1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "currentTimeLabel1", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "durationLabel1", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "progressSlider1", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "volumeSlider1", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "eventLabel1", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "toggle1", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "source2", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "currentTimeLabel2", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "durationLabel2", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "progressSlider2", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "volumeSlider2", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "eventLabel2", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "toggle2", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioClip, AudioSource, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "f2021d/1FdLjaJsU4R5oYSM", "AudioController", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AudioController = exports('AudioController', (_dec = ccclass("AudioController"), _dec2 = property({
        type: [AudioClip]
      }), _dec3 = property({
        type: AudioSource
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioController, _Component);
        function AudioController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "clips", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "audioSource", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nameLabel", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AudioController.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.onButtonClicked = function onButtonClicked(event, index) {
          var clip = this.clips[index];
          this.nameLabel.string = clip.name;
          this.audioSource.playOneShot(clip);
        };
        _proto.onVolumeSliderChanged = function onVolumeSliderChanged(eventTarget) {
          this.audioSource.volume = eventTarget.progress;
        };
        return AudioController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "clips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "audioSource", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nameLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/audioOperationQueue.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioSource, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "93c30/5+sxENp0DWUmJnjxY", "audioOperationQueue", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AudioOperationQueue = exports('AudioOperationQueue', (_dec = ccclass('AudioOperationQueue'), _dec2 = property(AudioSource), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioOperationQueue, _Component);
        function AudioOperationQueue() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "source", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AudioOperationQueue.prototype;
        _proto.start = function start() {
          // 测试播放队列
          this.source.stop();
          this.source.pause();
          this.source.play();
          this.source.currentTime = 3;
          this.source.stop();
          this.source.stop();
          this.source.pause();
          this.source.play();
          this.source.pause();
          this.source.play();
          this.source.currentTime = 1;
          this.source.play();
          this.source.play();
          this.source.stop();
          this.source.play();
        };
        return AudioOperationQueue;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "source", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/auto-change-opacity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, UIRenderer, UIOpacity, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIRenderer = module.UIRenderer;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "9d4e2YDcsNCoYeRNuiHKfjV", "auto-change-opacity", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AutoChangeOpacity = exports('AutoChangeOpacity', (_dec = ccclass('AutoChangeOpacity'), _dec2 = property({
        type: UIRenderer
      }), _dec3 = property({
        type: UIOpacity
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AutoChangeOpacity, _Component);
        function AutoChangeOpacity() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _this.opacity = 0;
          _this.isColor = false;
          _this.disappear = true;
          _this.tempColor = new Color();
          _initializerDefineProperty(_this, "renderComp", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "opacityComp", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = AutoChangeOpacity.prototype;
        _proto.start = function start() {
          this.disappear = true;
          // For test renderFlag is false when game start
          this.opacity = -1;
          if (this.renderComp) {
            this.isColor = true;
            this.tempColor = this.renderComp.color.clone();
          } else if (this.opacityComp) {
            this.isColor = false;
          }
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto.update = function update(deltaTime) {
          if (this.opacity <= 0) {
            this.disappear = false;
          } else if (this.opacity >= 255) {
            this.disappear = true;
          }
          if (this.disappear) {
            this.opacity -= 1;
          } else {
            this.opacity += 1;
          }
          if (this.isColor) {
            this.tempColor.a = this.opacity;
            this.renderComp.color = this.tempColor;
          } else {
            this.opacityComp.opacity = this.opacity;
          }
        };
        return AutoChangeOpacity;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "renderComp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "opacityComp", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/auto-config-intl-manager.ts", ['cc', './l10n-manager.ts', './env'], function () {
  var cclegacy, game, l10n, EDITOR;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
    }, function (module) {
      l10n = module.default;
    }, function (module) {
      EDITOR = module.EDITOR;
    }],
    execute: async function () {
      cclegacy._RF.push({}, "2f21bx4gAFNj6dct9qDHJHH", "auto-config-intl-manager", undefined);
      if (cclegacy.GAME_VIEW || EDITOR) {
        // for Editor
        // @ts-expect-error we need top level await in Editor
        await l10n.createIntl({});
      } else {
        // for Runtime or Preview
        game.onPostProjectInitDelegate.add(function () {
          return l10n.createIntl({});
        });
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/backbutton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './common.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, JsonAsset, CCBoolean, Vec3, assetManager, sys, input, Input, profiler, Canvas, Layers, find, Label, game, ScrollView, EditBox, director, Director, Component, SceneList;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      CCBoolean = module.CCBoolean;
      Vec3 = module.Vec3;
      assetManager = module.assetManager;
      sys = module.sys;
      input = module.input;
      Input = module.Input;
      profiler = module.profiler;
      Canvas = module.Canvas;
      Layers = module.Layers;
      find = module.find;
      Label = module.Label;
      game = module.game;
      ScrollView = module.ScrollView;
      EditBox = module.EditBox;
      director = module.director;
      Director = module.Director;
      Component = module.Component;
    }, function (module) {
      SceneList = module.SceneList;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;
      cclegacy._RF.push({}, "022e0824UxEDY4MQ1JBg2L7", "backbutton", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BackButton = exports('BackButton', (_dec = ccclass("BackButton"), _dec2 = property(JsonAsset), _dec3 = property(CCBoolean), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackButton, _Component);
        function BackButton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.sceneName = void 0;
          _this.lastPressTimestamp = 0;
          _initializerDefineProperty(_this, "autoTestConfig", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "noAutoTest", _descriptor2, _assertThisInitialized(_this));
          _this.searchBox = void 0;
          _this.searchButton = void 0;
          _this.sceneArray = void 0;
          _this.sceneFold = void 0;
          return _this;
        }
        var _proto = BackButton.prototype;
        _proto.__preload = function __preload() {
          var sceneInfo = assetManager.main.config.scenes;
          var array = [];
          sceneInfo.forEach(function (i) {
            return array.push(i.url);
          });
          array.sort();
          var autoTestList = this.autoTestConfig.json.sceneList;
          for (var i = 0; i < array.length; i++) {
            var str = array[i];
            if (str.includes('TestList') || str.includes('subPack') || str.includes('static-ui-replace')) {
              continue;
            }
            if (str.includes('asset-bundle-zip') && !assetManager.downloader.remoteServerAddress) {
              continue;
            }
            if (sys.platform === sys.Platform.NX) {
              if (str.includes('rich-text-long-string-truncation') || str.includes('rich-text-align') || str.includes('geometry-renderer') || str.includes('particle-culling') || str.includes('boxes-unbatched') || str.includes('network') || str.includes('webview') || str.includes('video-player')) {
                continue;
              }
            }
            if (str.includes('sponza')) {
              if (sys.platform !== sys.Platform.MOBILE_BROWSER && sys.platform !== sys.Platform.DESKTOP_BROWSER && sys.platform !== sys.Platform.WIN32 && sys.platform !== sys.Platform.ANDROID && sys.platform !== sys.Platform.IOS && sys.platform !== sys.Platform.MACOS) {
                continue;
              }
            }

            // The size of the resource file is exceedingly large, and it may reach the memory threshold on this platform.
            if (sys.platform === sys.Platform.XIAOMI_QUICK_GAME && str.endsWith('lod.scene')) {
              continue;
            }
            var firstIndex = str.lastIndexOf('/') + 1;
            var lastIndex = str.lastIndexOf('.scene');
            var currentScene = str.substring(firstIndex, lastIndex);
            if (!this.noAutoTest || autoTestList.indexOf(currentScene) === -1) {
              SceneList.sceneArray.push(currentScene);
              var firstIndexFold = str.indexOf('/cases/') + 7;
              var lastIndexFolf = str.indexOf('/', firstIndexFold);
              SceneList.sceneFold.push(str.substring(firstIndexFold, lastIndexFolf));
            }
          }
        };
        _proto.onLoad = function onLoad() {
          input.on(Input.EventType.GAMEPAD_INPUT, this.onGamepadInput, this);
        };
        _proto.manuallyControl = function manuallyControl() {
          this.node.getChildByName('PrevButton').active = true;
          this.node.getChildByName('NextButton').active = true;
          this.node.getChildByName('back').active = true;
          profiler.showStats();
        };
        BackButton.saveOffset = function saveOffset() {
          if (BackButton._scrollNode) {
            BackButton._offset = new Vec3(0, BackButton._scrollCom.getScrollOffset().y, 0);
          }
        };
        BackButton.saveIndex = function saveIndex(index) {
          BackButton._sceneIndex = index;
          BackButton.refreshButton();
        };
        BackButton.refreshButton = function refreshButton() {
          if (BackButton._sceneIndex === -1) {
            BackButton._prevNode.active = false;
            BackButton._nextNode.active = false;
          } else {
            BackButton._prevNode.active = true;
            BackButton._nextNode.active = true;
          }
        };
        _proto.start = function start() {
          var _this$node$getChildBy;
          var camera = this.node.getComponent(Canvas).cameraComponent;
          if (camera.visibility & Layers.Enum.UI_2D) camera.visibility &= ~Layers.Enum.UI_2D;
          this.sceneName = find("backRoot").getChildByName("sceneName").getComponent(Label);
          game.addPersistRootNode(this.node);
          BackButton._scrollNode = this.node.getParent().getChildByPath('Canvas/ScrollView');
          if (BackButton._scrollNode) {
            BackButton._scrollCom = BackButton._scrollNode.getComponent(ScrollView);
          }
          BackButton._blockInput = this.node.getChildByName('BlockInput');
          BackButton._blockInput.active = false;
          BackButton._prevNode = this.node.getChildByName('PrevButton');
          BackButton._nextNode = this.node.getChildByName('NextButton');
          this.searchBox = (_this$node$getChildBy = this.node.getChildByPath('Node/searchEditBox')) == null ? void 0 : _this$node$getChildBy.getComponent(EditBox);
          this.searchButton = this.node.getChildByPath('Node/searchButton');
          if (BackButton._prevNode && BackButton._nextNode) {
            BackButton.refreshButton();
          }
          director.on(Director.EVENT_BEFORE_SCENE_LOADING, this.switchSceneName, this);
        };
        _proto.onDestroy = function onDestroy() {
          var length = SceneList.sceneArray.length;
          for (var i = 0; i < length; i++) {
            SceneList.sceneArray.pop();
          }
          input.off(Input.EventType.GAMEPAD_INPUT, this.onGamepadInput, this);
        };
        _proto.switchSceneName = function switchSceneName() {
          if (this.getSceneName() == null) {
            return;
          }
          this.sceneName.node.active = true;
          this.searchBox.node.active = this.searchButton.active = false;
          this.sceneName.string = this.getFoldName() + ' : ' + this.getSceneName();
        };
        _proto.backToList = function backToList() {
          var _this2 = this;
          director.resume();
          BackButton._blockInput.active = true;
          director.loadScene('TestList', function () {
            _this2.sceneName.node.active = false;
            _this2.searchButton.active = true;
            if (_this2.searchBox.string.length > 0) {
              _this2.searchBox.node.active = true;
              _this2.searchBox.setFocus();
            } else {
              _this2.searchBox.node.active = false;
            }
            BackButton._sceneIndex = -1;
            BackButton.refreshButton();
            BackButton._scrollNode = _this2.node.parent.getChildByPath('Canvas/ScrollView');
            if (BackButton._scrollNode) {
              BackButton._scrollCom = BackButton._scrollNode.getComponent(ScrollView);
              BackButton._scrollCom.scrollToOffset(BackButton.offset, 0.1, true);
            }
            BackButton._blockInput.active = false;
          });
        };
        _proto.nextScene = function nextScene() {
          director.resume();
          BackButton._blockInput.active = true;
          this.updateSceneIndex(true);
          var sceneName = this.getSceneName();
          director.loadScene(sceneName, function (err) {
            BackButton._blockInput.active = false;
          });
        };
        _proto.preScene = function preScene() {
          director.resume();
          BackButton._blockInput.active = true;
          this.updateSceneIndex(false);
          director.loadScene(this.getSceneName(), function () {
            BackButton._blockInput.active = false;
          });
        };
        _proto.updateSceneIndex = function updateSceneIndex(next) {
          if (next) {
            BackButton._sceneIndex + 1 >= SceneList.sceneArray.length ? BackButton._sceneIndex = 0 : BackButton._sceneIndex += 1;
          } else {
            BackButton._sceneIndex - 1 < 0 ? BackButton._sceneIndex = SceneList.sceneArray.length - 1 : BackButton._sceneIndex -= 1;
          }
        };
        _proto.getSceneName = function getSceneName() {
          return SceneList.sceneArray[BackButton._sceneIndex];
        };
        _proto.getFoldName = function getFoldName() {
          return SceneList.sceneFold[BackButton._sceneIndex];
        };
        _proto.isControllerButtonPress = function isControllerButtonPress(val) {
          var ret = !!(val > 0);
          return ret;
        };
        _proto.onGamepadInput = function onGamepadInput(event) {
          var pressSensitiveTime = 250; //ms
          var axisPrecision = 0.03;
          var currentSence = director.getScene();
          if ((currentSence == null ? void 0 : currentSence.name) == "" || (currentSence == null ? void 0 : currentSence.name) == "TestList" || (currentSence == null ? void 0 : currentSence.name) == "gamepad-event") {
            return;
          }
          if (this.lastPressTimestamp != 0 && Date.now() - this.lastPressTimestamp < pressSensitiveTime) {
            return;
          }
          this.lastPressTimestamp = Date.now();
          var gp = event.gamepad;
          var ls = gp.leftStick.getValue();
          var isLeft = this.isControllerButtonPress(gp.dpad.left.getValue()) || ls.x < -axisPrecision;
          var isRight = this.isControllerButtonPress(gp.dpad.right.getValue()) || ls.x > axisPrecision;
          var isBack = this.isControllerButtonPress(gp.buttonEast.getValue());
          if (isBack) {
            this.backToList();
          } else if (isLeft) {
            this.preScene();
          } else if (isRight) {
            this.nextScene();
          }
        };
        _proto.searchBoxChange = function searchBoxChange(searchText) {
          var _director$getScene;
          if (!this.sceneArray) {
            this.sceneArray = SceneList.sceneArray.slice();
            this.sceneFold = SceneList.sceneFold.slice();
          }
          if (!searchText) {
            SceneList.sceneArray = this.sceneArray.slice();
            SceneList.sceneFold = this.sceneFold.slice();
          } else {
            SceneList.sceneArray.length = 0;
            SceneList.sceneFold.length = 0;
            searchText = searchText.toLowerCase();
            for (var i = 0; i < this.sceneArray.length; i++) {
              if (this.sceneArray[i].toLowerCase().indexOf(searchText) !== -1) {
                SceneList.sceneArray.push(this.sceneArray[i]);
                SceneList.sceneFold.push(this.sceneFold[i]);
              }
            }
          }
          (_director$getScene = director.getScene()) == null || (_director$getScene = _director$getScene.getComponentInChildren('scenemanager')) == null || _director$getScene.makeSceneItems();
        };
        _proto.searchBoxEnter = function searchBoxEnter() {
          this.searchButtonClick();
        };
        _proto.searchButtonClick = function searchButtonClick() {
          var _this$searchBox;
          if ((_this$searchBox = this.searchBox) != null && _this$searchBox.node.active) {
            this.searchBox.node.active = false;
          } else {
            var _this$searchBox2;
            this.searchBox.node.active = true;
            (_this$searchBox2 = this.searchBox) == null || _this$searchBox2.setFocus();
          }
        };
        _createClass(BackButton, null, [{
          key: "offset",
          get: function get() {
            return BackButton._offset;
          },
          set: function set(value) {
            BackButton._offset = value;
          }
        }]);
        return BackButton;
      }(Component), _class3._offset = new Vec3(), _class3._scrollNode = null, _class3._scrollCom = null, _class3._sceneIndex = -1, _class3._blockInput = void 0, _class3._prevNode = void 0, _class3._nextNode = void 0, _class3.focusButtonIndex = 0, _class3.isControllerMode = false, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoTestConfig", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "noAutoTest", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackPackUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, ScrollView, instantiate, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "88c12+9VW9MSa0k23tDsf+r", "BackPackUI", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BackPackUI = exports('BackPackUI', (_dec = property({
        type: Prefab
      }), _dec2 = property({
        type: ScrollView
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackPackUI, _Component);
        function BackPackUI() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "slotPrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "scrollView", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "totalCount", _descriptor3, _assertThisInitialized(_this));
          _this.home = null;
          _this.heroSlots = [];
          return _this;
        }
        var _proto = BackPackUI.prototype;
        _proto.init = function init(home) {
          this.heroSlots.length = 0;
          this.home = home;
          for (var i = 0; i < this.totalCount; ++i) {
            var heroSlot = this.addHeroSlot();
            this.heroSlots.push(heroSlot);
          }
        };
        _proto.addHeroSlot = function addHeroSlot() {
          var heroSlot = instantiate(this.slotPrefab);
          this.scrollView.content.addChild(heroSlot);
          return heroSlot;
        };
        _proto.show = function show() {
          this.node.active = true;
          this.node.emit('fade-in');
        };
        _proto.hide = function hide() {
          this.node.active = false;
          this.node.emit('fade-out');
        };
        return BackPackUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "slotPrefab", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "totalCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/batch-tester.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Label, Slider, director, instantiate, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Label = module.Label;
      Slider = module.Slider;
      director = module.director;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "2e116ACZoBGcpoJL3RMAD5+", "batch-tester", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BatchTester = exports('BatchTester', (_dec = ccclass('BatchTester'), _dec2 = property(Prefab), _dec3 = property(Label), _dec4 = property(Slider), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BatchTester, _Component);
        function BatchTester() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "prefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "slider", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "count", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "xinterval", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "zinterval", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "hoverSpeed", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "maxCount", _descriptor8, _assertThisInitialized(_this));
          _this._nodes = [];
          _this._delays = [];
          return _this;
        }
        var _proto = BatchTester.prototype;
        _proto.start = function start() {
          for (var i = 0; i < this.count; i++) {
            for (var j = 0; j < 10; j++) {
              this._createBatch(i, j);
            }
          }
          this.label.string = 'Boxes: ' + this.count * 100;
          this.slider.progress = this.count / this.maxCount;
        };
        _proto.update = function update() {
          var t = director.getCurrentTime();
          for (var i = 0; i < this._nodes.length; i++) {
            var node = this._nodes[i];
            var delay = this._delays[i];
            var position = node.position;
            var y = Math.sin(delay + t * this.hoverSpeed);
            node.setPosition(position.x, y, position.z);
          }
        };
        _proto.setCount = function setCount(e) {
          var count = Math.floor(e.progress * this.maxCount);
          if (count > this.count) {
            for (var i = this.count; i < count; i++) {
              for (var j = 0; j < 10; j++) {
                this._createBatch(i, j);
              }
            }
          } else {
            if (this._nodes.length > 0) {
              for (var _i = count; _i < this.count; _i++) {
                for (var _j = 0; _j < 10; _j++) {
                  var _this$_nodes$splice$;
                  var idx = count * 100;
                  (_this$_nodes$splice$ = this._nodes.splice(idx, 10)[0].parent) == null || _this$_nodes$splice$.setParent(null);
                  this._delays.splice(idx, 10);
                }
              }
            }
          }
          this.count = count;
          this.label.string = 'Boxes: ' + this.count * 100;
        };
        _proto._createBatch = function _createBatch(i, j) {
          var node = instantiate(this.prefab);
          node.setPosition(j * this.xinterval, 0, i * this.zinterval);
          node.name = '' + (i * 10 + j) * 10;
          node.setParent(this.node.parent);
          Array.prototype.push.apply(this._nodes, node.children);
          Array.prototype.push.apply(this._delays, node.children.map(function () {
            return Math.random() * Math.PI * 2;
          }));
        };
        return BatchTester;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "slider", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "count", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "xinterval", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "zinterval", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "hoverSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.01;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "maxCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 50;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BuildTimeConstantsTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './env'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, view, UITransform, Vec3, Component, env;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      view = module.view;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      env = module;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "b0326gWXPZCZZWtUz1h2XSP", "BuildTimeConstantsTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu,
        executeInEditMode = _decorator.executeInEditMode;

      // import * as buildTimeConstants from 'build-time-constants';

      var keys = Object.keys(env).sort();
      var ccKeys = Object.keys(globalThis).filter(function (key) {
        return key.startsWith('CC_');
      }).sort();
      var RemovedList = ['LINKSURE', 'QTT', 'ALIPAY'];
      var BuildTimeConstantsTest = exports('BuildTimeConstantsTest', (_dec = ccclass('BuildTimeConstantsTest'), _dec2 = menu('TestCases/Scripting/BuildTimeConstantsTest'), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = _dec2(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BuildTimeConstantsTest, _Component);
        function BuildTimeConstantsTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "labelNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "ccLabelNode", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BuildTimeConstantsTest.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          var label = this.labelNode.getComponent(Label);
          var keyNameMaxLen = keys.reduce(function (len, key) {
            return Math.max(len, key.length);
          }, 0);
          var resultString = '';
          keys.forEach(function (key) {
            if (RemovedList.includes(key)) {
              return;
            }
            var value = env[key];
            if (typeof value === 'boolean') {
              var valueRep = value ? 'V' : 'X';
              resultString += key.padStart(keyNameMaxLen, ' ') + " : " + valueRep + "\n";
            } else {
              // number type
              resultString += key.padStart(keyNameMaxLen, ' ') + " : " + value + "\n";
            }
          });
          label.string = resultString;
          var ccLabel = this.ccLabelNode.getComponent(Label);
          var ccKeyNameMaxLen = ccKeys.reduce(function (len, key) {
            return Math.max(len, key.length);
          }, 0);
          resultString = '';
          ccKeys.forEach(function (key) {
            if (RemovedList.includes(key.substring(3))) {
              return;
            }
            // @ts-ignore
            var value = globalThis[key];
            var valueRep = value ? 'V' : 'X';
            resultString += key.padStart(ccKeyNameMaxLen, ' ') + " : " + valueRep + "\n";
          });
          ccLabel.string = resultString;
          this.scheduleOnce(function () {
            var visibleHeight = view.getVisibleSize().height;
            var labelHeight = _this2.labelNode.getComponent(UITransform).contentSize.height;
            var targetHeight = visibleHeight - 20;
            if (labelHeight > targetHeight) {
              // fit height
              var scaleY = targetHeight / labelHeight;
              var vec3 = new Vec3(scaleY, scaleY, scaleY);
              _this2.labelNode.setScale(vec3);
              _this2.ccLabelNode.setScale(vec3);
            }
          }, 0);
        };
        return BuildTimeConstantsTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ccLabelNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/builtin-textures-test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, builtinResMgr, Material, ImageAsset, Texture2D, MeshRenderer, director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      builtinResMgr = module.builtinResMgr;
      Material = module.Material;
      ImageAsset = module.ImageAsset;
      Texture2D = module.Texture2D;
      MeshRenderer = module.MeshRenderer;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;
      cclegacy._RF.push({}, "688f9YT1YFPCaX2+wgtZIv8", "builtin-textures-test", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = BuiltinTexturesTest
       * DateTime = Wed Dec 22 2021 18:14:42 GMT+0800 (中国标准时间)
       * Author = Greg1129
       * FileBasename = builtin-textures-test.ts
       * FileBasenameNoExtension = builtin-textures-test
       * URL = db://assets/cases/material/builtin-textures-test.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var BuiltinTexturesTest = exports('BuiltinTexturesTest', (_dec = ccclass('BuiltinTexturesTest'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: Node
      }), _dec10 = property({
        type: Node
      }), _dec11 = property({
        type: Node
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BuiltinTexturesTest, _Component);
        function BuiltinTexturesTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _initializerDefineProperty(_this, "nodeBlack", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeWhite", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeGrey", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeEmpty", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeNormal", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeDefault", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeBlack1", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeWhite1", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeGrey1", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeEmpty1", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeNormal1", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodeDefault1", _descriptor12, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = BuiltinTexturesTest.prototype;
        _proto.start = function start() {
          var blackTexture = builtinResMgr.get('black-texture');
          var whiteTexture = builtinResMgr.get('white-texture');
          var greyTexture = builtinResMgr.get('grey-texture');
          var emptyTexture = builtinResMgr.get('empty-texture');
          var normalTexture = builtinResMgr.get('normal-texture');
          var defaultTexture = builtinResMgr.get('default-texture');
          var blackRenderMat = new Material();
          blackRenderMat._uuid = "black";
          blackRenderMat.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          blackRenderMat.setProperty('mainTexture', blackTexture, 0);
          var whiteRenderMat = new Material();
          whiteRenderMat._uuid = "white";
          whiteRenderMat.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          whiteRenderMat.setProperty('mainTexture', whiteTexture, 0);
          var greyRenderMat = new Material();
          greyRenderMat._uuid = "grey";
          greyRenderMat.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          greyRenderMat.setProperty('mainTexture', greyTexture, 0);
          var emptyRenderMat = new Material();
          emptyRenderMat._uuid = "empty";
          emptyRenderMat.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          emptyRenderMat.setProperty('mainTexture', emptyTexture, 0);
          var normalRenderMat = new Material();
          normalRenderMat._uuid = "normal";
          normalRenderMat.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          normalRenderMat.setProperty('mainTexture', normalTexture, 0);
          var defaultRenderMat = new Material();
          defaultRenderMat._uuid = "default";
          defaultRenderMat.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          defaultRenderMat.setProperty('mainTexture', defaultTexture, 0);

          // build from canvas
          var canvas = document.createElement('canvas');
          var context = canvas.getContext('2d');
          var imgAsset = new ImageAsset(canvas);
          var l = canvas.width = canvas.height = 2;

          // black texture
          context.fillStyle = '#000';
          context.fillRect(0, 0, l, l);
          var blackTextureCanvas = new Texture2D();
          blackTextureCanvas.image = imgAsset;

          // empty texture
          context.fillStyle = 'rgba(0,0,0,0)';
          context.fillRect(0, 0, l, l);
          var emptyTextureCanvas = new Texture2D();
          emptyTextureCanvas.image = imgAsset;

          // grey texture
          context.fillStyle = '#777777';
          context.fillRect(0, 0, l, l);
          var greyTextureCanvas = new Texture2D();
          greyTextureCanvas.image = imgAsset;

          // white texture
          context.fillStyle = '#ffffff';
          context.fillRect(0, 0, l, l);
          var whiteTextureCanvas = new Texture2D();
          whiteTextureCanvas.image = imgAsset;

          // normal texture
          context.fillStyle = '#7f7fff';
          context.fillRect(0, 0, l, l);
          var normalTextureCanvas = new Texture2D();
          normalTextureCanvas.image = imgAsset;

          // default texture
          canvas.width = canvas.height = 16;
          context.fillStyle = '#dddddd';
          context.fillRect(0, 0, 16, 16);
          context.fillStyle = '#555555';
          context.fillRect(0, 0, 8, 8);
          context.fillStyle = '#555555';
          context.fillRect(8, 8, 8, 8);
          var defaultTextureCanvas = new Texture2D();
          defaultTextureCanvas.image = imgAsset;
          var blackRenderMatCanvas = new Material();
          blackRenderMatCanvas._uuid = "black1";
          blackRenderMatCanvas.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          blackRenderMatCanvas.setProperty('mainTexture', blackTextureCanvas, 0);
          var whiteRenderMatCanvas = new Material();
          whiteRenderMatCanvas._uuid = "white1";
          whiteRenderMatCanvas.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          whiteRenderMatCanvas.setProperty('mainTexture', whiteTextureCanvas, 0);
          var greyRenderMatCanvas = new Material();
          greyRenderMatCanvas._uuid = "grey1";
          greyRenderMatCanvas.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          greyRenderMatCanvas.setProperty('mainTexture', greyTextureCanvas, 0);
          var emptyRenderMatCanvas = new Material();
          emptyRenderMatCanvas._uuid = "empty1";
          emptyRenderMatCanvas.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          emptyRenderMatCanvas.setProperty('mainTexture', emptyTextureCanvas, 0);
          var normalRenderMatCanvas = new Material();
          normalRenderMatCanvas._uuid = "normal1";
          normalRenderMatCanvas.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          normalRenderMatCanvas.setProperty('mainTexture', normalTextureCanvas, 0);
          var defaultRenderMatCanvas = new Material();
          defaultRenderMatCanvas._uuid = "default1";
          defaultRenderMatCanvas.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_TEXTURE: true
            }
          });
          defaultRenderMatCanvas.setProperty('mainTexture', defaultTextureCanvas, 0);
          if (this.nodeBlack) {
            this.nodeBlack.getComponent(MeshRenderer).material = blackRenderMat;
          }
          if (this.nodeWhite) {
            this.nodeWhite.getComponent(MeshRenderer).material = whiteRenderMat;
          }
          if (this.nodeGrey) {
            this.nodeGrey.getComponent(MeshRenderer).material = greyRenderMat;
          }
          if (this.nodeEmpty) {
            this.nodeEmpty.getComponent(MeshRenderer).material = emptyRenderMat;
          }
          if (this.nodeNormal) {
            this.nodeNormal.getComponent(MeshRenderer).material = normalRenderMat;
          }
          if (this.nodeDefault) {
            this.nodeDefault.getComponent(MeshRenderer).material = defaultRenderMat;
          }
          if (this.nodeBlack1) {
            this.nodeBlack1.getComponent(MeshRenderer).material = blackRenderMatCanvas;
          }
          if (this.nodeWhite1) {
            this.nodeWhite1.getComponent(MeshRenderer).material = whiteRenderMatCanvas;
          }
          if (this.nodeGrey1) {
            this.nodeGrey1.getComponent(MeshRenderer).material = greyRenderMatCanvas;
          }
          if (this.nodeEmpty1) {
            this.nodeEmpty1.getComponent(MeshRenderer).material = emptyRenderMatCanvas;
          }
          if (this.nodeNormal1) {
            this.nodeNormal1.getComponent(MeshRenderer).material = normalRenderMatCanvas;
          }
          if (this.nodeDefault1) {
            this.nodeDefault1.getComponent(MeshRenderer).material = defaultRenderMatCanvas;
          }
          var defaultCubeTexture = builtinResMgr.get("default-cube-texture");
          director.getScene().globals.skybox.envmap = defaultCubeTexture;
        };
        return BuiltinTexturesTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeBlack", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeWhite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeGrey", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeEmpty", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeNormal", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodeDefault", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "nodeBlack1", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nodeWhite1", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "nodeGrey1", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "nodeEmpty1", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "nodeNormal1", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "nodeDefault1", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ButtonEventCapture.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EventHandler, Button, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EventHandler = module.EventHandler;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "c78c8Aob3dDEZX15sLNznvP", "ButtonEventCapture", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var emptyArr = new Array();
      var ButtonEventCapture = exports('ButtonEventCapture', (_dec = ccclass("ButtonEventCapture"), _dec2 = property({
        type: EventHandler
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ButtonEventCapture, _Component);
        function ButtonEventCapture() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "eventHandler", _descriptor, _assertThisInitialized(_this));
          _this._button = null;
          _this._click = false;
          return _this;
        }
        var _proto = ButtonEventCapture.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this._button = this.getComponent(Button);
          this._button.node.on(Button.EventType.CLICK, this.click, this);
        };
        _proto.click = function click() {
          this._click = true;
        };
        _proto.update = function update(deltaTime) {
          // Your update function goes here.
          if (this._click) {
            emptyArr[0] = deltaTime;
            this.eventHandler.emit(emptyArr);
            this._click = false;
          }
        };
        return ButtonEventCapture;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventHandler", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new EventHandler();
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ButtonScaler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Button, tween, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Button = module.Button;
      tween = module.tween;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "aeffbvAe81PUK6yo5lqC9d9", "ButtonScaler", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ButtonScaler = exports('ButtonScaler', ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ButtonScaler, _Component);
        function ButtonScaler() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "scaleTo", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "transDuration", _descriptor2, _assertThisInitialized(_this));
          _this.initScale = new Vec3();
          _this.button = null;
          _this._scale = new Vec3(1, 1, 1);
          _this._lastScale = new Vec3();
          _this._start = new Vec3();
          return _this;
        }
        var _proto = ButtonScaler.prototype;
        // use this for initialization
        _proto.onLoad = function onLoad() {
          var self = this;
          self.initScale = this.node.scale;
          self.button = self.getComponent(Button);
          var tweenDown = tween(this._scale);
          var tewenUp = tween(this._scale);
          this.node.getScale(this._start);
          tweenDown.to(this.transDuration, this.scaleTo, {
            easing: 'cubicInOut'
          });
          tewenUp.to(this.transDuration, this._start, {
            easing: 'cubicInOut'
          });
          this._lastScale.set(this._scale);
          function onTouchDown(event) {
            tweenDown.start();
          }
          function onTouchUp(event) {
            tweenDown.stop();
            tewenUp.start();
          }
          this.node.on(Node.EventType.TOUCH_START, onTouchDown, this);
          this.node.on(Node.EventType.TOUCH_END, onTouchUp, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, onTouchUp, this);
        };
        _proto.update = function update() {
          if (!this._scale.equals(this._lastScale)) {
            this.node.setScale(this._scale);
            this._lastScale.set(this._scale);
          }
        };
        return ButtonScaler;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scaleTo", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(1.2, 1.2, 1.2);
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "transDuration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      })), _class2)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ByteCodeCache.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f0c346Uy2hLS7HWIBLGbqsJ", "ByteCodeCache", undefined);
      var LastTimeResult = exports('LastTimeResult', {
        done: false,
        message: ''
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ByteCodeLoader.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ByteCodeCache.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, LastTimeResult;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      LastTimeResult = module.LastTimeResult;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "837f0IrH45KSY3rRxEsmFC6", "ByteCodeLoader", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ByteCodeCache = exports('ByteCodeCache', (_dec = ccclass('ByteCodeCache'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ByteCodeCache, _Component);
        function ByteCodeCache() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "statusLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "titleLabel", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ByteCodeCache.prototype;
        _proto.start = function start() {
          setTimeout(this.runTest.bind(this), 0);
        };
        _proto.runTest = function runTest() {
          this.titleLabel.string = 'Bytecode Test';
          if (typeof jsb === 'undefined' || !jsb.saveByteCode) {
            this.statusLabel.string = 'Bytecode is not supported!';
          } else {
            if (LastTimeResult.done) {
              this.statusLabel.string = LastTimeResult.message;
              this.titleLabel.string = 'Bytecode Test (cached result)';
              return;
            }
            do {
              this.statusLabel.string = 'Generating JS file..';
              var src_file = jsb.fileUtils.getWritablePath() + 'bytecode_bigjs.js';
              var src_file2 = jsb.fileUtils.getWritablePath() + 'bytecode_bigjs2.js';
              {
                var start = new Date().getTime();
                if (jsb.fileUtils.isFileExist(src_file)) {
                  jsb.fileUtils.removeFile(src_file);
                }
                if (jsb.fileUtils.isFileExist(src_file2)) {
                  jsb.fileUtils.removeFile(src_file2);
                }
                var codeLines = ['function test_func_0() { return Math.random();}'];
                var funcCount = 100000;
                for (var i = 1; i < funcCount; i++) {
                  codeLines.push("function test_func_" + i + "() { return test_func_" + (i - 1) + "() * Math.random();}");
                }
                codeLines.push("if(Math.random() < 0.00000001) console.log(\"wow \" + test_func_" + (funcCount - 1) + "());");
                var codeText = codeLines.join('\n');
                var ok = jsb.fileUtils.writeStringToFile(codeText + "\"Success bc\"", src_file);
                if (!ok) {
                  this.statusLabel.string += '\n - failed to save source code.';
                  break;
                }
                ok = jsb.fileUtils.writeStringToFile(codeText + "\"Success js\"", src_file2);
                if (!ok) {
                  this.statusLabel.string += '\n - failed to save source code..';
                  break;
                }
                this.statusLabel.string += '\n - file size ' + codeText.length;
                var end = new Date().getTime();
                this.statusLabel.string += '\n - generating scripts takes ' + (end - start) + 'ms';
              }
              this.statusLabel.string += '\nGenerating bytecode..';
              var dstFile = src_file + '.bc';
              {
                if (jsb.fileUtils.isFileExist(dstFile)) {
                  jsb.fileUtils.removeFile(dstFile);
                }
                var _start = new Date().getTime();
                var _ok = jsb.saveByteCode(src_file, dstFile);
                var _end = new Date().getTime();
                if (!_ok) {
                  this.statusLabel.string += '\n - failed to generate bytecode!';
                  break;
                }
                this.statusLabel.string += '\n - generating bytecode takes ' + (_end - _start) + 'ms';
              }
              this.statusLabel.string += '\nRunning bytecode.. (shorter time expected)';
              {
                var _start2 = new Date().getTime();
                var result = require(dstFile);
                var _end2 = new Date().getTime();
                this.statusLabel.string += '\n - script return: ' + result;
                this.statusLabel.string += '\n - require bytecode takes ' + (_end2 - _start2) + 'ms';
              }
              this.statusLabel.string += '\nRunning text script.. (longer time expected)';
              {
                var _start3 = new Date().getTime();
                var _result = require(src_file2);
                var _end3 = new Date().getTime();
                this.statusLabel.string += '\n - script return: ' + _result;
                this.statusLabel.string += '\n - require text script takes ' + (_end3 - _start3) + 'ms';
              }
            } while (false);
            LastTimeResult.done = true;
            LastTimeResult.message = this.statusLabel.string;
          }
        };
        return ByteCodeCache;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "statusLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "titleLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CameraController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Quat, math, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "c40916EtdZOjJLnC+2Jc6AL", "CameraController", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var CameraController = exports('CameraController', (_dec = ccclass("CameraController"), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraController, _Component);
        function CameraController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "translateDelta", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rotateDelta", _descriptor2, _assertThisInitialized(_this));
          _this._rotateDelta = 0;
          _this._temp_vec3 = new Vec3();
          _this._temp_quat = new Quat();
          return _this;
        }
        var _proto = CameraController.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this._rotateDelta = math.toRadian(this.rotateDelta);
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.translate = function translate(leftRight, backForth, dt) {
          Vec3.set(this._temp_vec3, leftRight * this.translateDelta * dt, 0, backForth * this.translateDelta * dt);
          this.node.translate(this._temp_vec3);
        };
        _proto.rotate = function rotate(longitudinal, perpendicular, dt) {
          Quat.fromEuler(this._temp_quat, perpendicular * this.rotateDelta * dt, longitudinal * this.rotateDelta * dt, 0);
          this.node.rotate(this._temp_quat);
        };
        _proto.onPushJoystick = function onPushJoystick(dt, customEventData) {
          switch (customEventData) {
            case 'F':
              this.translate(0, -1, dt);
              break;
            case 'B':
              this.translate(0, 1, dt);
              break;
            case 'L':
              this.translate(-1, 0, dt);
              break;
            case 'R':
              this.translate(1, 0, dt);
              break;
            case 'U':
              this.rotate(0, 1, dt);
              break;
            case 'D':
              this.rotate(0, -1, dt);
              break;
            case 'RL':
              this.rotate(1, 0, dt);
              break;
            case 'RR':
              this.rotate(-1, 0, dt);
              break;
          }
        };
        return CameraController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "translateDelta", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rotateDelta", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/cameraCotroller.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, math, KeyCode, input, Input, game, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      KeyCode = module.KeyCode;
      input = module.input;
      Input = module.Input;
      game = module.game;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "3153eeiyZlIgKI5a51ELBom", "cameraCotroller", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Vec2 = math.Vec2,
        Vec3 = math.Vec3,
        Quat = math.Quat;
      var v2_1 = new Vec2();
      var v2_2 = new Vec2();
      var v3_1 = new Vec3();
      var qt_1 = new Quat();
      var KEYCODE = {
        W: 'W'.charCodeAt(0),
        S: 'S'.charCodeAt(0),
        A: 'A'.charCodeAt(0),
        D: 'D'.charCodeAt(0),
        Q: 'Q'.charCodeAt(0),
        E: 'E'.charCodeAt(0),
        SHIFT: KeyCode.SHIFT_LEFT
      };
      var cameraController = exports('cameraController', (_dec = property({
        slide: true,
        range: [0.05, 0.5, 0.01]
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(cameraController, _Component);
        function cameraController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "moveSpeed", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "moveSpeedShiftScale", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "damp", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rotateSpeed", _descriptor4, _assertThisInitialized(_this));
          _this._euler = new Vec3();
          _this._velocity = new Vec3();
          _this._position = new Vec3();
          _this._speedScale = 1;
          return _this;
        }
        var _proto = cameraController.prototype;
        _proto.onLoad = function onLoad() {
          input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          Vec3.copy(this._euler, this.node.eulerAngles);
          Vec3.copy(this._position, this.node.position);
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.off(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
        };
        _proto.update = function update(dt) {
          var t = Math.min(dt / this.damp, 1);
          // position
          Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);
          Vec3.scaleAndAdd(this._position, this._position, v3_1, this.moveSpeed * this._speedScale);
          Vec3.lerp(v3_1, this.node.position, this._position, t);
          this.node.setPosition(v3_1);
          // rotation
          Quat.fromEuler(qt_1, this._euler.x, this._euler.y, this._euler.z);
          Quat.slerp(qt_1, this.node.rotation, qt_1, t);
          this.node.setRotation(qt_1);
        };
        _proto.onMouseWheel = function onMouseWheel(e) {
          var delta = -e.getScrollY() * this.moveSpeed * 0.01; // delta is positive when scroll down
          Vec3.transformQuat(v3_1, Vec3.UNIT_Z, this.node.rotation);
          Vec3.scaleAndAdd(this._position, this.node.position, v3_1, delta);
        };
        _proto.onKeyDown = function onKeyDown(e) {
          var v = this._velocity;
          if (e.keyCode === KEYCODE.SHIFT) {
            this._speedScale = this.moveSpeedShiftScale;
          } else if (e.keyCode === KEYCODE.W) {
            if (v.z === 0) {
              v.z = -1;
            }
          } else if (e.keyCode === KEYCODE.S) {
            if (v.z === 0) {
              v.z = 1;
            }
          } else if (e.keyCode === KEYCODE.A) {
            if (v.x === 0) {
              v.x = -1;
            }
          } else if (e.keyCode === KEYCODE.D) {
            if (v.x === 0) {
              v.x = 1;
            }
          } else if (e.keyCode === KEYCODE.Q) {
            if (v.y === 0) {
              v.y = -1;
            }
          } else if (e.keyCode === KEYCODE.E) {
            if (v.y === 0) {
              v.y = 1;
            }
          }
        };
        _proto.onKeyUp = function onKeyUp(e) {
          var v = this._velocity;
          if (e.keyCode === KEYCODE.SHIFT) {
            this._speedScale = 1;
          } else if (e.keyCode === KEYCODE.W) {
            if (v.z < 0) {
              v.z = 0;
            }
          } else if (e.keyCode === KEYCODE.S) {
            if (v.z > 0) {
              v.z = 0;
            }
          } else if (e.keyCode === KEYCODE.A) {
            if (v.x < 0) {
              v.x = 0;
            }
          } else if (e.keyCode === KEYCODE.D) {
            if (v.x > 0) {
              v.x = 0;
            }
          } else if (e.keyCode === KEYCODE.Q) {
            if (v.y < 0) {
              v.y = 0;
            }
          } else if (e.keyCode === KEYCODE.E) {
            if (v.y > 0) {
              v.y = 0;
            }
          }
        };
        _proto.onTouchStart = function onTouchStart() {
          if (game.canvas['requestPointerLock']) {
            game.canvas.requestPointerLock();
          }
        };
        _proto.onTouchMove = function onTouchMove(e) {
          e.getStartLocation(v2_1);
          if (v2_1.x > game.canvas.width * 0.4) {
            // rotation
            e.getDelta(v2_2);
            this._euler.y -= v2_2.x * this.rotateSpeed * 0.1;
            this._euler.x += v2_2.y * this.rotateSpeed * 0.1;
          } else {
            // position
            e.getLocation(v2_2);
            Vec2.subtract(v2_2, v2_2, v2_1);
            this._velocity.x = v2_2.x * 0.01;
            this._velocity.z = -v2_2.y * 0.01;
          }
        };
        _proto.onTouchEnd = function onTouchEnd(e) {
          if (document.exitPointerLock) {
            document.exitPointerLock();
          }
          e.getStartLocation(v2_1);
          if (v2_1.x < game.canvas.width * 0.4) {
            // position
            this._velocity.x = 0;
            this._velocity.z = 0;
          }
        };
        return cameraController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "moveSpeedShiftScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "damp", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rotateSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/capture_to_web.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Camera, SpriteFrame, RenderTexture, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Camera = module.Camera;
      SpriteFrame = module.SpriteFrame;
      RenderTexture = module.RenderTexture;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "c0df2m0GMhJYpH+xSMVYVVQ", "capture_to_web", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var CaptureToWeb = exports('CaptureToWeb', (_dec = ccclass('CaptureToWeb'), _dec2 = menu('RenderTexture/CaptureToWeb'), _dec3 = property(Sprite), _dec4 = property(Camera), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CaptureToWeb, _Component);
        function CaptureToWeb() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sprite", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "camera", _descriptor2, _assertThisInitialized(_this));
          _this._renderTex = null;
          return _this;
        }
        var _proto = CaptureToWeb.prototype;
        _proto.start = function start() {
          var spriteFrame = this.sprite.spriteFrame;
          var sp = new SpriteFrame();
          sp.reset({
            originalSize: spriteFrame.originalSize,
            rect: spriteFrame.rect,
            offset: spriteFrame.offset,
            isRotate: spriteFrame.rotated,
            borderTop: spriteFrame.insetTop,
            borderLeft: spriteFrame.insetLeft,
            borderBottom: spriteFrame.insetBottom,
            borderRight: spriteFrame.insetRight
          });
          var renderTex = this._renderTex = new RenderTexture();
          renderTex.reset({
            width: 128,
            height: 128
          });
          this.camera.targetTexture = renderTex;
          sp.texture = renderTex;
          this.sprite.spriteFrame = sp;
          this.sprite.updateMaterial();
          this.scheduleOnce(function () {
            renderTex.resize(512, 512);
          }, 2);
        };
        _proto.onDestroy = function onDestroy() {
          if (this._renderTex) {
            this._renderTex.destroy();
            this._renderTex = null;
          }
        };
        return CaptureToWeb;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/change-graphics.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Graphics, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "b8d16/SKKRMO5pWpEllhAXf", "change-graphics", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var ChangeGraphics = exports('ChangeGraphics', (_dec = ccclass("ChangeGraphics"), _dec2 = menu('UI/ChangeGraphics'), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ChangeGraphics, _Component);
        function ChangeGraphics() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = ChangeGraphics.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.drawRect = function drawRect() {
          var g = this.getComponent(Graphics);
          g.clear();
          g.lineWidth = 10;
          g.fillColor.fromHEX('#ff0000');

          // rect
          g.rect(-250, 0, 200, 100);

          // round rect
          g.roundRect(50, 0, 200, 100, 20);
          g.stroke();
          g.fill();
        };
        _proto.drawArc = function drawArc() {
          var g = this.getComponent(Graphics);
          g.clear();
          g.lineWidth = 5;
          g.fillColor.fromHEX('#ff0000');
          g.arc(0, 0, 100, Math.PI / 2, Math.PI, false);
          g.lineTo(0, 0);
          g.close();
          g.stroke();
          g.fill();
          g.fillColor.fromHEX('#00ff00');
          g.arc(-10, 10, 100, Math.PI / 2, Math.PI, true);
          g.lineTo(-10, 10);
          g.close();
          g.stroke();
          g.fill();
        };
        _proto.drawLineTo = function drawLineTo() {
          var g = this.getComponent(Graphics);
          g.clear();
          g.lineWidth = 10;
          g.fillColor.fromHEX('#ff0000');
          g.moveTo(-20, 0);
          g.lineTo(0, -100);
          g.lineTo(20, 0);
          g.lineTo(0, 100);
          g.close();
          g.stroke();
          g.fill();
        };
        _proto.drawEllipse = function drawEllipse() {
          var g = this.getComponent(Graphics);
          g.clear();
          g.lineWidth = 10;
          g.fillColor.fromHEX('#ff0000');
          g.circle(150, 0, 100);
          g.ellipse(-150, 0, 100, 70);
          g.stroke();
          g.fill();
        };
        return ChangeGraphics;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChangeBloom.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "aa6007heEFMZ5dZbrOZkJz1", "ChangeBloom", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ChangeBloom = exports('ChangeBloom', (_dec = ccclass('ChangeBloom'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ChangeBloom, _Component);
        function ChangeBloom() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.postprocessSetting = void 0;
          return _this;
        }
        var _proto = ChangeBloom.prototype;
        _proto.start = function start() {
          this.postprocessSetting = this.getComponent("BuiltinPipelineSettings");
        };
        _proto.changeBloom = function changeBloom(eve) {
          this.postprocessSetting.bloomThreshold = eve.progress;
        };
        return ChangeBloom;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ChangeLanguage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './l10n.ts', './l10n-manager.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Component, l10n;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, null, function (module) {
      l10n = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "8290e/o0HVBL4ZF61RC8URp", "ChangeLanguage", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ChangeLanguage = exports('ChangeLanguage', (_dec = ccclass('ChangeLanguage'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ChangeLanguage, _Component);
        function ChangeLanguage() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = ChangeLanguage.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.changeLanguage = /*#__PURE__*/function () {
          var _changeLanguage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var languages, currentLanguage, currentLanguageIndex;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  languages = l10n.languages;
                  console.log(languages);
                  currentLanguage = l10n.currentLanguage;
                  currentLanguageIndex = languages.findIndex(function (lan) {
                    return lan === currentLanguage;
                  });
                  currentLanguageIndex = (currentLanguageIndex + 1) % languages.length;
                  console.log("will change to " + languages[currentLanguageIndex]);
                  _context.next = 8;
                  return l10n.changeLanguage(languages[currentLanguageIndex]);
                case 8:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function changeLanguage() {
            return _changeLanguage.apply(this, arguments);
          }
          return changeLanguage;
        }();
        return ChangeLanguage;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/changeUniform.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec4, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec4 = module.Vec4;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "0e601yHzVhLwYhF9dgYNzIT", "changeUniform", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ChangeUniform = exports('ChangeUniform', (_dec = ccclass('ChangeUniform'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ChangeUniform, _Component);
        function ChangeUniform() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "startTime", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "intervalTime", _descriptor2, _assertThisInitialized(_this));
          _this.spriteCom = null;
          _this.materialIns = null;
          _this.cha = false;
          _this.color = new Vec4(1, 1, 1, 1);
          return _this;
        }
        var _proto = ChangeUniform.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this.cha = false;
          this.spriteCom = this.node.getComponent(Sprite);
          // this.materialIns = this.spriteCom.sharedMaterial;
          this.materialIns = this.spriteCom.material;
          this.schedule(this.changeUni, this.intervalTime, 1000, this.startTime);
        };
        _proto.changeUni = function changeUni() {
          if (this.cha) {
            this.color.set(1, 1, 0, 1);
          } else {
            this.color.set(1, 1, 1, 1);
          }
          this.materialIns.setProperty('mainColor', this.color);
          this.cha = !this.cha;
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return ChangeUniform;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "intervalTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/click-and-listener.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "a9268xYoEFIPLoutplf7g9g", "click-and-listener", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var ClickAndListener = exports('ClickAndListener', (_dec = ccclass("ClickAndListener"), _dec2 = menu('UI/ClickAndListener'), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ClickAndListener, _Component);
        function ClickAndListener() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._label = null;
          return _this;
        }
        var _proto = ClickAndListener.prototype;
        _proto.start = function start() {
          this._label = this.getComponent(Label);
        };
        _proto.clickCallback = function clickCallback(event, data) {
          this._label.string = data;
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return ClickAndListener;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/click-change-size.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Size, UITransform, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Size = module.Size;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "777b0Dcg3JNZI1dOiazs1tI", "click-change-size", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var ClickChangeSize = exports('ClickChangeSize', (_dec = ccclass("ClickChangeSize"), _dec2 = menu('UI/ClickChangeSize'), _dec3 = property(Node), _dec4 = property(Size), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ClickChangeSize, _Component);
        function ClickChangeSize() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "target", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "size", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ClickChangeSize.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this.node.on('click', this.click, this);
        };
        _proto.click = function click() {
          if (this.target) {
            var uiTrans = this.target.getComponent(UITransform);
            uiTrans.contentSize = this.size;
          }
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return ClickChangeSize;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "size", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Size();
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/click-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "7d7e9Ou69ZHXLtYZ7k+65CX", "click-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ClickEvent = exports('ClickEvent', (_dec = ccclass("ClickEvent"), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ClickEvent, _Component);
        function ClickEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "notice", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ClickEvent.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.onButtonClick = function onButtonClick() {
          if (this.notice) {
            this.notice.string = this.node.name + ' had click!';
          }
        };
        return ClickEvent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "notice", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Client.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b6d024kRaRAM6r6jQ+zjtlM", "Client", undefined);
      var Client = exports('Client', /*#__PURE__*/function () {
        function Client(address, port) {
          var _this = this;
          if (address === void 0) {
            address = '127.0.0.1';
          }
          if (port === void 0) {
            port = 8080;
          }
          this._socket = null;
          this._connected = false;
          this._timer = 0;
          this._maxRetryTime = 3;
          this.onopen = null;
          this.onmessage = null;
          this.onclose = null;
          var retryTime = 0;
          var init = function init() {
            {
              _this._socket = new WebSocket('ws://' + address + ':' + port);
            }
            _this._socket.onmessage = function (event) {
              _this.onmessage && _this.onmessage(event);
            };
            _this._socket.onopen = function () {
              _this._connected = true;
              _this.onopen && _this.onopen();
            };
            _this._socket.onerror = function () {
              _this._connected = false;
              retryTime++;
              if (retryTime <= _this._maxRetryTime) {
                _this._timer = setTimeout(init, 1000);
              }
            };
            _this._socket.onclose = function () {
              _this._connected = false;
              _this.onclose && _this.onclose();
            };
          };
          init();
        }
        var _proto = Client.prototype;
        _proto.postMessage = function postMessage(message) {
          if (this._connected) {
            if (typeof message !== 'string' && !(message instanceof ArrayBuffer) && !ArrayBuffer.isView(message)) {
              message = JSON.stringify(message);
            }
            this._socket.send(message);
            return true;
          }
        };
        _proto.close = function close() {
          this._socket.close();
          if (this._timer) {
            clearTimeout(this._timer);
          }
        };
        _createClass(Client, [{
          key: "connected",
          get: function get() {
            return this._connected;
          }
        }]);
        return Client;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/common.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9279by4MadP5bJYo5Iri/Wv", "common", undefined);
      var SceneList = exports('SceneList', function SceneList() {});
      SceneList.sceneArray = [];
      SceneList.sceneFold = [];
      SceneList.foldCount = 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/compressWithGray.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "de857jththOooOC/MDhaR3U", "compressWithGray", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var compressWithGray = exports('compressWithGray', (_dec = ccclass('compressWithGray'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(compressWithGray, _Component);
        function compressWithGray() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = compressWithGray.prototype;
        _proto.start = function start() {
          var sprite = this.node.getComponent(Sprite);
          sprite.grayscale = false;
          sprite.grayscale = true;
        };
        return compressWithGray;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/containerStragety.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, view, ResolutionPolicy, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "f1bbbRryOJNsbRTs2/NjP0G", "containerStragety", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = ContainerStragety
       * DateTime = Wed Nov 10 2021 13:51:26 GMT+0800 (中国标准时间)
       * Author = unbrella_man
       * FileBasename = containerStragety.ts
       * FileBasenameNoExtension = containerStragety
       * URL = db://assets/cases/base/containerStragety.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var TOGGLE_EQUAL_TO_FRAME = 'ToggleEqualToFrame';
      var TOGGLE_PROPORTIONAL_TO_FRAME = 'ToggleProportionalToFrame';
      var ContainerStragety = exports('ContainerStragety', (_dec = ccclass('ContainerStragety'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ContainerStragety, _Component);
        function ContainerStragety() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "noSupoortTip", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ContainerStragety.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.onDestroy = function onDestroy() {
          this.toggleToEqualToFrame();
        };
        _proto.onToggleGroupEvent = function onToggleGroupEvent(toggle) {
          switch (toggle.node.name) {
            case TOGGLE_EQUAL_TO_FRAME:
              this.toggleToEqualToFrame();
              break;
            case TOGGLE_PROPORTIONAL_TO_FRAME:
              this.toggleToProportionalToFrame();
              break;
            default:
              this.toggleToEqualToFrame();
              break;
          }
        };
        _proto.toggleToProportionalToFrame = function toggleToProportionalToFrame() {
          var resolutionPolicy = view.getResolutionPolicy();
          resolutionPolicy.setContainerStrategy(ResolutionPolicy.ContainerStrategy.PROPORTION_TO_FRAME);
          view.setResolutionPolicy(resolutionPolicy);
        };
        _proto.toggleToEqualToFrame = function toggleToEqualToFrame() {
          var resolutionPolicy = view.getResolutionPolicy();
          resolutionPolicy.setContainerStrategy(ResolutionPolicy.ContainerStrategy.EQUAL_TO_FRAME);
          view.setResolutionPolicy(resolutionPolicy);
        };
        return ContainerStragety;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "noSupoortTip", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/coordinate-ui-3d.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Node, Camera, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      Camera = module.Camera;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "78245HzqEFHMruIc9YDEFAZ", "coordinate-ui-3d", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var _v3_0 = new Vec3();
      var CoordinateUI3D = exports('CoordinateUI3D', (_dec = ccclass("CoordinateUI3D"), _dec2 = menu("UI/CoordinateUI3D"), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Camera
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CoordinateUI3D, _Component);
        function CoordinateUI3D() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "D3Node", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "UINode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mainCamera", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = CoordinateUI3D.prototype;
        _proto.lateUpdate = function lateUpdate(deltaTime) {
          this.D3Node.getWorldPosition(_v3_0);
          this.mainCamera.convertToUINode(_v3_0, this.UINode.parent, _v3_0);
          this.UINode.setPosition(_v3_0);
        };
        return CoordinateUI3D;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "D3Node", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "UINode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mainCamera", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/coordinate-ui-local-local.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, Label, Node, Vec3, UITransform, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Label = module.Label;
      Node = module.Node;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "11114hQBC1PGK1Ap1XNGEjC", "coordinate-ui-local-local", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var ConvertType = /*#__PURE__*/function (ConvertType) {
        ConvertType[ConvertType["LOCAL"] = 0] = "LOCAL";
        ConvertType[ConvertType["WORLD"] = 1] = "WORLD";
        return ConvertType;
      }(ConvertType || {});
      Enum(ConvertType);
      var CoordinateUILocalLocal = exports('CoordinateUILocalLocal', (_dec = ccclass("CoordinateUILocalLocal"), _dec2 = menu('UI/CoordinateUILocalLocal'), _dec3 = property({
        type: ConvertType
      }), _dec4 = property(Label), _dec5 = property(Node), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CoordinateUILocalLocal, _Component);
        function CoordinateUILocalLocal() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "convertType", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "showLabel", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "aim", _descriptor3, _assertThisInitialized(_this));
          _this._time = 0;
          _this._transform = null;
          _this._aimTransform = null;
          _this._out = new Vec3();
          _this._fixPoint = new Vec3(100, 100, 0);
          return _this;
        }
        var _proto = CoordinateUILocalLocal.prototype;
        _proto.start = function start() {
          this._transform = this.getComponent(UITransform);
          this._aimTransform = this.aim.getComponent(UITransform);
        };
        _proto.update = function update(deltaTime) {
          var pos = this.node.position;
          if (this._time >= 0.2) {
            if (pos.x > 200) {
              this.node.setPosition(-200, pos.y, pos.z);
            } else {
              this.node.setPosition(pos.x + 5, pos.y, pos.z);
            }
            this._time = 0;
          }
          this._time += deltaTime;
          if (this.convertType === ConvertType.LOCAL) {
            pos = this.node.worldPosition;
            this._aimTransform.convertToNodeSpaceAR(pos, this._out);
            this.showLabel.string = "\u91D1\u5E01\u4F4D\u7F6E\u4E0E\u4E0B\u65B9\u56FE\u6807\u4F4D\u7F6E\u8DDD\u79BB 5 \u7684\u500D\u6570\uFF1A" + this._out.toString();
          } else {
            this._transform.convertToWorldSpaceAR(this._fixPoint, this._out);
            this.showLabel.string = "\u521D\u59CB\u4E0E\u91D1\u5E01 x \u8F74\u76F8\u8DDD 100 \u7684\u70B9\u7684\u4E16\u754C\u5750\u6807\n\u5B9E\u9645\u89C2\u5BDF\u6BCF\u6B21\u5750\u6807 x \u8F74\u5DEE\u503C\u4E3A 5\uFF1A" + this._out.toString();
          }
        };
        return CoordinateUILocalLocal;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "convertType", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ConvertType.LOCAL;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "aim", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoreJsTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ui-log.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, UILog;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      UILog = module.UILog;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "c743e/HL69CAqH8vec3N4x9", "CoreJsTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var CoreJsTest = exports('CoreJsTest', (_dec = ccclass('CoreJsTest'), _dec2 = menu('TestCases/Scripting/LanguageFeature/CoreJsTest'), _dec3 = property(UILog), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CoreJsTest, _Component);
        function CoreJsTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "logPanel", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = CoreJsTest.prototype;
        _proto.start = function start() {
          this.logPanel.addLabel("\u6D4B\u8BD5\u5F00\u59CB...\n---------------------------------------");
          this._runTests();
          this.logPanel.addLabel("---------------------------------------\n\u6D4B\u8BD5\u7ED3\u675F\uFF01");
        };
        _proto._runTests = function _runTests() {
          var asserts = this._asserts.bind(this);
          asserts(shouldBeDefined(globalThis));
          // asserts(shouldBeDefined(globalThis.what));

          function shouldBeDefined(value) {
            return typeof value !== 'undefined';
          }
        };
        _proto._asserts = function _asserts(expr) {
          if (!expr) {
            this.logPanel.addLabel("\u2716 \u6D4B\u8BD5\u5931\u8D25\uFF01");
          }
        };
        return CoreJsTest;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "logPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/deprecated-testing.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Animation, AnimationClip, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      AnimationClip = module.AnimationClip;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "cc4f9IgmW9NVpqXTd8nWoW4", "deprecated-testing", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DeprecatedTesting = exports('DeprecatedTesting', (_dec = ccclass("deprecated-testing"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DeprecatedTesting, _Component);
        function DeprecatedTesting() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = DeprecatedTesting.prototype;
        _proto.start = function start() {
          var anim = this.node.addComponent(Animation);
          var clip = new AnimationClip('DD');
          // API 更名
          anim.addClip(clip);
          // API 更名 + 参数不兼容
          anim.removeClip(clip);
          // 静态成员函数更名
          // @ts-ignore
          Vec3['sub'];
        };
        return DeprecatedTesting;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DirectorAfterDrawTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, director, Director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
      Director = module.Director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "aedb31VK95A75+6N1SPbqeZ", "DirectorAfterDrawTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DirectorAfterDrawTest = exports('DirectorAfterDrawTest', (_dec = ccclass('DirectorAfterDrawTest'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DirectorAfterDrawTest, _Component);
        function DirectorAfterDrawTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "testNode2D", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "testNode3D", _descriptor2, _assertThisInitialized(_this));
          _this._tested = false;
          return _this;
        }
        var _proto = DirectorAfterDrawTest.prototype;
        _proto.start = function start() {
          var _this2 = this;
          this.scheduleOnce(function () {
            director.on(Director.EVENT_AFTER_DRAW, _this2.doTest, _this2);
          }, 1);
        };
        _proto.doTest = function doTest() {
          if (!this._tested) {
            var _this$testNode2D, _this$testNode3D;
            this._tested = true;
            (_this$testNode2D = this.testNode2D) == null || _this$testNode2D.setPosition(150, 0, 0);
            (_this$testNode3D = this.testNode3D) == null || _this$testNode3D.setPosition(10, 0, 0);
            director.off(Director.EVENT_AFTER_DRAW, this.doTest, this);
          }
        };
        return DirectorAfterDrawTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "testNode2D", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "testNode3D", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dont-be-swallowed.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "7ee99ZZpLNFN4UfnaBPewFC", "dont-be-swallowed", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = PointerSwallow
       * DateTime = Thu Nov 04 2021 17:02:41 GMT+0800 (中国标准时间)
       * Author = unbrella_man
       * FileBasename = pointer-swallow.ts
       * FileBasenameNoExtension = pointer-swallow
       * URL = db://assets/cases/event/system-event/pointer-swallow.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var DontBeSwallowed = exports('DontBeSwallowed', (_dec = ccclass('DontBeSwallowed'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DontBeSwallowed, _Component);
        function DontBeSwallowed() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = DontBeSwallowed.prototype;
        _proto.onLoad = function onLoad() {
          this.node.on(Node.EventType.MOUSE_DOWN, this.dontBeSwallowed, this);
          this.node.on(Node.EventType.MOUSE_MOVE, this.dontBeSwallowed, this);
          this.node.on(Node.EventType.MOUSE_UP, this.dontBeSwallowed, this);
          this.node.on(Node.EventType.MOUSE_WHEEL, this.dontBeSwallowed, this);
          this.node.on(Node.EventType.TOUCH_START, this.dontBeSwallowed, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.dontBeSwallowed, this);
          this.node.on(Node.EventType.TOUCH_END, this.dontBeSwallowed, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.dontBeSwallowed, this);
        };
        _proto.onDestroy = function onDestroy() {
          this.node.off(Node.EventType.MOUSE_DOWN, this.dontBeSwallowed, this);
          this.node.off(Node.EventType.MOUSE_MOVE, this.dontBeSwallowed, this);
          this.node.off(Node.EventType.MOUSE_UP, this.dontBeSwallowed, this);
          this.node.off(Node.EventType.MOUSE_WHEEL, this.dontBeSwallowed, this);
          this.node.off(Node.EventType.TOUCH_START, this.dontBeSwallowed, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this.dontBeSwallowed, this);
          this.node.off(Node.EventType.TOUCH_END, this.dontBeSwallowed, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this.dontBeSwallowed, this);
        };
        _proto.dontBeSwallowed = function dontBeSwallowed(event) {
          event.preventSwallow = true;
        };
        return DontBeSwallowed;
      }(Component)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragonBonesAttach.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, dragonBones, Prefab, Label, Color, Node, instantiate, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dragonBones = module.dragonBones;
      Prefab = module.Prefab;
      Label = module.Label;
      Color = module.Color;
      Node = module.Node;
      instantiate = module.instantiate;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class2, _class3, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
      cclegacy._RF.push({}, "f0494pzVKJIkrGKPQXf09Qb", "DragonBonesAttach", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var _class = exports('default', (_dec = ccclass('DragonBonesAttach'), _dec2 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Label
      }), _dec(_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(_class3, _Component);
        function _class3() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeleton", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "targetPrefab", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "modeLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "redBoneName", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "greenBoneName", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "blueBoneName", _descriptor6, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = _class3.prototype;
        _proto.generateAllNodes = function generateAllNodes() {
          this.destroyAllNodes();
          var red = this.createSocket(this.redBoneName, new Color(255, 0, 0));
          var green = this.createSocket(this.greenBoneName, new Color(0, 255, 0));
          var blue = this.createSocket(this.blueBoneName, new Color(0, 0, 255));
          this.skeleton.sockets = [red, green, blue];
        };
        _proto.destroyUnusual = function destroyUnusual() {
          this.destroyAllNodes();
        };
        _proto.destroyAllNodes = function destroyAllNodes() {
          var sockets = this.skeleton.sockets;
          for (var _iterator = _createForOfIteratorHelperLoose(sockets), _step; !(_step = _iterator()).done;) {
            var s = _step.value;
            s.target.removeFromParent();
          }
          this.skeleton.sockets = [];
        };
        _proto.generateSomeNodes = function generateSomeNodes() {
          var _this2 = this;
          var sockets = this.skeleton.sockets;
          var greens = sockets.filter(function (x) {
            var _x$target;
            return ((_x$target = x.target) == null ? void 0 : _x$target.name) == _this2.greenBoneName;
          });
          if (greens.length === 0) {
            var green = this.createSocket(this.greenBoneName, new Color(0, 255, 0));
            sockets.push(green);
            this.skeleton.sockets = sockets;
          }
        };
        _proto.destroySomeNodes = function destroySomeNodes() {
          var sockets = this.skeleton.sockets;
          for (var l = sockets.length - 1; l >= 0; l--) {
            if (sockets[l].target.name === this.greenBoneName) {
              var s = sockets.splice(l, 1);
              s[0].target.removeFromParent();
              this.skeleton.sockets = sockets;
              break;
            }
          }
        };
        _proto.changeMode = function changeMode() {
          var isCached = this.skeleton.isAnimationCached();
          if (isCached) {
            this.skeleton.setAnimationCacheMode(dragonBones.ArmatureDisplay.AnimationCacheMode.REALTIME);
            this.modeLabel.string = "cache";
          } else {
            this.skeleton.setAnimationCacheMode(dragonBones.ArmatureDisplay.AnimationCacheMode.SHARED_CACHE);
            this.modeLabel.string = "realtime";
          }
        };
        _proto.createSocket = function createSocket(name, color) {
          var dbNode = new dragonBones.DragonBoneSocket();
          dbNode.path = this.skeleton.querySocketPathByName(name)[0];
          var targetNode = new Node();
          targetNode.parent = this.node;
          targetNode.name = name;
          dbNode.target = targetNode;
          var child = instantiate(this.targetPrefab);
          child.parent = targetNode;
          var sp = child.getComponent(Sprite);
          sp.color = color;
          return dbNode;
        };
        return _class3;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class3.prototype, "skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class3.prototype, "targetPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "modeLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, "redBoneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "toujiaoR";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class3.prototype, "greenBoneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "shouL";
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class3.prototype, "blueBoneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "bone24";
        }
      })), _class3)) || _class2));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragonBonesCollider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, PhysicsSystem2D, Contact2DType, EPhysics2DDrawFlags, Sprite, Color, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      PhysicsSystem2D = module.PhysicsSystem2D;
      Contact2DType = module.Contact2DType;
      EPhysics2DDrawFlags = module.EPhysics2DDrawFlags;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "18a59OM3shCs5K8L9hCo3rK", "DragonBonesCollider", undefined);
      var ccclass = _decorator.ccclass;
      var DragonBonesCollider = exports('DragonBonesCollider', (_dec = ccclass('DragonBonesCollider'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DragonBonesCollider, _Component);
        function DragonBonesCollider() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.touchingCountMap = new Map();
          _this.debugDrawFlags = 0;
          return _this;
        }
        var _proto = DragonBonesCollider.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          PhysicsSystem2D.instance.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);
          PhysicsSystem2D.instance.on(Contact2DType.END_CONTACT, this.onEndContact, this);
          this.debugDrawFlags = PhysicsSystem2D.instance.debugDrawFlags;
        };
        _proto.onEnable = function onEnable() {
          PhysicsSystem2D.instance.debugDrawFlags = this.debugDrawFlags | EPhysics2DDrawFlags.Shape;
        };
        _proto.onDisable = function onDisable() {
          PhysicsSystem2D.instance.debugDrawFlags = this.debugDrawFlags;
        };
        _proto.addContact = function addContact(c) {
          var count = this.touchingCountMap.get(c.node) || 0;
          this.touchingCountMap.set(c.node, ++count);
          var sprite = c.getComponent(Sprite);
          if (sprite) {
            sprite.color = Color.RED;
          }
        };
        _proto.removeContact = function removeContact(c) {
          var count = this.touchingCountMap.get(c.node) || 0;
          --count;
          if (count <= 0) {
            this.touchingCountMap["delete"](c.node);
            var sprite = c.getComponent(Sprite);
            if (sprite) {
              sprite.color = Color.WHITE;
            }
          } else {
            this.touchingCountMap.set(c.node, count);
          }
        };
        _proto.onBeginContact = function onBeginContact(a, b) {
          this.addContact(a);
          this.addContact(b);
        };
        _proto.onEndContact = function onEndContact(a, b) {
          this.removeContact(a);
          this.removeContact(b);
        };
        return DragonBonesCollider;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragonBonesCtrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, dragonBones, Node, macro, director, Vec3, input, Input, KeyCode, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dragonBones = module.dragonBones;
      Node = module.Node;
      macro = module.macro;
      director = module.director;
      Vec3 = module.Vec3;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class3, _class4, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "2323bz+GgZJZ5mpHSfuf3kv", "DragonBonesCtrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        requireComponent = _decorator.requireComponent;
      var NORMAL_ANIMATION_GROUP = "normal";
      var AIM_ANIMATION_GROUP = "aim";
      var ATTACK_ANIMATION_GROUP = "attack";
      var JUMP_SPEED = -20;
      var NORMALIZE_MOVE_SPEED = 3.6;
      var MAX_MOVE_SPEED_FRONT = NORMALIZE_MOVE_SPEED * 1.4;
      var MAX_MOVE_SPEED_BACK = NORMALIZE_MOVE_SPEED * 1.0;
      var WEAPON_R_LIST = ["weapon_1502b_r", "weapon_1005", "weapon_1005b", "weapon_1005c", "weapon_1005d", "weapon_1005e"];
      var WEAPON_L_LIST = ["weapon_1502b_l", "weapon_1005", "weapon_1005b", "weapon_1005c", "weapon_1005d", "weapon_1005e"];
      var SKINS = ["mecha_1502b", "skin_a", "skin_b", "skin_c"];
      var GROUND = -200;
      var G = -0.6;
      var DragonBonesCtrl = exports('default', (_dec2 = ccclass('DragonBonesCtrl'), _dec3 = requireComponent(dragonBones.ArmatureDisplay), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Node
      }), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: Node
      }), _dec9 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec10 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec2(_class3 = _dec3(_class3 = (_class4 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DragonBonesCtrl, _Component);
        function DragonBonesCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "touchHandler", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "upButton", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "downButton", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "leftButton", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rightButton", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "weaponArmature", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "skinArmature", _descriptor7, _assertThisInitialized(_this));
          _this._bullets = [];
          _this._left = false;
          _this._right = false;
          _this._isJumpingA = false;
          _this._isJumpingB = false;
          _this._isSquating = false;
          _this._isAttackingA = false;
          _this._isAttackingB = false;
          _this._weaponRIndex = 0;
          _this._weaponLIndex = 0;
          _this._skinIndex = 0;
          _this._faceDir = 1;
          _this._aimDir = 0;
          _this._moveDir = 0;
          _this._aimRadian = 0;
          _this._speedX = 0;
          _this._speedY = 0;
          _this._armature = null;
          _this._armatureDisplay = null;
          _this._weaponR = null;
          _this._weaponL = null;
          _this._aimState = null;
          _this._walkState = null;
          _this._attackState = null;
          _this._target = new Vec3(0, 0, 0);
          _this._mouseDown_ = false;
          return _this;
        }
        var _proto2 = DragonBonesCtrl.prototype;
        // use this for initialization
        _proto2.onLoad = function onLoad() {
          var _this2 = this;
          this._armatureDisplay = this.getComponent(dragonBones.ArmatureDisplay);
          this._armature = this._armatureDisplay.armature();
          this._armatureDisplay.addEventListener(dragonBones.EventObject.FADE_IN_COMPLETE, this._animationEventHandler, this);
          this._armatureDisplay.addEventListener(dragonBones.EventObject.FADE_OUT_COMPLETE, this._animationEventHandler, this);
          this._armatureDisplay.addEventListener(dragonBones.EventObject.COMPLETE, this._animationEventHandler, this);
          this._weaponR = this._armature.getSlot('weapon_r').childArmature;
          this._weaponL = this._armature.getSlot('weapon_l').childArmature;
          this._weaponR.addEventListener(dragonBones.EventObject.FRAME_EVENT, this._frameEventHandler, this);
          this._weaponL.addEventListener(dragonBones.EventObject.FRAME_EVENT, this._frameEventHandler, this);

          // load all skin data
          for (var i = 1; i < SKINS.length; i++) {
            this.skinArmature.armatureName = SKINS[i];
          }
          for (var _i = 1; _i < WEAPON_R_LIST.length; _i++) {
            this.weaponArmature.armatureName = WEAPON_R_LIST[_i];
          }
          this._updateAnimation();
          if (this.touchHandler) {
            // touch event
            this.touchHandler.on(Node.EventType.TOUCH_START, function (event) {
              _this2._mouseDown_ = true;
              var touchLoc = event.getUILocation();
              _this2.aim(touchLoc.x, touchLoc.y);
              _this2.attack(true);
            }, this);
            this.touchHandler.on(Node.EventType.TOUCH_END, function (event) {
              _this2._mouseDown_ = false;
              _this2.attack(false);
            }, this);
            this.touchHandler.on(Node.EventType.TOUCH_MOVE, function (event) {
              var touchLoc = event.getUILocation();
              _this2.aim(touchLoc.x, touchLoc.y);
            }, this);
          }
          if (this.upButton) {
            this.upButton.on(Node.EventType.TOUCH_START, function (event) {
              _this2.jump();
            }, this);
          }
          if (this.downButton) {
            this.downButton.on(Node.EventType.TOUCH_START, function (event) {
              _this2.squat(true);
            }, this);
            this.downButton.on(Node.EventType.TOUCH_END, function (event) {
              _this2.squat(false);
            }, this);
            this.downButton.on(Node.EventType.TOUCH_CANCEL, function (event) {
              _this2.squat(false);
            }, this);
          }
          if (this.leftButton) {
            this.leftButton.on(Node.EventType.TOUCH_START, function (event) {
              _this2._left = true;
              _this2._updateMove(-1);
            }, this);
            this.leftButton.on(Node.EventType.TOUCH_END, function (event) {
              _this2._left = false;
              _this2._updateMove(-1);
            }, this);
            this.leftButton.on(Node.EventType.TOUCH_CANCEL, function (event) {
              _this2._left = false;
              _this2._updateMove(-1);
            }, this);
          }
          if (this.rightButton) {
            this.rightButton.on(Node.EventType.TOUCH_START, function (event) {
              _this2._right = true;
              _this2._updateMove(1);
            }, this);
            this.rightButton.on(Node.EventType.TOUCH_END, function (event) {
              _this2._right = false;
              _this2._updateMove(1);
            }, this);
            this.rightButton.on(Node.EventType.TOUCH_CANCEL, function (event) {
              _this2._right = false;
              _this2._updateMove(1);
            }, this);
          }

          // keyboard events
          input.on(Input.EventType.KEY_DOWN, function (event) {
            _this2._keyHandler(event.keyCode, true);
          }, this);
          input.on(Input.EventType.KEY_UP, function (event) {
            _this2._keyHandler(event.keyCode, false);
          }, this);
        };
        _proto2._keyHandler = function _keyHandler(keyCode, isDown) {
          switch (keyCode) {
            case KeyCode.KEY_A:
            case KeyCode.ARROW_LEFT:
              this._left = isDown;
              this._updateMove(-1);
              break;
            case KeyCode.KEY_D:
            case KeyCode.ARROW_RIGHT:
              this._right = isDown;
              this._updateMove(1);
              break;
            case KeyCode.KEY_W:
            case KeyCode.ARROW_UP:
              if (isDown) {
                this.jump();
              }
              break;
            case KeyCode.KEY_S:
            case KeyCode.ARROW_DOWN:
              this.squat(isDown);
              break;
            case KeyCode.KEY_Q:
              if (isDown) {
                this.switchWeaponR();
              }
              break;
            case KeyCode.KEY_E:
              if (isDown) {
                this.switchWeaponL();
              }
              break;
            case KeyCode.SPACE:
              if (isDown) {
                this.switchWeaponR();
                this.switchWeaponL();
              }
              break;
            default:
              return;
          }
        };
        _proto2._updateMove = function _updateMove(dir) {
          if (this._left && this._right) {
            this.move(dir);
          } else if (this._left) {
            this.move(-1);
          } else if (this._right) {
            this.move(1);
          } else {
            this.move(0);
          }
        };
        _proto2.move = function move(dir) {
          if (this._moveDir === dir) {
            return;
          }
          this._moveDir = dir;
          this._updateAnimation();
        };
        _proto2.jump = function jump() {
          if (this._isJumpingA) {
            return;
          }
          this._isJumpingA = true;
          this._armature.animation.fadeIn("jump_1", -1, -1, 0, NORMAL_ANIMATION_GROUP);
          this._walkState = null;
        };
        _proto2.squat = function squat(isSquating) {
          if (this._isSquating === isSquating) {
            return;
          }
          this._isSquating = isSquating;
          this._updateAnimation();
        };
        _proto2.attack = function attack(isAttacking) {
          if (this._isAttackingA == isAttacking) {
            return;
          }
          this._isAttackingA = isAttacking;
        };
        _proto2.switchWeaponL = function switchWeaponL() {
          this._weaponL.removeEventListener(dragonBones.EventObject.FRAME_EVENT, this._frameEventHandler, this);
          this._weaponLIndex++;
          if (this._weaponLIndex >= WEAPON_L_LIST.length) {
            this._weaponLIndex = 0;
          }
          var newWeaponName = WEAPON_L_LIST[this._weaponLIndex];
          var factory = dragonBones.CCFactory.getInstance();
          this._weaponL = factory.buildArmature(newWeaponName);
          this._armature.getSlot('weapon_l').childArmature = this._weaponL;
          this._weaponL.addEventListener(dragonBones.EventObject.FRAME_EVENT, this._frameEventHandler, this);
        };
        _proto2.switchWeaponR = function switchWeaponR() {
          this._weaponR.removeEventListener(dragonBones.EventObject.FRAME_EVENT, this._frameEventHandler, this);
          this._weaponRIndex++;
          if (this._weaponRIndex >= WEAPON_R_LIST.length) {
            this._weaponRIndex = 0;
          }
          var newWeaponName = WEAPON_R_LIST[this._weaponRIndex];
          var factory = dragonBones.CCFactory.getInstance();
          this._weaponR = factory.buildArmature(newWeaponName);
          this._armature.getSlot('weapon_r').childArmature = this._weaponR;
          this._weaponR.addEventListener(dragonBones.EventObject.FRAME_EVENT, this._frameEventHandler, this);
        };
        _proto2.switchSkin = function switchSkin() {
          this._skinIndex++;
          if (this._skinIndex >= SKINS.length) {
            this._skinIndex = 0;
          }
          var skinName = SKINS[this._skinIndex];
          var factory = dragonBones.CCFactory.getInstance();
          var skinData = factory.getArmatureData(skinName).defaultSkin;
          factory.replaceSkin(this._armatureDisplay.armature(), skinData, false, ["weapon_l", "weapon_r"]);
        };
        _proto2.aim = function aim(x, y) {
          if (this._aimDir === 0) {
            this._aimDir = 10;
          }
          var t = this._target = this.node.parent._uiProps.uiTransformComp.convertToNodeSpaceAR(new Vec3(x, y, 0));
        };
        _proto2.update = function update(dt) {
          this._updatePosition();
          this._updateAim();
          this._updateAttack();
          this._enterFrameHandler(dt);
        };
        _proto2.onDisable = function onDisable() {
          // clean the bullets
          for (var i = this._bullets.length - 1; i >= 0; i--) {
            var bullet = this._bullets[i];
            bullet.enabled = false;
          }
          this._bullets = [];
        };
        _proto2.addBullet = function addBullet(bullet) {
          this._bullets.push(bullet);
        };
        _proto2._enterFrameHandler = function _enterFrameHandler(dt) {
          for (var i = this._bullets.length - 1; i >= 0; i--) {
            var bullet = this._bullets[i];
            if (bullet.update()) {
              this._bullets.splice(i, 1);
            }
          }
        };
        _proto2._animationEventHandler = function _animationEventHandler(event) {
          if (event.type === dragonBones.EventObject.FADE_IN_COMPLETE) {
            if (event.animationState.name === "jump_1") {
              this._isJumpingB = true;
              this._speedY = -JUMP_SPEED;
              if (this._moveDir != 0) {
                if (this._moveDir * this._faceDir > 0) {
                  this._speedX = MAX_MOVE_SPEED_FRONT * this._faceDir;
                } else {
                  this._speedX = -MAX_MOVE_SPEED_BACK * this._faceDir;
                }
              }
              this._armature.animation.fadeIn("jump_2", -1, -1, 0, NORMAL_ANIMATION_GROUP).resetToPose = false;
            } else if (event.animationState.name === "jump_4") {
              this._updateAnimation();
            }
          } else if (event.type === dragonBones.EventObject.FADE_OUT_COMPLETE) {
            if (event.animationState.name === "attack_01") {
              this._isAttackingB = false;
              this._attackState = null;
            }
          } else if (event.type === dragonBones.EventObject.COMPLETE) {
            if (event.animationState.name === "jump_4") {
              this._isJumpingA = false;
              this._isJumpingB = false;
              this._updateAnimation();
            }
          }
        };
        _proto2._frameEventHandler = function _frameEventHandler(event, bone, armature) {
          if (event.name === "fire") {
            // var firePointBone = event.armature.getBone("firePoint");
            var localPoint = new Vec3(event.bone.global.x, event.bone.global.y, 0);
            var display = event.armature.display;
            var globalPoint = display.node.convertToWorldSpace(localPoint);
            this._fire(globalPoint);
          }
        };
        _proto2._fire = function _fire(firePoint) {
          firePoint.x += Math.random() * 2 - 1;
          firePoint.y += Math.random() * 2 - 1;
          firePoint.z = 0;
          var armature = this._armatureDisplay.buildArmature("bullet_01");
          var effect = this._armatureDisplay.buildArmature("fire_effect_01");
          var radian = this._faceDir < 0 ? Math.PI - this._aimRadian : this._aimRadian;
          var bullet = new DragonBullet();
          bullet.init(this.node.parent, armature, effect, radian + Math.random() * 0.02 - 0.01, 40, firePoint);
          this.addBullet(bullet);
        };
        _proto2._updateAnimation = function _updateAnimation() {
          if (this._isJumpingA) {
            return;
          }
          if (this._isSquating) {
            this._speedX = 0;
            this._armature.animation.fadeIn("squat", -1, -1, 0, NORMAL_ANIMATION_GROUP).resetToPose = false;
            this._walkState = null;
            return;
          }
          if (this._moveDir === 0) {
            this._speedX = 0;
            this._armature.animation.fadeIn("idle", -1, -1, 0, NORMAL_ANIMATION_GROUP).resetToPose = false;
            this._walkState = null;
          } else {
            if (!this._walkState) {
              this._walkState = this._armature.animation.fadeIn("walk", -1, -1, 0, NORMAL_ANIMATION_GROUP);
              this._walkState.resetToPose = false;
            }
            if (this._moveDir * this._faceDir > 0) {
              this._walkState.timeScale = MAX_MOVE_SPEED_FRONT / NORMALIZE_MOVE_SPEED;
            } else {
              this._walkState.timeScale = -MAX_MOVE_SPEED_BACK / NORMALIZE_MOVE_SPEED;
            }
            if (this._moveDir * this._faceDir > 0) {
              this._speedX = MAX_MOVE_SPEED_FRONT * this._faceDir;
            } else {
              this._speedX = -MAX_MOVE_SPEED_BACK * this._faceDir;
            }
          }
        };
        _proto2._updatePosition = function _updatePosition() {
          var camera = director.root.batcher2D.getFirstRenderCamera(this.node);
          var pos = this.node.getPosition();
          if (this._speedX !== 0) {
            pos.x += this._speedX;
            var minX = -camera.width / 2;
            var maxX = camera.width / 2;
            if (pos.x < minX) {
              pos.x = minX;
            } else if (pos.x > maxX) {
              pos.x = maxX;
            }
            this.node.setPosition(pos);
          }
          if (this._speedY != 0) {
            if (this._speedY > 5 && this._speedY + G <= 5) {
              this._armature.animation.fadeIn("jump_3", -1, -1, 0, NORMAL_ANIMATION_GROUP).resetToPose = false;
            }
            this._speedY += G;
            pos.y += this._speedY;
            if (pos.y < GROUND) {
              pos.y = GROUND;
              this._speedY = 0;
              this._armature.animation.fadeIn("jump_4", -1, -1, 0, NORMAL_ANIMATION_GROUP).resetToPose = false;
            }
            this.node.setPosition(pos);
          }
        };
        _proto2._updateAim = function _updateAim() {
          if (!this._mouseDown_) return;
          if (this._aimDir === 0) {
            return;
          }
          var pos = this.node.getPosition();
          var scale = this.node.getScale();
          this._faceDir = this._target.x > pos.x ? 1 : -1;
          if (scale.x * this._faceDir < 0) {
            scale.x *= -1;
            if (this._moveDir) {
              this._updateAnimation();
            }
            this.node.setScale(scale);
          }
          var aimOffsetY = this._armature.getBone("chest").global.y * scale.y;
          if (this._faceDir > 0) {
            this._aimRadian = Math.atan2(this._target.y - pos.y - aimOffsetY, this._target.x - pos.x);
          } else {
            this._aimRadian = Math.PI - Math.atan2(this._target.y - pos.y - aimOffsetY, this._target.x - pos.x);
            if (this._aimRadian > Math.PI) {
              this._aimRadian -= Math.PI * 2;
            }
          }
          var aimDir = 0;
          if (this._aimRadian > 0) {
            aimDir = 1;
          } else {
            aimDir = -1;
          }
          if (this._aimDir != aimDir) {
            this._aimDir = aimDir;

            // Animation mixing.
            if (this._aimDir >= 0) {
              this._aimState = this._armature.animation.fadeIn("aim_up", -1.0, -1, 0, AIM_ANIMATION_GROUP);
            } else {
              this._aimState = this._armature.animation.fadeIn("aim_down", -1.0, -1, 0, AIM_ANIMATION_GROUP);
            }
            this._aimState.resetToPose = false;
          }
          this._aimState.weight = Math.abs(this._aimRadian / Math.PI * 2);

          //_armature.invalidUpdate("pelvis"); // Only update bone mask.
          this._armature.invalidUpdate();
        };
        _proto2._updateAttack = function _updateAttack() {
          if (!this._isAttackingA || this._isAttackingB) {
            return;
          }
          this._isAttackingB = true;

          // Animation mixing.
          this._attackState = this._armature.animation.fadeIn("attack_01", -1.0, -1, 0, ATTACK_ANIMATION_GROUP, dragonBones.AnimationFadeOutMode.SameGroup);
          this._attackState.resetToPose = false;
          this._attackState.autoFadeOutTime = this._attackState.fadeTotalTime;
        };
        return DragonBonesCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class4.prototype, "touchHandler", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class4.prototype, "upButton", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class4.prototype, "downButton", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class4.prototype, "leftButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class4.prototype, "rightButton", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class4.prototype, "weaponArmature", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class4.prototype, "skinArmature", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class4)) || _class3) || _class3));
      var DragonBullet = exports('DragonBullet', (_dec = ccclass('DragonBullet'), _dec(_class = /*#__PURE__*/function () {
        function DragonBullet() {
          this._speedX = 0;
          this._speedY = 0;
          this._armature = null;
          this._armatureDisplay = null;
          this._effect = null;
        }
        var _proto = DragonBullet.prototype;
        _proto.init = function init(parentNode, armature, effect, radian, speed, position) {
          this._speedX = Math.cos(radian) * speed;
          this._speedY = Math.sin(radian) * speed;
          var thePos = parentNode._uiProps.uiTransformComp.convertToNodeSpaceAR(position);
          armature.playAnimation("idle");
          var armatureNode = armature.node;
          armatureNode.setPosition(thePos);
          armatureNode.angle = radian * macro.DEG;
          this._armature = armature;
          if (effect) {
            this._effect = effect;
            var effectDisplay = this._effect.node;
            effectDisplay.angle = radian * macro.DEG;
            effectDisplay.setPosition(thePos);
            effectDisplay.scaleX = 1 + Math.random() * 1;
            effectDisplay.scaleY = 1 + Math.random() * 0.5;
            if (Math.random() < 0.5) {
              effectDisplay.scaleY *= -1;
            }
            this._effect.playAnimation("idle");
            parentNode.addChild(effectDisplay);
          }
          parentNode.addChild(armatureNode);
        };
        _proto.update = function update() {
          var armatureNode = this._armature.node;
          var pos = armatureNode.getPosition();
          pos.x += this._speedX;
          pos.y += this._speedY;
          armatureNode.setPosition(pos);
          var uiTrans = armatureNode.parent._uiProps.uiTransformComp;
          var worldPos = uiTrans.convertToWorldSpaceAR(armatureNode.getPosition());
          var camera = director.root.batcher2D.getFirstRenderCamera(armatureNode);
          if (worldPos.x < -100 || worldPos.x >= camera.width + 100 || worldPos.y < -100 || worldPos.y >= camera.height + 100) {
            this.doClean();
            return true;
          }
          return false;
        };
        _proto.onDisable = function onDisable() {
          this.doClean();
        };
        _proto.doClean = function doClean() {
          this._armature.node.removeFromParent();
          if (this._effect) {
            this._effect.node.removeFromParent();
          }
        };
        return DragonBullet;
      }()) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DragonBonesMode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Material, dragonBones, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      dragonBones = module.dragonBones;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;
      cclegacy._RF.push({}, "1ec8fGOAJdGnKarDJTeyxnS", "DragonBonesMode", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DragonBonesMode = exports('DragonBonesMode', (_dec = ccclass('DragonBonesMode'), _dec2 = property({
        type: Material
      }), _dec3 = property({
        type: Material
      }), _dec4 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec5 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec6 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DragonBonesMode, _Component);
        function DragonBonesMode() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "grayMaterial", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "normalMaterial", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "db0", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "db1", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "db2", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "batchLabel", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cacheLabel", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "matLabel", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "isGray", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "isBatch", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "isCache", _descriptor11, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = DragonBonesMode.prototype;
        _proto.onGray = function onGray() {
          this.isGray = !this.isGray;
          var label = "gray";
          if (this.isGray) label = "normal";
          this.matLabel.string = label;
          var material = this.grayMaterial;
          if (!this.isGray) {
            material = this.normalMaterial;
          }
          this.db0.setMaterial(material, 0);
          this.db0.markForUpdateRenderData(true);
          this.db1.setMaterial(material, 0);
          this.db1.markForUpdateRenderData(true);
          this.db2.setMaterial(material, 0);
          this.db2.markForUpdateRenderData();
        };
        _proto.onBatch = function onBatch() {
          this.isBatch = !this.isBatch;
          var label = "batch";
          if (this.isBatch) label = "no batch";
          this.batchLabel.string = label;

          // this.db0!.enableBatch = this.isBatch;
          // this.db1!.enableBatch = this.isBatch;
          // this.db2!.enableBatch = this.isBatch;
        };

        _proto.onCache = function onCache() {
          this.isCache = !this.isCache;
          var label = "cache";
          if (this.isCache) label = "no cache";
          this.cacheLabel.string = label;
          var mode = dragonBones.ArmatureDisplay.AnimationCacheMode.SHARED_CACHE;
          if (!this.isCache) mode = dragonBones.ArmatureDisplay.AnimationCacheMode.REALTIME;
          this.db0.setAnimationCacheMode(mode);
          this.db1.setAnimationCacheMode(mode);
          this.db2.setAnimationCacheMode(mode);
        };
        return DragonBonesMode;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "grayMaterial", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "normalMaterial", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "db0", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "db1", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "db2", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "batchLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "cacheLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "matLabel", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "isGray", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "isBatch", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "isCache", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dynamic-mesh.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, CameraComponent, Color, resources, Mesh, gfx, Vec3, director, utils, MeshRenderer, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      CameraComponent = module.CameraComponent;
      Color = module.Color;
      resources = module.resources;
      Mesh = module.Mesh;
      gfx = module.gfx;
      Vec3 = module.Vec3;
      director = module.director;
      utils = module.utils;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "292fbC3zxVJVJ6IQyh/FkOm", "dynamic-mesh", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DynamicMeshCreator = exports('DynamicMeshCreator', (_dec = ccclass('DynamicMeshCreator'), _dec2 = property(Button), _dec3 = property(CameraComponent), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DynamicMeshCreator, _Component);
        function DynamicMeshCreator() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "btnUpdateDynamicMesh", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cameraComp", _descriptor2, _assertThisInitialized(_this));
          _this._mainCamera = null;
          _this._increaseVertexCount = 900;
          _this._subMeshes = [];
          _this._options = null;
          _this._geometries = [];
          _this._dragon = null;
          _this._initialize = false;
          _this._destroyed = false;
          // debug only
          _this._showBoundingBox = false;
          _this._boundingBoxColor = new Color(255, 255, 255, 255);
          _this.isLoadedMesh = false;
          return _this;
        }
        var _proto = DynamicMeshCreator.prototype;
        _proto.initCamera = function initCamera() {
          this._mainCamera = this.cameraComp.camera;
        };
        _proto.initUI = function initUI() {
          this.btnUpdateDynamicMesh.node.on(Button.EventType.CLICK, this.onButtonUpdateDynamicMesh, this);
        };
        _proto.initMesh = function initMesh() {
          var _this2 = this;
          var names = [];
          for (var i = 0; i < 9; i++) {
            var name = "dynamic-mesh/dragon/Object_" + i;
            names.push(name);
          }
          resources.load(names, Mesh, function (err, meshes) {
            var _director$getScene;
            if (_this2._destroyed) {
              _this2.isLoadedMesh = true;
              return;
            }
            if (err) {
              console.log('Load gltf failed, error: ', err);
              _this2.isLoadedMesh = true;
              return;
            }
            var options = {
              maxSubMeshes: 0,
              maxSubMeshVertices: 0,
              maxSubMeshIndices: 0
            };
            for (var index = 0; index < meshes.length; index++) {
              var _mesh = meshes[index];
              var positions = _mesh.readAttribute(0, gfx.AttributeName.ATTR_POSITION);
              var normals = _mesh.readAttribute(0, gfx.AttributeName.ATTR_NORMAL);
              var indices = _mesh.readIndices(0);
              var newPositions = new Float32Array(indices.length * 3);
              var newNormals = new Float32Array(indices.length * 3);
              var minPos = new Vec3(Infinity, Infinity, Infinity);
              var maxPos = new Vec3(-Infinity, -Infinity, -Infinity);
              var newPos = new Vec3();
              for (var _i = 0; _i < indices.length; _i++) {
                var _index = indices[_i];
                for (var k = 0; k < 3; k++) {
                  newPositions[_i * 3 + k] = positions[_index * 3 + k];
                  newNormals[_i * 3 + k] = normals[_index * 3 + k];
                }
                newPos.set(newPositions[_i * 3], newPositions[_i * 3 + 1], newPositions[_i * 3 + 2]);
                Vec3.min(minPos, minPos, newPos);
                Vec3.max(maxPos, maxPos, newPos);
              }
              var subMesh = {
                positions: newPositions,
                normals: newNormals,
                minPos: minPos,
                maxPos: maxPos
              };
              _this2._subMeshes.push(subMesh);
              options.maxSubMeshVertices = Math.max(options.maxSubMeshVertices, newPositions.length / 3);
            }
            options.maxSubMeshes = _this2._subMeshes.length;
            _this2._options = options;
            _this2._dragon = (_director$getScene = director.getScene()) == null ? void 0 : _director$getScene.getChildByName("DynamicDragon");
            for (var _i2 = 0; _i2 < _this2._options.maxSubMeshes; _i2++) {
              var geometry = {
                positions: _this2._subMeshes[_i2].positions,
                normals: _this2._subMeshes[_i2].normals,
                minPos: _this2._subMeshes[_i2].minPos,
                maxPos: _this2._subMeshes[_i2].maxPos
              };
              _this2._geometries.push(geometry);
            }
            var mesh = utils.MeshUtils.createDynamicMesh(0, _this2._geometries[0], undefined, _this2._options);
            for (var _i3 = 1; _i3 < _this2._options.maxSubMeshes; _i3++) {
              mesh.updateSubMesh(_i3, _this2._geometries[_i3]);
            }
            var meshRenderer = _this2._dragon.getComponent(MeshRenderer);
            meshRenderer.mesh = mesh;
            meshRenderer.onGeometryChanged();
            _this2._initialize = true;
            _this2.isLoadedMesh = true;
            console.log("load gltf succes");
          });
        };
        _proto.onButtonUpdateDynamicMesh = function onButtonUpdateDynamicMesh(btn) {
          if (!this._initialize) {
            return;
          }
          var meshRenderer = this._dragon.getComponent(MeshRenderer);
          for (var i = 0; i < this._options.maxSubMeshes; i++) {
            var subMesh = this._subMeshes[i];
            var geometry = this._geometries[i];
            geometry.positions = subMesh.positions.subarray(0, this._increaseVertexCount * 3);
            geometry.normals = subMesh.normals.subarray(0, this._increaseVertexCount * 3);
            meshRenderer.mesh.updateSubMesh(i, geometry);
          }
          meshRenderer.onGeometryChanged();
        };
        _proto.start = function start() {
          this.initCamera();
          this.initUI();
          this.initMesh();
        };
        _proto.onDestroy = function onDestroy() {
          this._destroyed = true;
        };
        _proto.update = function update(deltaTime) {
          if (!this._initialize) {
            return;
          }
          var dirty = false;
          var meshRenderer = this._dragon.getComponent(MeshRenderer);
          for (var i = 0; i < this._options.maxSubMeshes; i++) {
            var subMesh = this._subMeshes[i];
            var geometry = this._geometries[i];
            var leftVertexCount = (subMesh.positions.length - geometry.positions.length) / 3;
            var count = Math.min(this._increaseVertexCount, leftVertexCount);
            if (count > 0) {
              geometry.positions = subMesh.positions.subarray(0, geometry.positions.length + count * 3);
              geometry.normals = subMesh.normals.subarray(0, geometry.normals.length + count * 3);
              meshRenderer.mesh.updateSubMesh(i, geometry);
              dirty = true;
            }
          }
          if (dirty) {
            meshRenderer.onGeometryChanged();
          }
          if (this._showBoundingBox) {
            var _meshRenderer = this._dragon.getComponent(MeshRenderer);
            var worldBound = _meshRenderer.model.worldBounds;
            if (worldBound) {
              var _renderer = this._mainCamera.geometryRenderer;
              _renderer.addBoundingBox(worldBound, this._boundingBoxColor, true, true, false);
            }
          }
        };
        return DynamicMeshCreator;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnUpdateDynamicMesh", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cameraComp", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dynamic-tiled-map.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, loader, TiledMapAsset, TiledMap, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      loader = module.loader;
      TiledMapAsset = module.TiledMapAsset;
      TiledMap = module.TiledMap;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "7b7e1jUf5dIgqilm/MYNV6T", "dynamic-tiled-map", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DynamicTiledMap = exports('DynamicTiledMap', (_dec = ccclass('DynamicTiledMap'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DynamicTiledMap, _Component);
        function DynamicTiledMap() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = DynamicTiledMap.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.onLoadTileMap = function onLoadTileMap(url) {
          var _this2 = this;
          return new Promise(function (resovle, reject) {
            loader.loadRes(url, TiledMapAsset, function (err, tmxAsset) {
              if (err) {
                console.error(err);
                reject("error");
                return;
              }
              _this2.onCreateTileMap(tmxAsset);
              resovle();
            });
          });
        };
        _proto.onCreateTileMap = function onCreateTileMap(tmxAsset) {
          this.targetNode.destroyAllChildren();
          var node = new Node();
          this.targetNode.addChild(node);
          node.layer = this.targetNode.layer;
          var tileMap = node.addComponent(TiledMap);
          tileMap.tmxAsset = tmxAsset;
        };
        _proto.onBtnCreateTileMap = function onBtnCreateTileMap() {
          var url = 'tilemap/tile_iso_offset';
          this.onLoadTileMap(url);
        };
        _proto.onBtnCreateTileMapWithTsx = function onBtnCreateTileMapWithTsx() {
          var url = 'tilemap/tile_iso_offset_with_tsx';
          this.onLoadTileMap(url);
        };
        return DynamicTiledMap;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/editbox-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "a1095F095BAuqFmE8yQddG4", "editbox-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var EditboxCtrl = exports('EditboxCtrl', (_dec = ccclass("EditboxCtrl"), _dec2 = menu('UI/EditboxCtrl'), _dec3 = property(EditBox), _dec4 = property(EditBox), _dec5 = property(EditBox), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EditboxCtrl, _Component);
        function EditboxCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "editBox1", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "editBox2", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "editBox3", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = EditboxCtrl.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.setFocus = function setFocus(event, custom) {
          if (custom === '1') {
            this.editBox1.setFocus();
          } else if (custom === '2') {
            this.editBox2.setFocus();
          } else if (custom === '3') {
            this.editBox3.setFocus();
          }
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return EditboxCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "editBox1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "editBox2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "editBox3", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/editbox-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "dc817Zk5fFIwL416ijXNkBW", "editbox-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var EditboxEvent = exports('EditboxEvent', (_dec = ccclass("EditboxEvent"), _dec2 = menu('UI/EditboxEvent'), _dec3 = property(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EditboxEvent, _Component);
        function EditboxEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "showLabel", _descriptor, _assertThisInitialized(_this));
          _this._isReturn = false;
          return _this;
        }
        var _proto = EditboxEvent.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.editBegan = function editBegan(event, custom) {
          this.showLabel.string = custom;
          this._isReturn = false;
        };
        _proto.editEnd = function editEnd(event, custom) {
          if (this._isReturn) {
            return;
          }
          this.showLabel.string = custom;
        };
        _proto.editReturn = function editReturn(event, custom) {
          this.showLabel.string = custom;
          this._isReturn = true;
        };
        _proto.editInputing = function editInputing(input, event, custom) {
          this.showLabel.string = custom + ": " + input;
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return EditboxEvent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "showLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/event-first.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Label, Button, instantiate, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Label = module.Label;
      Button = module.Button;
      instantiate = module.instantiate;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "9deb3uG0i1DWYBatN5dSscL", "event-first", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var eventFirst = exports('eventFirst', (_dec = ccclass('eventFirst'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Button
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(eventFirst, _Component);
        function eventFirst() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "prefabNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labelShow", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "button", _descriptor3, _assertThisInitialized(_this));
          // @property({
          //     type: Node,
          // })
          _this.item = null;
          return _this;
        }
        var _proto = eventFirst.prototype;
        _proto.onLoad = function onLoad() {
          this.item = instantiate(this.prefabNode);
        };
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.onEnable = function onEnable() {
          this.eventOn();
        };
        _proto.eventOn = function eventOn() {
          this.item.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.item.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.item.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.item.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.onDisable = function onDisable() {
          this.item.off(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.item.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.item.off(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.item.off(Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          this.labelShow.string = "TouchStart: " + event.getLocation();
          console.log("TouchStart: " + event.getLocation());
        };
        _proto.onTouchMove = function onTouchMove(event) {
          this.labelShow.string = "TouchMove: " + event.getLocation();
          console.log("TouchMove: " + event.getLocation());
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          this.labelShow.string = 'TouchEnd';
          console.log('TouchEnd');
        };
        _proto.onTouchCancel = function onTouchCancel(event) {
          this.labelShow.string = 'TouchCancel';
          console.log('TouchCancel');
        };
        _proto.createChild = function createChild() {
          this.node.addChild(this.item);
          this.button.node.active = false;
        };
        return eventFirst;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelShow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/event-info.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, view, input, Input, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      view = module.view;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "b7fbeTedz5DS48dh969Stjm", "event-info", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var EventInfo = exports('EventInfo', (_dec = ccclass("EventInfo"), _dec2 = menu('Event/EventInfo'), _dec3 = property(Label), _dec4 = property(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EventInfo, _Component);
        function EventInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "top", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = EventInfo.prototype;
        _proto.start = function start() {
          this.top.string = "\u5C4F\u5E55\u5C3A\u5BF8: " + view.getCanvasSize() + " \n UI \u5C3A\u5BF8: " + view.getVisibleSize();
          input.on(Input.EventType.TOUCH_START, this._touchStart, this);
          input.on(Input.EventType.TOUCH_MOVE, this._touchMove, this);
          input.on(Input.EventType.TOUCH_END, this._touchEnd, this);
          input.on(Input.EventType.MOUSE_MOVE, this._mouseMove, this);
          input.on(Input.EventType.MOUSE_UP, this._mouseUp, this);
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.TOUCH_START, this._touchStart, this);
          input.off(Input.EventType.TOUCH_MOVE, this._touchMove, this);
          input.off(Input.EventType.TOUCH_END, this._touchEnd, this);
          input.off(Input.EventType.MOUSE_MOVE, this._mouseMove, this);
          input.off(Input.EventType.MOUSE_UP, this._mouseUp, this);
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto._touchStart = function _touchStart(event) {
          var touch = event.touch;
          var content = "touch startLocation:  " + touch.getStartLocation() + " \n";
          content += "UI touch startLocation:  " + touch.getUIStartLocation() + " \n";
          this.label.string = content;
        };
        _proto._touchMove = function _touchMove(event) {
          var touch = event.touch;
          var content = '';
          content += 'touch pre location: ' + touch.getPreviousLocation() + '\n';
          content += 'touch location: ' + touch.getLocation() + '\n';
          content += 'touch delta: ' + touch.getDelta() + '\n';
          content += 'touch location in view: ' + touch.getLocationInView() + '\n';
          content += 'UI touch pre location: ' + touch.getUIPreviousLocation() + '\n';
          content += 'UI touch location: ' + touch.getUILocation() + '\n';
          content += 'UI touch delta: ' + touch.getUIDelta() + '\n';
          this.label.string = content;
        };
        _proto._touchEnd = function _touchEnd() {
          this.label.string = 'End';
        };
        _proto._mouseMove = function _mouseMove(event) {
          var content = '';
          content += 'mouse pre location: ' + event.getPreviousLocation() + '\n';
          content += 'mouse location: ' + event.getLocation() + '\n';
          content += 'mouse delta: ' + event.getDelta() + '\n';
          content += 'mouse location in view: ' + event.getLocationInView() + '\n';
          content += 'UI mouse pre location: ' + event.getUIPreviousLocation() + '\n';
          content += 'UI mouse location: ' + event.getUILocation() + '\n';
          content += 'UI mouse delta: ' + event.getUIDelta() + '\n';
          this.label.string = content;
        };
        _proto._mouseUp = function _mouseUp() {
          this.label.string = 'End';
        };
        return EventInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "top", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/event-order.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, input, Input, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "34e90MJcuREFp8JkACM4iY+", "event-order", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = event_order
       * DateTime = Wed Jan 12 2022 16:55:04 GMT+0800 (中国标准时间)
       * Author = unbrella_man
       * FileBasename = event-order.ts
       * FileBasenameNoExtension = event-order
       * URL = db://assets/cases/event/system-event/event-order.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var event_order = exports('event_order', (_dec = ccclass('event_order'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(event_order, _Component);
        function event_order() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "btn1", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btn2", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "tip", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = event_order.prototype;
        _proto.onEnable = function onEnable() {
          this.btn1.on(Node.EventType.TOUCH_START, this.touchBtn1, this);
          this.btn2.on(Node.EventType.TOUCH_START, this.touchBtn2, this);
          input.on(Input.EventType.TOUCH_START, this.inputTouch, this);
        };
        _proto.onDisable = function onDisable() {
          this.btn1.off(Node.EventType.TOUCH_START, this.touchBtn1, this);
          this.btn2.off(Node.EventType.TOUCH_START, this.touchBtn2, this);
          input.off(Input.EventType.TOUCH_START, this.inputTouch, this);
        };
        _proto.inputTouch = function inputTouch() {
          this.tip.string = '全局触摸事件';
        };
        _proto.touchBtn1 = function touchBtn1() {
          this.btn2.active = true;
          this.tip.string = '绿色节点事件';
        };
        _proto.touchBtn2 = function touchBtn2() {
          this.tip.string = '红色节点事件';
        };
        return event_order;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btn1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btn2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tip", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/decorator.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/extension-detection.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, gfx, error, director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      gfx = module.gfx;
      error = module.error;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "69edbvI+KVFQJEDKsfPvq75", "extension-detection", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ExtensionDetection = exports('ExtensionDetection', (_dec = ccclass('ExtensionDetection'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ExtensionDetection, _Component);
        function ExtensionDetection() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "feature", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "tips", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ExtensionDetection.prototype;
        _proto.start = function start() {
          var label = this.node.getComponent(Label);
          if (!this.feature.length || !label) {
            return;
          }
          var featureNames = Object.keys(gfx.Feature);
          var str = this.feature.toUpperCase();
          if (!featureNames.includes(str)) {
            error("Type error of GFXFeature");
            return;
          }
          var featureName = str;
          if (!director.root.device.hasFeature(gfx.Feature[featureName])) {
            label.string = "GFX feature '" + this.feature + "' is not supported on this device,\n" + this.tips;
          }
        };
        return ExtensionDetection;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "feature", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tips", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fill-sprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;
      cclegacy._RF.push({}, "44cd8itOoFJP6edfxYpJg8o", "fill-sprite", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FillSprite = exports('FillSprite', (_dec = ccclass("FillSprite"), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Sprite
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Sprite
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Sprite
      }), _dec8 = property({
        type: Label
      }), _dec9 = property({
        type: Sprite
      }), _dec10 = property({
        type: Label
      }), _dec11 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FillSprite, _Component);
        function FillSprite() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "hlabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "hhorizontal", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "vlabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "vhorizontal", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mclabel", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mc", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "lblabel", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "lb", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rblabel", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rb", _descriptor10, _assertThisInitialized(_this));
          _this.timer = 0;
          _this.lTimer = 0;
          _this.rTimer = 0.2;
          return _this;
        }
        var _proto = FillSprite.prototype;
        _proto.vh = function vh(num) {
          this.vhorizontal.getComponent(Sprite).fillRange = num;
          this.hhorizontal.getComponent(Sprite).fillRange = num;
          this.mc.getComponent(Sprite).fillRange = num;
        };
        _proto.update = function update(deltaTime) {
          this.timer += 0.1 * deltaTime;
          if (this.timer > 1) {
            this.timer = 0;
          }
          this.lTimer += 0.1 * deltaTime;
          if (this.lTimer > 0.3) {
            this.lTimer = 0;
          }
          this.rTimer += 0.1 * deltaTime;
          if (this.rTimer > 0.5) {
            this.rTimer = 0.2;
          }
          this.vh(this.timer);
          this.lb.getComponent(Sprite).fillRange = this.lTimer;
          this.rb.getComponent(Sprite).fillRange = this.rTimer;
          this.vlabel.getComponent(Label).string = '填充类型：垂直填充 ' + Math.floor(this.timer * 100) + '%';
          this.hlabel.getComponent(Label).string = '填充类型：水平填充 ' + Math.floor(this.timer * 100) + '%';
          this.mclabel.getComponent(Label).string = 'center(0.5, 0.5) rang ' + Math.floor(this.timer * 100) / 100;
          this.lblabel.getComponent(Label).string = 'center(0, 0) rang ' + Math.floor(this.lTimer * 100) / 100;
          this.rblabel.getComponent(Label).string = 'center(1, 0) rang ' + Math.floor(this.rTimer * 100) / 100;
        };
        return FillSprite;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "hlabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hhorizontal", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "vlabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "vhorizontal", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "mclabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "mc", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lblabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lb", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "rblabel", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "rb", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/first-person-camera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, math, KeyCode, input, Input, game, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      KeyCode = module.KeyCode;
      input = module.input;
      Input = module.Input;
      game = module.game;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "445598TP61LhoVLGOAdP05g", "first-person-camera", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Vec2 = math.Vec2,
        Vec3 = math.Vec3,
        Quat = math.Quat;
      var v2_1 = new Vec2();
      var v2_2 = new Vec2();
      var v3_1 = new Vec3();
      var qt_1 = new Quat();
      var KEYCODE = {
        W: 'W'.charCodeAt(0),
        S: 'S'.charCodeAt(0),
        A: 'A'.charCodeAt(0),
        D: 'D'.charCodeAt(0),
        Q: 'Q'.charCodeAt(0),
        E: 'E'.charCodeAt(0),
        SHIFT: KeyCode.SHIFT_LEFT
      };
      var FirstPersonCamera = exports('FirstPersonCamera', (_dec = property({
        slide: true,
        range: [0.05, 0.5, 0.01]
      }), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FirstPersonCamera, _Component);
        function FirstPersonCamera() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "moveSpeed", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "moveSpeedShiftScale", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "damp", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rotateSpeed", _descriptor4, _assertThisInitialized(_this));
          _this._euler = new Vec3();
          _this._velocity = new Vec3();
          _this._position = new Vec3();
          _this._speedScale = 1;
          return _this;
        }
        var _proto = FirstPersonCamera.prototype;
        _proto.onLoad = function onLoad() {
          input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          Vec3.copy(this._euler, this.node.eulerAngles);
          Vec3.copy(this._position, this.node.position);
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
          input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.off(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
        };
        _proto.update = function update(dt) {
          var t = Math.min(dt / this.damp, 1);
          // position
          Vec3.transformQuat(v3_1, this._velocity, this.node.rotation);
          Vec3.scaleAndAdd(this._position, this._position, v3_1, this.moveSpeed * this._speedScale);
          Vec3.lerp(v3_1, this.node.position, this._position, t);
          this.node.setPosition(v3_1);
          // rotation
          Quat.fromEuler(qt_1, this._euler.x, this._euler.y, this._euler.z);
          Quat.slerp(qt_1, this.node.rotation, qt_1, t);
          this.node.setRotation(qt_1);
        };
        _proto.onMouseWheel = function onMouseWheel(e) {
          var delta = -e.getScrollY() * this.moveSpeed * 0.01; // delta is positive when scroll down
          Vec3.transformQuat(v3_1, Vec3.UNIT_Z, this.node.rotation);
          Vec3.scaleAndAdd(this._position, this.node.position, v3_1, delta);
        };
        _proto.onKeyDown = function onKeyDown(e) {
          var v = this._velocity;
          if (e.keyCode === KEYCODE.SHIFT) {
            this._speedScale = this.moveSpeedShiftScale;
          } else if (e.keyCode === KEYCODE.W) {
            if (v.z === 0) {
              v.z = -1;
            }
          } else if (e.keyCode === KEYCODE.S) {
            if (v.z === 0) {
              v.z = 1;
            }
          } else if (e.keyCode === KEYCODE.A) {
            if (v.x === 0) {
              v.x = -1;
            }
          } else if (e.keyCode === KEYCODE.D) {
            if (v.x === 0) {
              v.x = 1;
            }
          } else if (e.keyCode === KEYCODE.Q) {
            if (v.y === 0) {
              v.y = -1;
            }
          } else if (e.keyCode === KEYCODE.E) {
            if (v.y === 0) {
              v.y = 1;
            }
          }
        };
        _proto.onKeyUp = function onKeyUp(e) {
          var v = this._velocity;
          if (e.keyCode === KEYCODE.SHIFT) {
            this._speedScale = 1;
          } else if (e.keyCode === KEYCODE.W) {
            if (v.z < 0) {
              v.z = 0;
            }
          } else if (e.keyCode === KEYCODE.S) {
            if (v.z > 0) {
              v.z = 0;
            }
          } else if (e.keyCode === KEYCODE.A) {
            if (v.x < 0) {
              v.x = 0;
            }
          } else if (e.keyCode === KEYCODE.D) {
            if (v.x > 0) {
              v.x = 0;
            }
          } else if (e.keyCode === KEYCODE.Q) {
            if (v.y < 0) {
              v.y = 0;
            }
          } else if (e.keyCode === KEYCODE.E) {
            if (v.y > 0) {
              v.y = 0;
            }
          }
        };
        _proto.onTouchStart = function onTouchStart() {
          if (game.canvas['requestPointerLock']) {
            game.canvas.requestPointerLock();
          }
        };
        _proto.onTouchMove = function onTouchMove(e) {
          e.getStartLocation(v2_1);
          if (v2_1.x > game.canvas.width * 0.4) {
            // rotation
            e.getDelta(v2_2);
            this._euler.y -= v2_2.x * this.rotateSpeed * 0.1;
            this._euler.x += v2_2.y * this.rotateSpeed * 0.1;
          } else {
            // position
            e.getLocation(v2_2);
            Vec2.subtract(v2_2, v2_2, v2_1);
            this._velocity.x = v2_2.x * 0.01;
            this._velocity.z = -v2_2.y * 0.01;
          }
        };
        _proto.onTouchEnd = function onTouchEnd(e) {
          if (document.exitPointerLock) {
            document.exitPointerLock();
          }
          e.getStartLocation(v2_1);
          if (v2_1.x < game.canvas.width * 0.4) {
            // position
            this._velocity.x = 0;
            this._velocity.z = 0;
          }
        };
        return FirstPersonCamera;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "moveSpeedShiftScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "damp", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rotateSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/folditem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './common.ts', './backbutton.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Label, director, Component, SceneList, BackButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SceneList = module.SceneList;
    }, function (module) {
      BackButton = module.BackButton;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "4ef30NMyD9B/4OPiIsosB07", "folditem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FoldItem = exports('FoldItem', (_dec = ccclass("FoldItem"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FoldItem, _Component);
        function FoldItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.index = -1;
          _this._name = "";
          _this.label = null;
          return _this;
        }
        var _proto = FoldItem.prototype;
        _proto.onload = function onload() {};
        _proto.start = function start() {
          // Your initialization goes here.
          this.index = this.node.getSiblingIndex() - SceneList.foldCount;
          this._name = "";
          if (this.node) {
            this.label = this.node.getComponentInChildren(Label);
          }
          this.updateItem(this.index, SceneList.sceneFold[this.index]);
          SceneList.foldCount++;
        };
        _proto.loadScene = function loadScene() {
          var _this2 = this;
          return new Promise(function (resovle, reject) {
            BackButton.saveOffset();
            BackButton.saveIndex(_this2.index);
            director.loadScene(_this2._name, function (error) {
              error ? reject(error) : resovle();
            });
          });
        };
        _proto.updateItem = function updateItem(idx, name) {
          this.index = idx;
          this._name = name;
          if (this.label) {
            this.label.string = name;
          }
        };
        return FoldItem;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gamepad-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ProgressBar, Graphics, sys, input, Input, v3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      Graphics = module.Graphics;
      sys = module.sys;
      input = module.input;
      Input = module.Input;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19;
      cclegacy._RF.push({}, "eea0fgRZe5HUohcX2UxF4Ix", "gamepad-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var gamepad_event = exports('gamepad_event', (_dec = ccclass('gamepad_event'), _dec2 = property(Node), _dec3 = property(ProgressBar), _dec4 = property(ProgressBar), _dec5 = property(ProgressBar), _dec6 = property(ProgressBar), _dec7 = property(ProgressBar), _dec8 = property(ProgressBar), _dec9 = property(ProgressBar), _dec10 = property(ProgressBar), _dec11 = property(ProgressBar), _dec12 = property(ProgressBar), _dec13 = property(ProgressBar), _dec14 = property(ProgressBar), _dec15 = property(ProgressBar), _dec16 = property(ProgressBar), _dec17 = property(ProgressBar), _dec18 = property(ProgressBar), _dec19 = property(Graphics), _dec20 = property(Graphics), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gamepad_event, _Component);
        function gamepad_event() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "supportTip", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "L1", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "L2", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "L3", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "R1", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "R2", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "R3", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "BtnSouth", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "BtnEast", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "BtnWest", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "BtnNorth", _descriptor11, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "Up", _descriptor12, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "Down", _descriptor13, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "Left", _descriptor14, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "Right", _descriptor15, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "Share", _descriptor16, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "Options", _descriptor17, _assertThisInitialized(_this));
          // @property(ProgressBar)
          // public Home: ProgressBar = null!;
          // @property(ProgressBar)
          // public TouchPad: ProgressBar = null!;
          _initializerDefineProperty(_this, "graphicsLeft", _descriptor18, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphicsRight", _descriptor19, _assertThisInitialized(_this));
          _this._leftStickPos = null;
          _this._rightStickPos = null;
          _this._stickMoveDistance = 50;
          return _this;
        }
        var _proto = gamepad_event.prototype;
        _proto.onLoad = function onLoad() {
          if (!sys.hasFeature(sys.Feature.EVENT_GAMEPAD)) {
            this.supportTip.active = true;
            return;
          }
          input.on(Input.EventType.GAMEPAD_INPUT, this.gamepadInput, this);
          this._leftStickPos = this.L3.node.position.clone();
          this._rightStickPos = this.R3.node.position.clone();
          this.graphicsLeft.circle(0, 0, this._stickMoveDistance + 10);
          this.graphicsLeft.stroke();
          this.graphicsRight.circle(0, 0, this._stickMoveDistance + 10);
          this.graphicsRight.stroke();
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.GAMEPAD_INPUT, this.gamepadInput, this);
        };
        _proto.gamepadInput = function gamepadInput(e) {
          var gp = e.gamepad;
          this.L1.progress = gp.buttonL1.getValue();
          this.L2.progress = gp.buttonL2.getValue();
          this.L3.progress = gp.buttonL3.getValue();
          this.R1.progress = gp.buttonR1.getValue();
          this.R2.progress = gp.buttonR2.getValue();
          this.R3.progress = gp.buttonR3.getValue();
          this.BtnSouth.progress = gp.buttonSouth.getValue();
          this.BtnEast.progress = gp.buttonEast.getValue();
          this.BtnWest.progress = gp.buttonWest.getValue();
          this.BtnNorth.progress = gp.buttonNorth.getValue();
          this.Up.progress = gp.dpad.up.getValue();
          this.Down.progress = gp.dpad.down.getValue();
          this.Left.progress = gp.dpad.left.getValue();
          this.Right.progress = gp.dpad.right.getValue();
          this.Share.progress = gp.buttonShare.getValue();
          this.Options.progress = gp.buttonOptions.getValue();
          // this.Home.progress = gp.buttonHome.getValue();

          // this.TouchPad.progress = gp.buttonTouchPad.getValue();

          var ls = gp.leftStick.getValue();
          var rs = gp.rightStick.getValue();
          this.L3.node.setPosition(v3(this._leftStickPos.x + this._stickMoveDistance * ls.x, this._leftStickPos.y + this._stickMoveDistance * ls.y, 0));
          this.R3.node.setPosition(v3(this._rightStickPos.x + this._stickMoveDistance * rs.x, this._rightStickPos.y + this._stickMoveDistance * rs.y, 0));
        };
        return gamepad_event;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "supportTip", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "L1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "L2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "L3", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "R1", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "R2", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "R3", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "BtnSouth", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "BtnEast", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "BtnWest", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "BtnNorth", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "Up", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "Down", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "Left", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "Right", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "Share", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "Options", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "graphicsLeft", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "graphicsRight", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/geometries.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Color, utils, primitives, Node, ModelComponent, Material, math, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      utils = module.utils;
      primitives = module.primitives;
      Node = module.Node;
      ModelComponent = module.ModelComponent;
      Material = module.Material;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "6bb243zHfFJi4MLeBdak3WZ", "geometries", undefined);
      var ccclass = _decorator.ccclass;
      var Geometries = exports('Geometries', (_dec = ccclass('Geometries'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Geometries, _Component);
        function Geometries() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = Geometries.prototype;
        _proto.start = function start() {
          this.node.removeAllChildren();
          var rows = 7;
          var cols = 7;
          var stride = 2.5;
          var albedo = new Color(128, 0, 0);
          var meshSphere = utils.createMesh(primitives.sphere(1, {
            segments: 64
          }));
          for (var i = 0; i < rows; i++) {
            for (var j = 0; j < cols; j++) {
              var node = new Node();
              node.parent = this.node;
              node.setPosition((j - Math.floor(cols / 2)) * stride, (i - Math.floor(rows / 2)) * stride, 0);
              var comp = node.addComponent(ModelComponent);
              comp.mesh = meshSphere;
              var m = new Material();
              m.initialize({
                effectName: 'builtin-standard'
              });
              m.setProperty('roughness', math.clamp(j / cols, 0.05, 1));
              m.setProperty('metallic', i / rows);
              m.setProperty('albedo', albedo);
              comp.material = m;
            }
          }
        };
        return Geometries;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/geometry-creator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, CameraComponent, Color, Mat4, Vec3, geometry, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      CameraComponent = module.CameraComponent;
      Color = module.Color;
      Mat4 = module.Mat4;
      Vec3 = module.Vec3;
      geometry = module.geometry;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "cb4377We5ZNrYeqzGbNFPhg", "geometry-creator", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GeometryCreator = exports('GeometryCreator', (_dec = ccclass('GeometryCreator'), _dec2 = property(Toggle), _dec3 = property(Toggle), _dec4 = property(Toggle), _dec5 = property(Toggle), _dec6 = property(CameraComponent), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GeometryCreator, _Component);
        function GeometryCreator() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "toggleWireframe", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggleDepthTest", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggleUnlit", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggleRotate", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cameraComp", _descriptor5, _assertThisInitialized(_this));
          _this._wireframe = false;
          _this._depthTest = false;
          _this._unlit = false;
          _this._rotate = false;
          _this._mainCamera = null;
          _this._meshVertices = new Array();
          _this._meshIndices = new Array();
          _this._colors = new Array();
          _this._colorNum = 0;
          _this._colorIndex = 0;
          _this._angle = 0.0;
          return _this;
        }
        var _proto = GeometryCreator.prototype;
        _proto.start = function start() {
          this.initCamera();
          this.initColors();
          this.initMesh();
          this.initUI();
        };
        _proto.initCamera = function initCamera() {
          this._mainCamera = this.cameraComp.camera;
          this._mainCamera.initGeometryRenderer();
        };
        _proto.initUI = function initUI() {
          this.toggleWireframe.isChecked = this._wireframe;
          this.toggleDepthTest.isChecked = this._depthTest;
          this.toggleUnlit.isChecked = this._unlit;
          this.toggleRotate.isChecked = this._rotate;
          this.toggleWireframe.node.on(Toggle.EventType.TOGGLE, this.onToggleWireframe, this);
          this.toggleDepthTest.node.on(Toggle.EventType.TOGGLE, this.onToggleDepthTest, this);
          this.toggleUnlit.node.on(Toggle.EventType.TOGGLE, this.onToggleUnlit, this);
          this.toggleRotate.node.on(Toggle.EventType.TOGGLE, this.onToggleRotate, this);
        };
        _proto.onToggleWireframe = function onToggleWireframe(toggle) {
          this._wireframe = toggle.isChecked;
        };
        _proto.onToggleDepthTest = function onToggleDepthTest(toggle) {
          this._depthTest = toggle.isChecked;
        };
        _proto.onToggleUnlit = function onToggleUnlit(toggle) {
          this._unlit = toggle.isChecked;
        };
        _proto.onToggleRotate = function onToggleRotate(toggle) {
          this._rotate = toggle.isChecked;
        };
        _proto.initColors = function initColors() {
          this._colors.push(new Color(255, 0, 0, 255));
          this._colors.push(new Color(0, 255, 0, 255));
          this._colors.push(new Color(0, 0, 255, 255));
          this._colors.push(new Color(255, 255, 0, 255));
          this._colors.push(new Color(255, 0, 255, 255));
          this._colors.push(new Color(0, 255, 255, 255));
          this._colorNum = this._colors.length;
          this._colorIndex = 0;
        };
        _proto.getNextColor = function getNextColor() {
          if (this._colorIndex >= this._colorNum) {
            this._colorIndex = 0;
          }
          return this._colors[this._colorIndex++];
        };
        _proto.rotate = function rotate(angle, pos) {
          var result = new Mat4();
          var transform = new Mat4();
          Mat4.fromTranslation(result, pos);
          Mat4.fromXRotation(transform, angle);
          result.multiply(transform);
          Mat4.fromTranslation(transform, new Vec3(-pos.x, -pos.y, -pos.z));
          result.multiply(transform);
          return result;
        };
        _proto.updateAngle = function updateAngle(deltaTime) {
          if (this._rotate) {
            this._angle += deltaTime;
            if (this._angle > Math.PI * 2.0) {
              this._angle -= Math.PI * 2.0;
            }
          } else {
            this._angle = 0.0;
          }
        };
        _proto.update = function update(deltaTime) {
          var renderer = this._mainCamera.geometryRenderer;
          if (!renderer) {
            return;
          }
          this.updateAngle(deltaTime);
          this._colorIndex = 0;
          var useTransform = true;
          var startX = -20.0;
          var startY = 18.0;
          var stepX = 12.0;
          var stepY = -10.0;

          // The first row
          var pos = new Vec3(startX, startY, 0.0);
          var transform = this.rotate(Math.PI / 6.0 + this._angle, pos);
          var box = geometry.AABB.create(pos.x, pos.y, pos.z, 2.0, 2.0, 2.0);
          renderer.addBoundingBox(box, this.getNextColor(), this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(this._angle, pos);
          renderer.addCapsule(pos, 2.0, 4.0, this.getNextColor(), 32, 8, this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI / 2.0 + this._angle, pos);
          renderer.addTorus(pos, 3.0, 1.0, this.getNextColor(), 32, 32, this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(this._angle, pos);
          renderer.addCylinder(pos, 2.0, 4.0, this.getNextColor(), 32, this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI / 4.0 + this._angle, pos);
          renderer.addCone(pos, 2.0, 4.0, this.getNextColor(), 32, this._wireframe, this._depthTest, this._unlit, useTransform, transform);

          // The second row
          pos.y += stepY;
          pos.x = startX;
          transform = this.rotate(Math.PI / 4.0 + this._angle, pos);
          renderer.addOctahedron(pos, 3.0, this.getNextColor(), this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(this._angle, pos);
          renderer.addSphere(pos, 3.0, this.getNextColor(), 32, 16, this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI / 2.0 + this._angle, pos);
          renderer.addDisc(pos, 3.0, this.getNextColor(), 32, this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI + this._angle, pos);
          renderer.addMesh(pos, this._meshVertices, this.getNextColor(), this._depthTest, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI + this._angle, pos);
          renderer.addIndexedMesh(pos, this._meshVertices, this._meshIndices, this.getNextColor(), this._depthTest, useTransform, transform);

          // The third row
          pos.y += stepY;
          pos.x = startX;
          transform = this.rotate(Math.PI / 2.0 + this._angle, pos);
          renderer.addSector(pos, 3.0, this.getNextColor(), 30.0, 150.0, 32, this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI / 2.0 + this._angle, pos);
          renderer.addPolygon(pos, 3.0, this.getNextColor(), 5, this._wireframe, this._depthTest, this._unlit, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI / 2.0 + this._angle, pos);
          renderer.addCircle(pos, 3.0, this.getNextColor(), 32, this._depthTest, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(Math.PI / 2.0 + this._angle, pos);
          renderer.addArc(pos, 3.0, this.getNextColor(), 30.0, 270.0, 32, this._depthTest, useTransform, transform);
          pos.x += stepX;
          transform = this.rotate(this._angle, pos);
          var bezierV0 = new Vec3(pos.x - 4.0, pos.y, pos.z);
          var bezierV1 = new Vec3(pos.x - 2.0, pos.y - 4.0, pos.z - 2.0);
          var bezierV2 = new Vec3(pos.x + 2.0, pos.y + 4.0, pos.z - 2.0);
          var bezierV3 = new Vec3(pos.x + 4.0, pos.y, pos.z);
          renderer.addBezier(bezierV0, bezierV1, bezierV2, bezierV3, this.getNextColor(), 32, this._depthTest, useTransform, transform);

          // The fourth row
          pos.y += stepY;
          pos.x = startX;
          var view = new Mat4();
          Mat4.lookAt(view, new Vec3(pos.x, pos.y - 0.2, pos.z - 0.5), pos, new Vec3(0.0, 1.0, 0.0));
          var frustum = this.createPerspective(Math.PI / 4.0, 16.0 / 9.0, 1.0, 5.0, view.invert());
          renderer.addFrustum(frustum, this.getNextColor(), this._depthTest);
          pos.x += stepX;
          var quadV0 = new Vec3(pos.x - 2.0, pos.y - 2.0, pos.z);
          var quadV1 = new Vec3(pos.x + 2.0, pos.y - 2.0, pos.z);
          var quadV2 = new Vec3(pos.x + 2.0, pos.y + 2.0, pos.z);
          var quadV3 = new Vec3(pos.x - 2.0, pos.y + 2.0, pos.z);
          renderer.addQuad(quadV0, quadV1, quadV2, quadV3, this.getNextColor(), this._wireframe, this._depthTest, this._unlit);
          pos.x += stepX;
          var triangleV0 = new Vec3(pos.x - 2.0, pos.y - 2.0, pos.z);
          var triangleV1 = new Vec3(pos.x + 2.0, pos.y - 2.0, pos.z);
          var triangleV2 = new Vec3(pos.x, pos.y + 2.0, pos.z);
          renderer.addTriangle(triangleV0, triangleV1, triangleV2, this.getNextColor(), this._wireframe, this._depthTest, this._unlit);
          pos.x += stepX;
          var lineV0 = new Vec3(pos.x - 2.0, pos.y - 3.0, pos.z);
          var lineV1 = new Vec3(pos.x + 2.0, pos.y + 3.0, pos.z);
          renderer.addLine(lineV0, lineV1, this.getNextColor(), this._depthTest);
          pos.x += stepX;
          var dashedLineV0 = new Vec3(pos.x - 2.0, pos.y - 3.0, pos.z);
          var dashedLineV1 = new Vec3(pos.x + 2.0, pos.y + 3.0, pos.z);
          renderer.addDashedLine(dashedLineV0, dashedLineV1, this.getNextColor(), this._depthTest);

          // The fifth row
          pos.y += stepY;
          pos.x = startX;
          var knots = [];
          knots.push(new Vec3(pos.x - 3, pos.y, pos.z));
          knots.push(new Vec3(pos.x, pos.y + 3, pos.z));
          knots.push(new Vec3(pos.x + 3, pos.y, pos.z));
          knots.push(new Vec3(pos.x + 6, pos.y + 3, pos.z));
          knots.push(new Vec3(pos.x + 9, pos.y, pos.z));
          knots.push(new Vec3(pos.x + 12, pos.y + 3, pos.z));
          var whole_index = 0xffffffff;
          var spline = geometry.Spline.create(geometry.SplineMode.LINEAR, knots);
          renderer.addSpline(spline, this.getNextColor(), whole_index, 0.5, 64, this._depthTest);
          pos.x += 2.0 * stepX;
          knots = [];
          knots.push(new Vec3(pos.x - 5, pos.y, pos.z));
          knots.push(new Vec3(pos.x - 2, pos.y + 3, pos.z));
          knots.push(new Vec3(pos.x + 2, pos.y, pos.z));
          knots.push(new Vec3(pos.x + 5, pos.y + 3, pos.z));
          spline = geometry.Spline.create(geometry.SplineMode.BEZIER, knots);
          renderer.addSpline(spline, this.getNextColor(), whole_index, 0.5, 64, this._depthTest);
          pos.x += stepX;
          knots = [];
          knots.push(new Vec3(pos.x - 3, pos.y, pos.z));
          knots.push(new Vec3(pos.x, pos.y + 3, pos.z));
          knots.push(new Vec3(pos.x + 3, pos.y, pos.z));
          knots.push(new Vec3(pos.x + 6, pos.y + 3, pos.z));
          knots.push(new Vec3(pos.x + 9, pos.y, pos.z));
          knots.push(new Vec3(pos.x + 12, pos.y + 3, pos.z));
          spline = geometry.Spline.create(geometry.SplineMode.CATMULL_ROM, knots);
          renderer.addSpline(spline, this.getNextColor(), whole_index, 0.5, 64, this._depthTest);
        };
        _proto.createPerspective = function createPerspective(fov, aspect, start, end, m) {
          var frustum = geometry.Frustum.create();
          var vertexes = frustum.vertices;
          var h = Math.tan(fov * 0.5);
          var w = h * aspect;
          var near = new Vec3(start * w, start * h, start);
          var far = new Vec3(end * w, end * h, end);
          var vertex = new Vec3();
          vertex.set(near.x, near.y, near.z);
          Vec3.transformMat4(vertexes[0], vertex, m);
          vertex.set(-near.x, near.y, near.z);
          Vec3.transformMat4(vertexes[1], vertex, m);
          vertex.set(-near.x, -near.y, near.z);
          Vec3.transformMat4(vertexes[2], vertex, m);
          vertex.set(near.x, -near.y, near.z);
          Vec3.transformMat4(vertexes[3], vertex, m);
          vertex.set(far.x, far.y, far.z);
          Vec3.transformMat4(vertexes[4], vertex, m);
          vertex.set(-far.x, far.y, far.z);
          Vec3.transformMat4(vertexes[5], vertex, m);
          vertex.set(-far.x, -far.y, far.z);
          Vec3.transformMat4(vertexes[6], vertex, m);
          vertex.set(far.x, -far.y, far.z);
          Vec3.transformMat4(vertexes[7], vertex, m);
          frustum.updatePlanes();
          return frustum;
        };
        _proto.initMesh = function initMesh() {
          var scale = 3.0;
          var offsetY = 2.0;
          var teapot = [0.700000, -1.200000, 0.000000, 0.605600, -1.200000, -0.355700, 0.598800, -1.243700, -0.351700, 0.598800, -1.243700, -0.351700, 0.692100, -1.243700, 0.000000, 0.700000, -1.200000, 0.000000, 0.692100, -1.243700, 0.000000, 0.598800, -1.243700, -0.351700, 0.619600, -1.243700, -0.363900, 0.619600, -1.243700, -0.363900, 0.716200, -1.243700, 0.000000, 0.692100, -1.243700, 0.000000, 0.716200, -1.243700, 0.000000, 0.619600, -1.243700, -0.363900, 0.648900, -1.200000, -0.381100, 0.648900, -1.200000, -0.381100, 0.750000, -1.200000, 0.000000, 0.716200, -1.243700, 0.000000, 0.605600, -1.200000, -0.355700, 0.355700, -1.200000, -0.605600, 0.351700, -1.243700, -0.598800, 0.351700, -1.243700, -0.598800, 0.598800, -1.243700, -0.351700, 0.605600, -1.200000, -0.355700, 0.598800, -1.243700, -0.351700, 0.351700, -1.243700, -0.598800, 0.363900, -1.243800, -0.619600, 0.363900, -1.243800, -0.619600, 0.619600, -1.243700, -0.363900, 0.598800, -1.243700, -0.351700, 0.619600, -1.243700, -0.363900, 0.363900, -1.243800, -0.619600, 0.381100, -1.200000, -0.648900, 0.381100, -1.200000, -0.648900, 0.648900, -1.200000, -0.381100, 0.619600, -1.243700, -0.363900, 0.355700, -1.200000, -0.605600, 0.000000, -1.200000, -0.700000, 0.000000, -1.243700, -0.692100, 0.000000, -1.243700, -0.692100, 0.351700, -1.243700, -0.598800, 0.355700, -1.200000, -0.605600, 0.351700, -1.243700, -0.598800, 0.000000, -1.243700, -0.692100, 0.000000, -1.243800, -0.716200, 0.000000, -1.243800, -0.716200, 0.363900, -1.243800, -0.619600, 0.351700, -1.243700, -0.598800, 0.363900, -1.243800, -0.619600, 0.000000, -1.243800, -0.716200, 0.000000, -1.200000, -0.750000, 0.000000, -1.200000, -0.750000, 0.381100, -1.200000, -0.648900, 0.363900, -1.243800, -0.619600, 0.000000, -1.200000, -0.700000, -0.375700, -1.200000, -0.605600, -0.357600, -1.243700, -0.598800, -0.357600, -1.243700, -0.598800, 0.000000, -1.243700, -0.692100, 0.000000, -1.200000, -0.700000, 0.000000, -1.243700, -0.692100, -0.357600, -1.243700, -0.598800, -0.364700, -1.243700, -0.619600, -0.364700, -1.243700, -0.619600, 0.000000, -1.243800, -0.716200, 0.000000, -1.243700, -0.692100, 0.000000, -1.243800, -0.716200, -0.364700, -1.243700, -0.619600, -0.381100, -1.200000, -0.648900, -0.381100, -1.200000, -0.648900, 0.000000, -1.200000, -0.750000, 0.000000, -1.243800, -0.716200, -0.375700, -1.200000, -0.605600, -0.615600, -1.200000, -0.355700, -0.601800, -1.243700, -0.351700, -0.601800, -1.243700, -0.351700, -0.357600, -1.243700, -0.598800, -0.375700, -1.200000, -0.605600, -0.357600, -1.243700, -0.598800, -0.601800, -1.243700, -0.351700, -0.620000, -1.243700, -0.363900, -0.620000, -1.243700, -0.363900, -0.364700, -1.243700, -0.619600, -0.357600, -1.243700, -0.598800, -0.364700, -1.243700, -0.619600, -0.620000, -1.243700, -0.363900, -0.648900, -1.200000, -0.381100, -0.648900, -1.200000, -0.381100, -0.381100, -1.200000, -0.648900, -0.364700, -1.243700, -0.619600, -0.615600, -1.200000, -0.355700, -0.700000, -1.200000, 0.000000, -0.692100, -1.243700, 0.000000, -0.692100, -1.243700, 0.000000, -0.601800, -1.243700, -0.351700, -0.615600, -1.200000, -0.355700, -0.601800, -1.243700, -0.351700, -0.692100, -1.243700, 0.000000, -0.716200, -1.243700, 0.000000, -0.716200, -1.243700, 0.000000, -0.620000, -1.243700, -0.363900, -0.601800, -1.243700, -0.351700, -0.620000, -1.243700, -0.363900, -0.716200, -1.243700, 0.000000, -0.750000, -1.200000, 0.000000, -0.750000, -1.200000, 0.000000, -0.648900, -1.200000, -0.381100, -0.620000, -1.243700, -0.363900, -0.700000, -1.200000, 0.000000, -0.605600, -1.200000, 0.355700, -0.598800, -1.243700, 0.351700, -0.598800, -1.243700, 0.351700, -0.692100, -1.243700, 0.000000, -0.700000, -1.200000, 0.000000, -0.692100, -1.243700, 0.000000, -0.598800, -1.243700, 0.351700, -0.619600, -1.243700, 0.363900, -0.619600, -1.243700, 0.363900, -0.716200, -1.243700, 0.000000, -0.692100, -1.243700, 0.000000, -0.716200, -1.243700, 0.000000, -0.619600, -1.243700, 0.363900, -0.648900, -1.200000, 0.381100, -0.648900, -1.200000, 0.381100, -0.750000, -1.200000, 0.000000, -0.716200, -1.243700, 0.000000, -0.605600, -1.200000, 0.355700, -0.355700, -1.200000, 0.605600, -0.351700, -1.243700, 0.598800, -0.351700, -1.243700, 0.598800, -0.598800, -1.243700, 0.351700, -0.605600, -1.200000, 0.355700, -0.598800, -1.243700, 0.351700, -0.351700, -1.243700, 0.598800, -0.363900, -1.243700, 0.619600, -0.363900, -1.243700, 0.619600, -0.619600, -1.243700, 0.363900, -0.598800, -1.243700, 0.351700, -0.619600, -1.243700, 0.363900, -0.363900, -1.243700, 0.619600, -0.381100, -1.200000, 0.648900, -0.381100, -1.200000, 0.648900, -0.648900, -1.200000, 0.381100, -0.619600, -1.243700, 0.363900, -0.355700, -1.200000, 0.605600, 0.000000, -1.200000, 0.700000, 0.000000, -1.243700, 0.692100, 0.000000, -1.243700, 0.692100, -0.351700, -1.243700, 0.598800, -0.355700, -1.200000, 0.605600, -0.351700, -1.243700, 0.598800, 0.000000, -1.243700, 0.692100, 0.000000, -1.243700, 0.716200, 0.000000, -1.243700, 0.716200, -0.363900, -1.243700, 0.619600, -0.351700, -1.243700, 0.598800, -0.363900, -1.243700, 0.619600, 0.000000, -1.243700, 0.716200, 0.000000, -1.200000, 0.750000, 0.000000, -1.200000, 0.750000, -0.381100, -1.200000, 0.648900, -0.363900, -1.243700, 0.619600, 0.000000, -1.200000, 0.700000, 0.355700, -1.200000, 0.605600, 0.351700, -1.243700, 0.598800, 0.351700, -1.243700, 0.598800, 0.000000, -1.243700, 0.692100, 0.000000, -1.200000, 0.700000, 0.000000, -1.243700, 0.692100, 0.351700, -1.243700, 0.598800, 0.363900, -1.243700, 0.619600, 0.363900, -1.243700, 0.619600, 0.000000, -1.243700, 0.716200, 0.000000, -1.243700, 0.692100, 0.000000, -1.243700, 0.716200, 0.363900, -1.243700, 0.619600, 0.381100, -1.200000, 0.648900, 0.381100, -1.200000, 0.648900, 0.000000, -1.200000, 0.750000, 0.000000, -1.243700, 0.716200, 0.355700, -1.200000, 0.605600, 0.605600, -1.200000, 0.355700, 0.598800, -1.243700, 0.351700, 0.598800, -1.243700, 0.351700, 0.351700, -1.243700, 0.598800, 0.355700, -1.200000, 0.605600, 0.351700, -1.243700, 0.598800, 0.598800, -1.243700, 0.351700, 0.619600, -1.243700, 0.363900, 0.619600, -1.243700, 0.363900, 0.363900, -1.243700, 0.619600, 0.351700, -1.243700, 0.598800, 0.363900, -1.243700, 0.619600, 0.619600, -1.243700, 0.363900, 0.648900, -1.200000, 0.381100, 0.648900, -1.200000, 0.381100, 0.381100, -1.200000, 0.648900, 0.363900, -1.243700, 0.619600, 0.605600, -1.200000, 0.355700, 0.700000, -1.200000, 0.000000, 0.692100, -1.243700, 0.000000, 0.692100, -1.243700, 0.000000, 0.598800, -1.243700, 0.351700, 0.605600, -1.200000, 0.355700, 0.598800, -1.243700, 0.351700, 0.692100, -1.243700, 0.000000, 0.716200, -1.243700, 0.000000, 0.716200, -1.243700, 0.000000, 0.619600, -1.243700, 0.363900, 0.598800, -1.243700, 0.351700, 0.619600, -1.243700, 0.363900, 0.716200, -1.243700, 0.000000, 0.750000, -1.200000, 0.000000, 0.750000, -1.200000, 0.000000, 0.648900, -1.200000, 0.381100, 0.619600, -1.243700, 0.363900, 0.750000, -1.200000, 0.000000, 0.648900, -1.200000, -0.381100, 0.753000, -0.938900, -0.442300, 0.753000, -0.938900, -0.442300, 0.870400, -0.938900, 0.000000, 0.750000, -1.200000, 0.000000, 0.870400, -0.938900, 0.000000, 0.753000, -0.938900, -0.442300, 0.833100, -0.686100, -0.489300, 0.833100, -0.686100, -0.489300, 0.963000, -0.686100, 0.000000, 0.870400, -0.938900, 0.000000, 0.963000, -0.686100, 0.000000, 0.833100, -0.686100, -0.489300, 0.865200, -0.450000, -0.508100, 0.865200, -0.450000, -0.508100, 1.000000, -0.450000, 0.000000, 0.963000, -0.686100, 0.000000, 0.648900, -1.200000, -0.381100, 0.381100, -1.200000, -0.648900, 0.442300, -0.938900, -0.753000, 0.442300, -0.938900, -0.753000, 0.753000, -0.938900, -0.442300, 0.648900, -1.200000, -0.381100, 0.753000, -0.938900, -0.442300, 0.442300, -0.938900, -0.753000, 0.489300, -0.686100, -0.833100, 0.489300, -0.686100, -0.833100, 0.833100, -0.686100, -0.489300, 0.753000, -0.938900, -0.442300, 0.833100, -0.686100, -0.489300, 0.489300, -0.686100, -0.833100, 0.508100, -0.450000, -0.865200, 0.508100, -0.450000, -0.865200, 0.865200, -0.450000, -0.508100, 0.833100, -0.686100, -0.489300, 0.381100, -1.200000, -0.648900, 0.000000, -1.200000, -0.750000, 0.000000, -0.938900, -0.870400, 0.000000, -0.938900, -0.870400, 0.442300, -0.938900, -0.753000, 0.381100, -1.200000, -0.648900, 0.442300, -0.938900, -0.753000, 0.000000, -0.938900, -0.870400, 0.000000, -0.686100, -0.963000, 0.000000, -0.686100, -0.963000, 0.489300, -0.686100, -0.833100, 0.442300, -0.938900, -0.753000, 0.489300, -0.686100, -0.833100, 0.000000, -0.686100, -0.963000, 0.000000, -0.450000, -1.000000, 0.000000, -0.450000, -1.000000, 0.508100, -0.450000, -0.865200, 0.489300, -0.686100, -0.833100, 0.000000, -1.200000, -0.750000, -0.381100, -1.200000, -0.648900, -0.442300, -0.938900, -0.753000, -0.442300, -0.938900, -0.753000, 0.000000, -0.938900, -0.870400, 0.000000, -1.200000, -0.750000, 0.000000, -0.938900, -0.870400, -0.442300, -0.938900, -0.753000, -0.489300, -0.686100, -0.833100, -0.489300, -0.686100, -0.833100, 0.000000, -0.686100, -0.963000, 0.000000, -0.938900, -0.870400, 0.000000, -0.686100, -0.963000, -0.489300, -0.686100, -0.833100, -0.508100, -0.450000, -0.865200, -0.508100, -0.450000, -0.865200, 0.000000, -0.450000, -1.000000, 0.000000, -0.686100, -0.963000, -0.381100, -1.200000, -0.648900, -0.648900, -1.200000, -0.381100, -0.753000, -0.938900, -0.442300, -0.753000, -0.938900, -0.442300, -0.442300, -0.938900, -0.753000, -0.381100, -1.200000, -0.648900, -0.442300, -0.938900, -0.753000, -0.753000, -0.938900, -0.442300, -0.833100, -0.686100, -0.489300, -0.833100, -0.686100, -0.489300, -0.489300, -0.686100, -0.833100, -0.442300, -0.938900, -0.753000, -0.489300, -0.686100, -0.833100, -0.833100, -0.686100, -0.489300, -0.865200, -0.450000, -0.508100, -0.865200, -0.450000, -0.508100, -0.508100, -0.450000, -0.865200, -0.489300, -0.686100, -0.833100, -0.648900, -1.200000, -0.381100, -0.750000, -1.200000, 0.000000, -0.870400, -0.938900, 0.000000, -0.870400, -0.938900, 0.000000, -0.753000, -0.938900, -0.442300, -0.648900, -1.200000, -0.381100, -0.753000, -0.938900, -0.442300, -0.870400, -0.938900, 0.000000, -0.963000, -0.686100, 0.000000, -0.963000, -0.686100, 0.000000, -0.833100, -0.686100, -0.489300, -0.753000, -0.938900, -0.442300, -0.833100, -0.686100, -0.489300, -0.963000, -0.686100, 0.000000, -1.000000, -0.450000, 0.000000, -1.000000, -0.450000, 0.000000, -0.865200, -0.450000, -0.508100, -0.833100, -0.686100, -0.489300, -0.750000, -1.200000, 0.000000, -0.648900, -1.200000, 0.381100, -0.753000, -0.938900, 0.442300, -0.753000, -0.938900, 0.442300, -0.870400, -0.938900, 0.000000, -0.750000, -1.200000, 0.000000, -0.870400, -0.938900, 0.000000, -0.753000, -0.938900, 0.442300, -0.833100, -0.686100, 0.489300, -0.833100, -0.686100, 0.489300, -0.963000, -0.686100, 0.000000, -0.870400, -0.938900, 0.000000, -0.963000, -0.686100, 0.000000, -0.833100, -0.686100, 0.489300, -0.865200, -0.450000, 0.508100, -0.865200, -0.450000, 0.508100, -1.000000, -0.450000, 0.000000, -0.963000, -0.686100, 0.000000, -0.648900, -1.200000, 0.381100, -0.381100, -1.200000, 0.648900, -0.442300, -0.938900, 0.753000, -0.442300, -0.938900, 0.753000, -0.753000, -0.938900, 0.442300, -0.648900, -1.200000, 0.381100, -0.753000, -0.938900, 0.442300, -0.442300, -0.938900, 0.753000, -0.489300, -0.686100, 0.833100, -0.489300, -0.686100, 0.833100, -0.833100, -0.686100, 0.489300, -0.753000, -0.938900, 0.442300, -0.833100, -0.686100, 0.489300, -0.489300, -0.686100, 0.833100, -0.508100, -0.450000, 0.865200, -0.508100, -0.450000, 0.865200, -0.865200, -0.450000, 0.508100, -0.833100, -0.686100, 0.489300, -0.381100, -1.200000, 0.648900, 0.000000, -1.200000, 0.750000, 0.000000, -0.938900, 0.870400, 0.000000, -0.938900, 0.870400, -0.442300, -0.938900, 0.753000, -0.381100, -1.200000, 0.648900, -0.442300, -0.938900, 0.753000, 0.000000, -0.938900, 0.870400, 0.000000, -0.686100, 0.963000, 0.000000, -0.686100, 0.963000, -0.489300, -0.686100, 0.833100, -0.442300, -0.938900, 0.753000, -0.489300, -0.686100, 0.833100, 0.000000, -0.686100, 0.963000, 0.000000, -0.450000, 1.000000, 0.000000, -0.450000, 1.000000, -0.508100, -0.450000, 0.865200, -0.489300, -0.686100, 0.833100, 0.000000, -1.200000, 0.750000, 0.381100, -1.200000, 0.648900, 0.442300, -0.938900, 0.753000, 0.442300, -0.938900, 0.753000, 0.000000, -0.938900, 0.870400, 0.000000, -1.200000, 0.750000, 0.000000, -0.938900, 0.870400, 0.442300, -0.938900, 0.753000, 0.489300, -0.686100, 0.833100, 0.489300, -0.686100, 0.833100, 0.000000, -0.686100, 0.963000, 0.000000, -0.938900, 0.870400, 0.000000, -0.686100, 0.963000, 0.489300, -0.686100, 0.833100, 0.508100, -0.450000, 0.865200, 0.508100, -0.450000, 0.865200, 0.000000, -0.450000, 1.000000, 0.000000, -0.686100, 0.963000, 0.381100, -1.200000, 0.648900, 0.648900, -1.200000, 0.381100, 0.753000, -0.938900, 0.442300, 0.753000, -0.938900, 0.442300, 0.442300, -0.938900, 0.753000, 0.381100, -1.200000, 0.648900, 0.442300, -0.938900, 0.753000, 0.753000, -0.938900, 0.442300, 0.833100, -0.686100, 0.489300, 0.833100, -0.686100, 0.489300, 0.489300, -0.686100, 0.833100, 0.442300, -0.938900, 0.753000, 0.489300, -0.686100, 0.833100, 0.833100, -0.686100, 0.489300, 0.865200, -0.450000, 0.508100, 0.865200, -0.450000, 0.508100, 0.508100, -0.450000, 0.865200, 0.489300, -0.686100, 0.833100, 0.648900, -1.200000, 0.381100, 0.750000, -1.200000, 0.000000, 0.870400, -0.938900, 0.000000, 0.870400, -0.938900, 0.000000, 0.753000, -0.938900, 0.442300, 0.648900, -1.200000, 0.381100, 0.753000, -0.938900, 0.442300, 0.870400, -0.938900, 0.000000, 0.963000, -0.686100, 0.000000, 0.963000, -0.686100, 0.000000, 0.833100, -0.686100, 0.489300, 0.753000, -0.938900, 0.442300, 0.833100, -0.686100, 0.489300, 0.963000, -0.686100, 0.000000, 1.000000, -0.450000, 0.000000, 1.000000, -0.450000, 0.000000, 0.865200, -0.450000, 0.508100, 0.833100, -0.686100, 0.489300, 1.000000, -0.450000, 0.000000, 0.865200, -0.450000, -0.508100, 0.809100, -0.261100, -0.475200, 0.809100, -0.261100, -0.475200, 0.935200, -0.261100, 0.000000, 1.000000, -0.450000, 0.000000, 0.935200, -0.261100, 0.000000, 0.809100, -0.261100, -0.475200, 0.705000, -0.138900, -0.414000, 0.705000, -0.138900, -0.414000, 0.814800, -0.138900, 0.000000, 0.935200, -0.261100, 0.000000, 0.814800, -0.138900, 0.000000, 0.705000, -0.138900, -0.414000, 0.648900, -0.075000, -0.381100, 0.648900, -0.075000, -0.381100, 0.750000, -0.075000, 0.000000, 0.814800, -0.138900, 0.000000, 0.865200, -0.450000, -0.508100, 0.508100, -0.450000, -0.865200, 0.475200, -0.261100, -0.809100, 0.475200, -0.261100, -0.809100, 0.809100, -0.261100, -0.475200, 0.865200, -0.450000, -0.508100, 0.809100, -0.261100, -0.475200, 0.475200, -0.261100, -0.809100, 0.414000, -0.138900, -0.705000, 0.414000, -0.138900, -0.705000, 0.705000, -0.138900, -0.414000, 0.809100, -0.261100, -0.475200, 0.705000, -0.138900, -0.414000, 0.414000, -0.138900, -0.705000, 0.381100, -0.075000, -0.648900, 0.381100, -0.075000, -0.648900, 0.648900, -0.075000, -0.381100, 0.705000, -0.138900, -0.414000, 0.508100, -0.450000, -0.865200, 0.000000, -0.450000, -1.000000, 0.000000, -0.261100, -0.935200, 0.000000, -0.261100, -0.935200, 0.475200, -0.261100, -0.809100, 0.508100, -0.450000, -0.865200, 0.475200, -0.261100, -0.809100, 0.000000, -0.261100, -0.935200, 0.000000, -0.138900, -0.814800, 0.000000, -0.138900, -0.814800, 0.414000, -0.138900, -0.705000, 0.475200, -0.261100, -0.809100, 0.414000, -0.138900, -0.705000, 0.000000, -0.138900, -0.814800, 0.000000, -0.075000, -0.750000, 0.000000, -0.075000, -0.750000, 0.381100, -0.075000, -0.648900, 0.414000, -0.138900, -0.705000, 0.000000, -0.450000, -1.000000, -0.508100, -0.450000, -0.865200, -0.475200, -0.261100, -0.809100, -0.475200, -0.261100, -0.809100, 0.000000, -0.261100, -0.935200, 0.000000, -0.450000, -1.000000, 0.000000, -0.261100, -0.935200, -0.475200, -0.261100, -0.809100, -0.414000, -0.138900, -0.705000, -0.414000, -0.138900, -0.705000, 0.000000, -0.138900, -0.814800, 0.000000, -0.261100, -0.935200, 0.000000, -0.138900, -0.814800, -0.414000, -0.138900, -0.705000, -0.381100, -0.075000, -0.648900, -0.381100, -0.075000, -0.648900, 0.000000, -0.075000, -0.750000, 0.000000, -0.138900, -0.814800, -0.508100, -0.450000, -0.865200, -0.865200, -0.450000, -0.508100, -0.809100, -0.261100, -0.475200, -0.809100, -0.261100, -0.475200, -0.475200, -0.261100, -0.809100, -0.508100, -0.450000, -0.865200, -0.475200, -0.261100, -0.809100, -0.809100, -0.261100, -0.475200, -0.705000, -0.138900, -0.414000, -0.705000, -0.138900, -0.414000, -0.414000, -0.138900, -0.705000, -0.475200, -0.261100, -0.809100, -0.414000, -0.138900, -0.705000, -0.705000, -0.138900, -0.414000, -0.648900, -0.075000, -0.381100, -0.648900, -0.075000, -0.381100, -0.381100, -0.075000, -0.648900, -0.414000, -0.138900, -0.705000, -0.865200, -0.450000, -0.508100, -1.000000, -0.450000, 0.000000, -0.935200, -0.261100, 0.000000, -0.935200, -0.261100, 0.000000, -0.809100, -0.261100, -0.475200, -0.865200, -0.450000, -0.508100, -0.809100, -0.261100, -0.475200, -0.935200, -0.261100, 0.000000, -0.814800, -0.138900, 0.000000, -0.814800, -0.138900, 0.000000, -0.705000, -0.138900, -0.414000, -0.809100, -0.261100, -0.475200, -0.705000, -0.138900, -0.414000, -0.814800, -0.138900, 0.000000, -0.750000, -0.075000, 0.000000, -0.750000, -0.075000, 0.000000, -0.648900, -0.075000, -0.381100, -0.705000, -0.138900, -0.414000, -1.000000, -0.450000, 0.000000, -0.865200, -0.450000, 0.508100, -0.809100, -0.261100, 0.475200, -0.809100, -0.261100, 0.475200, -0.935200, -0.261100, 0.000000, -1.000000, -0.450000, 0.000000, -0.935200, -0.261100, 0.000000, -0.809100, -0.261100, 0.475200, -0.705000, -0.138900, 0.414000, -0.705000, -0.138900, 0.414000, -0.814800, -0.138900, 0.000000, -0.935200, -0.261100, 0.000000, -0.814800, -0.138900, 0.000000, -0.705000, -0.138900, 0.414000, -0.648900, -0.075000, 0.381100, -0.648900, -0.075000, 0.381100, -0.750000, -0.075000, 0.000000, -0.814800, -0.138900, 0.000000, -0.865200, -0.450000, 0.508100, -0.508100, -0.450000, 0.865200, -0.475200, -0.261100, 0.809100, -0.475200, -0.261100, 0.809100, -0.809100, -0.261100, 0.475200, -0.865200, -0.450000, 0.508100, -0.809100, -0.261100, 0.475200, -0.475200, -0.261100, 0.809100, -0.414000, -0.138900, 0.705000, -0.414000, -0.138900, 0.705000, -0.705000, -0.138900, 0.414000, -0.809100, -0.261100, 0.475200, -0.705000, -0.138900, 0.414000, -0.414000, -0.138900, 0.705000, -0.381100, -0.075000, 0.648900, -0.381100, -0.075000, 0.648900, -0.648900, -0.075000, 0.381100, -0.705000, -0.138900, 0.414000, -0.508100, -0.450000, 0.865200, 0.000000, -0.450000, 1.000000, 0.000000, -0.261100, 0.935200, 0.000000, -0.261100, 0.935200, -0.475200, -0.261100, 0.809100, -0.508100, -0.450000, 0.865200, -0.475200, -0.261100, 0.809100, 0.000000, -0.261100, 0.935200, 0.000000, -0.138900, 0.814800, 0.000000, -0.138900, 0.814800, -0.414000, -0.138900, 0.705000, -0.475200, -0.261100, 0.809100, -0.414000, -0.138900, 0.705000, 0.000000, -0.138900, 0.814800, 0.000000, -0.075000, 0.750000, 0.000000, -0.075000, 0.750000, -0.381100, -0.075000, 0.648900, -0.414000, -0.138900, 0.705000, 0.000000, -0.450000, 1.000000, 0.508100, -0.450000, 0.865200, 0.475200, -0.261100, 0.809100, 0.475200, -0.261100, 0.809100, 0.000000, -0.261100, 0.935200, 0.000000, -0.450000, 1.000000, 0.000000, -0.261100, 0.935200, 0.475200, -0.261100, 0.809100, 0.414000, -0.138900, 0.705000, 0.414000, -0.138900, 0.705000, 0.000000, -0.138900, 0.814800, 0.000000, -0.261100, 0.935200, 0.000000, -0.138900, 0.814800, 0.414000, -0.138900, 0.705000, 0.381100, -0.075000, 0.648900, 0.381100, -0.075000, 0.648900, 0.000000, -0.075000, 0.750000, 0.000000, -0.138900, 0.814800, 0.508100, -0.450000, 0.865200, 0.865200, -0.450000, 0.508100, 0.809100, -0.261100, 0.475200, 0.809100, -0.261100, 0.475200, 0.475200, -0.261100, 0.809100, 0.508100, -0.450000, 0.865200, 0.475200, -0.261100, 0.809100, 0.809100, -0.261100, 0.475200, 0.705000, -0.138900, 0.414000, 0.705000, -0.138900, 0.414000, 0.414000, -0.138900, 0.705000, 0.475200, -0.261100, 0.809100, 0.414000, -0.138900, 0.705000, 0.705000, -0.138900, 0.414000, 0.648900, -0.075000, 0.381100, 0.648900, -0.075000, 0.381100, 0.381100, -0.075000, 0.648900, 0.414000, -0.138900, 0.705000, 0.865200, -0.450000, 0.508100, 1.000000, -0.450000, 0.000000, 0.935200, -0.261100, 0.000000, 0.935200, -0.261100, 0.000000, 0.809100, -0.261100, 0.475200, 0.865200, -0.450000, 0.508100, 0.809100, -0.261100, 0.475200, 0.935200, -0.261100, 0.000000, 0.814800, -0.138900, 0.000000, 0.814800, -0.138900, 0.000000, 0.705000, -0.138900, 0.414000, 0.809100, -0.261100, 0.475200, 0.705000, -0.138900, 0.414000, 0.814800, -0.138900, 0.000000, 0.750000, -0.075000, 0.000000, 0.750000, -0.075000, 0.000000, 0.648900, -0.075000, 0.381100, 0.705000, -0.138900, 0.414000, 0.750000, -0.075000, 0.000000, 0.648900, -0.075000, -0.381100, 0.617600, -0.038900, -0.362800, 0.617600, -0.038900, -0.362800, 0.713900, -0.038900, 0.000000, 0.750000, -0.075000, 0.000000, 0.713900, -0.038900, 0.000000, 0.617600, -0.038900, -0.362800, 0.442200, -0.011100, -0.259700, 0.442200, -0.011100, -0.259700, 0.511100, -0.011100, 0.000000, 0.713900, -0.038900, 0.000000, 0.511100, -0.011100, 0.000000, 0.442200, -0.011100, -0.259700, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.511100, -0.011100, 0.000000, 0.648900, -0.075000, -0.381100, 0.381100, -0.075000, -0.648900, 0.362800, -0.038900, -0.617600, 0.362800, -0.038900, -0.617600, 0.617600, -0.038900, -0.362800, 0.648900, -0.075000, -0.381100, 0.617600, -0.038900, -0.362800, 0.362800, -0.038900, -0.617600, 0.259700, -0.011100, -0.442200, 0.259700, -0.011100, -0.442200, 0.442200, -0.011100, -0.259700, 0.617600, -0.038900, -0.362800, 0.442200, -0.011100, -0.259700, 0.259700, -0.011100, -0.442200, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.442200, -0.011100, -0.259700, 0.381100, -0.075000, -0.648900, 0.000000, -0.075000, -0.750000, 0.000000, -0.038900, -0.713900, 0.000000, -0.038900, -0.713900, 0.362800, -0.038900, -0.617600, 0.381100, -0.075000, -0.648900, 0.362800, -0.038900, -0.617600, 0.000000, -0.038900, -0.713900, 0.000000, -0.011100, -0.511100, 0.000000, -0.011100, -0.511100, 0.259700, -0.011100, -0.442200, 0.362800, -0.038900, -0.617600, 0.259700, -0.011100, -0.442200, 0.000000, -0.011100, -0.511100, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.259700, -0.011100, -0.442200, 0.000000, -0.075000, -0.750000, -0.381100, -0.075000, -0.648900, -0.362800, -0.038900, -0.617600, -0.362800, -0.038900, -0.617600, 0.000000, -0.038900, -0.713900, 0.000000, -0.075000, -0.750000, 0.000000, -0.038900, -0.713900, -0.362800, -0.038900, -0.617600, -0.259700, -0.011100, -0.442200, -0.259700, -0.011100, -0.442200, 0.000000, -0.011100, -0.511100, 0.000000, -0.038900, -0.713900, 0.000000, -0.011100, -0.511100, -0.259700, -0.011100, -0.442200, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.011100, -0.511100, -0.381100, -0.075000, -0.648900, -0.648900, -0.075000, -0.381100, -0.617600, -0.038900, -0.362800, -0.617600, -0.038900, -0.362800, -0.362800, -0.038900, -0.617600, -0.381100, -0.075000, -0.648900, -0.362800, -0.038900, -0.617600, -0.617600, -0.038900, -0.362800, -0.442200, -0.011100, -0.259700, -0.442200, -0.011100, -0.259700, -0.259700, -0.011100, -0.442200, -0.362800, -0.038900, -0.617600, -0.259700, -0.011100, -0.442200, -0.442200, -0.011100, -0.259700, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.259700, -0.011100, -0.442200, -0.648900, -0.075000, -0.381100, -0.750000, -0.075000, 0.000000, -0.713900, -0.038900, 0.000000, -0.713900, -0.038900, 0.000000, -0.617600, -0.038900, -0.362800, -0.648900, -0.075000, -0.381100, -0.617600, -0.038900, -0.362800, -0.713900, -0.038900, 0.000000, -0.511100, -0.011100, 0.000000, -0.511100, -0.011100, 0.000000, -0.442200, -0.011100, -0.259700, -0.617600, -0.038900, -0.362800, -0.442200, -0.011100, -0.259700, -0.511100, -0.011100, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.442200, -0.011100, -0.259700, -0.750000, -0.075000, 0.000000, -0.648900, -0.075000, 0.381100, -0.617600, -0.038900, 0.362800, -0.617600, -0.038900, 0.362800, -0.713900, -0.038900, 0.000000, -0.750000, -0.075000, 0.000000, -0.713900, -0.038900, 0.000000, -0.617600, -0.038900, 0.362800, -0.442200, -0.011100, 0.259700, -0.442200, -0.011100, 0.259700, -0.511100, -0.011100, 0.000000, -0.713900, -0.038900, 0.000000, -0.511100, -0.011100, 0.000000, -0.442200, -0.011100, 0.259700, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.511100, -0.011100, 0.000000, -0.648900, -0.075000, 0.381100, -0.381100, -0.075000, 0.648900, -0.362800, -0.038900, 0.617600, -0.362800, -0.038900, 0.617600, -0.617600, -0.038900, 0.362800, -0.648900, -0.075000, 0.381100, -0.617600, -0.038900, 0.362800, -0.362800, -0.038900, 0.617600, -0.259700, -0.011100, 0.442200, -0.259700, -0.011100, 0.442200, -0.442200, -0.011100, 0.259700, -0.617600, -0.038900, 0.362800, -0.442200, -0.011100, 0.259700, -0.259700, -0.011100, 0.442200, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.442200, -0.011100, 0.259700, -0.381100, -0.075000, 0.648900, 0.000000, -0.075000, 0.750000, 0.000000, -0.038900, 0.713900, 0.000000, -0.038900, 0.713900, -0.362800, -0.038900, 0.617600, -0.381100, -0.075000, 0.648900, -0.362800, -0.038900, 0.617600, 0.000000, -0.038900, 0.713900, 0.000000, -0.011100, 0.511100, 0.000000, -0.011100, 0.511100, -0.259700, -0.011100, 0.442200, -0.362800, -0.038900, 0.617600, -0.259700, -0.011100, 0.442200, 0.000000, -0.011100, 0.511100, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.259700, -0.011100, 0.442200, 0.000000, -0.075000, 0.750000, 0.381100, -0.075000, 0.648900, 0.362800, -0.038900, 0.617600, 0.362800, -0.038900, 0.617600, 0.000000, -0.038900, 0.713900, 0.000000, -0.075000, 0.750000, 0.000000, -0.038900, 0.713900, 0.362800, -0.038900, 0.617600, 0.259700, -0.011100, 0.442200, 0.259700, -0.011100, 0.442200, 0.000000, -0.011100, 0.511100, 0.000000, -0.038900, 0.713900, 0.000000, -0.011100, 0.511100, 0.259700, -0.011100, 0.442200, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, -0.011100, 0.511100, 0.381100, -0.075000, 0.648900, 0.648900, -0.075000, 0.381100, 0.617600, -0.038900, 0.362800, 0.617600, -0.038900, 0.362800, 0.362800, -0.038900, 0.617600, 0.381100, -0.075000, 0.648900, 0.362800, -0.038900, 0.617600, 0.617600, -0.038900, 0.362800, 0.442200, -0.011100, 0.259700, 0.442200, -0.011100, 0.259700, 0.259700, -0.011100, 0.442200, 0.362800, -0.038900, 0.617600, 0.259700, -0.011100, 0.442200, 0.442200, -0.011100, 0.259700, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.259700, -0.011100, 0.442200, 0.648900, -0.075000, 0.381100, 0.750000, -0.075000, 0.000000, 0.713900, -0.038900, 0.000000, 0.713900, -0.038900, 0.000000, 0.617600, -0.038900, 0.362800, 0.648900, -0.075000, 0.381100, 0.617600, -0.038900, 0.362800, 0.713900, -0.038900, 0.000000, 0.511100, -0.011100, 0.000000, 0.511100, -0.011100, 0.000000, 0.442200, -0.011100, 0.259700, 0.617600, -0.038900, 0.362800, 0.442200, -0.011100, 0.259700, 0.511100, -0.011100, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.442200, -0.011100, 0.259700, -0.800000, -1.012500, 0.000000, -0.787000, -1.041700, -0.100000, -1.115900, -1.036400, -0.100000, -1.115900, -1.036400, -0.100000, -1.098100, -1.008300, 0.000000, -0.800000, -1.012500, 0.000000, -1.098100, -1.008300, 0.000000, -1.115900, -1.036400, -0.100000, -1.319300, -0.999700, -0.100000, -1.319300, -0.999700, -0.100000, -1.285200, -0.979200, 0.000000, -1.098100, -1.008300, 0.000000, -1.285200, -0.979200, 0.000000, -1.319300, -0.999700, -0.100000, -1.388900, -0.900000, -0.100000, -1.388900, -0.900000, -0.100000, -1.350000, -0.900000, 0.000000, -1.285200, -0.979200, 0.000000, -0.787000, -1.041700, -0.100000, -0.763000, -1.095800, -0.100000, -1.148900, -1.088600, -0.100000, -1.148900, -1.088600, -0.100000, -1.115900, -1.036400, -0.100000, -0.787000, -1.041700, -0.100000, -1.115900, -1.036400, -0.100000, -1.148900, -1.088600, -0.100000, -1.382600, -1.037800, -0.100000, -1.382600, -1.037800, -0.100000, -1.319300, -0.999700, -0.100000, -1.115900, -1.036400, -0.100000, -1.319300, -0.999700, -0.100000, -1.382600, -1.037800, -0.100000, -1.461100, -0.900000, -0.100000, -1.461100, -0.900000, -0.100000, -1.388900, -0.900000, -0.100000, -1.319300, -0.999700, -0.100000, -0.763000, -1.095800, -0.100000, -0.750000, -1.125000, 0.000000, -1.166700, -1.116700, 0.000000, -1.166700, -1.116700, 0.000000, -1.148900, -1.088600, -0.100000, -0.763000, -1.095800, -0.100000, -1.148900, -1.088600, -0.100000, -1.166700, -1.116700, 0.000000, -1.416700, -1.058300, 0.000000, -1.416700, -1.058300, 0.000000, -1.382600, -1.037800, -0.100000, -1.148900, -1.088600, -0.100000, -1.382600, -1.037800, -0.100000, -1.416700, -1.058300, 0.000000, -1.500000, -0.900000, 0.000000, -1.500000, -0.900000, 0.000000, -1.461100, -0.900000, -0.100000, -1.382600, -1.037800, -0.100000, -0.750000, -1.125000, 0.000000, -0.763000, -1.095800, 0.100000, -1.148900, -1.088600, 0.100000, -1.148900, -1.088600, 0.100000, -1.166700, -1.116700, 0.000000, -0.750000, -1.125000, 0.000000, -1.166700, -1.116700, 0.000000, -1.148900, -1.088600, 0.100000, -1.382600, -1.037800, 0.100000, -1.382600, -1.037800, 0.100000, -1.416700, -1.058300, 0.000000, -1.166700, -1.116700, 0.000000, -1.416700, -1.058300, 0.000000, -1.382600, -1.037800, 0.100000, -1.461100, -0.900000, 0.100000, -1.461100, -0.900000, 0.100000, -1.500000, -0.900000, 0.000000, -1.416700, -1.058300, 0.000000, -0.763000, -1.095800, 0.100000, -0.787000, -1.041700, 0.100000, -1.115900, -1.036400, 0.100000, -1.115900, -1.036400, 0.100000, -1.148900, -1.088600, 0.100000, -0.763000, -1.095800, 0.100000, -1.148900, -1.088600, 0.100000, -1.115900, -1.036400, 0.100000, -1.319300, -0.999700, 0.100000, -1.319300, -0.999700, 0.100000, -1.382600, -1.037800, 0.100000, -1.148900, -1.088600, 0.100000, -1.382600, -1.037800, 0.100000, -1.319300, -0.999700, 0.100000, -1.388900, -0.900000, 0.100000, -1.388900, -0.900000, 0.100000, -1.461100, -0.900000, 0.100000, -1.382600, -1.037800, 0.100000, -0.787000, -1.041700, 0.100000, -0.800000, -1.012500, 0.000000, -1.098100, -1.008300, 0.000000, -1.098100, -1.008300, 0.000000, -1.115900, -1.036400, 0.100000, -0.787000, -1.041700, 0.100000, -1.115900, -1.036400, 0.100000, -1.098100, -1.008300, 0.000000, -1.285200, -0.979200, 0.000000, -1.285200, -0.979200, 0.000000, -1.319300, -0.999700, 0.100000, -1.115900, -1.036400, 0.100000, -1.319300, -0.999700, 0.100000, -1.285200, -0.979200, 0.000000, -1.350000, -0.900000, 0.000000, -1.350000, -0.900000, 0.000000, -1.388900, -0.900000, 0.100000, -1.319300, -0.999700, 0.100000, -1.350000, -0.900000, 0.000000, -1.388900, -0.900000, -0.100000, -1.347500, -0.738500, -0.100000, -1.347500, -0.738500, -0.100000, -1.314800, -0.758300, 0.000000, -1.350000, -0.900000, 0.000000, -1.314800, -0.758300, 0.000000, -1.347500, -0.738500, -0.100000, -1.216700, -0.562900, -0.100000, -1.216700, -0.562900, -0.100000, -1.201900, -0.591700, 0.000000, -1.314800, -0.758300, 0.000000, -1.201900, -0.591700, 0.000000, -1.216700, -0.562900, -0.100000, -0.987000, -0.411100, -0.100000, -0.987000, -0.411100, -0.100000, -1.000000, -0.450000, 0.000000, -1.201900, -0.591700, 0.000000, -1.388900, -0.900000, -0.100000, -1.461100, -0.900000, -0.100000, -1.408100, -0.701700, -0.100000, -1.408100, -0.701700, -0.100000, -1.347500, -0.738500, -0.100000, -1.388900, -0.900000, -0.100000, -1.347500, -0.738500, -0.100000, -1.408100, -0.701700, -0.100000, -1.244400, -0.509400, -0.100000, -1.244400, -0.509400, -0.100000, -1.216700, -0.562900, -0.100000, -1.347500, -0.738500, -0.100000, -1.216700, -0.562900, -0.100000, -1.244400, -0.509400, -0.100000, -0.963000, -0.338900, -0.100000, -0.963000, -0.338900, -0.100000, -0.987000, -0.411100, -0.100000, -1.216700, -0.562900, -0.100000, -1.461100, -0.900000, -0.100000, -1.500000, -0.900000, 0.000000, -1.440700, -0.681900, 0.000000, -1.440700, -0.681900, 0.000000, -1.408100, -0.701700, -0.100000, -1.461100, -0.900000, -0.100000, -1.408100, -0.701700, -0.100000, -1.440700, -0.681900, 0.000000, -1.259300, -0.480600, 0.000000, -1.259300, -0.480600, 0.000000, -1.244400, -0.509400, -0.100000, -1.408100, -0.701700, -0.100000, -1.244400, -0.509400, -0.100000, -1.259300, -0.480600, 0.000000, -0.950000, -0.300000, 0.000000, -0.950000, -0.300000, 0.000000, -0.963000, -0.338900, -0.100000, -1.244400, -0.509400, -0.100000, -1.500000, -0.900000, 0.000000, -1.461100, -0.900000, 0.100000, -1.408100, -0.701700, 0.100000, -1.408100, -0.701700, 0.100000, -1.440700, -0.681900, 0.000000, -1.500000, -0.900000, 0.000000, -1.440700, -0.681900, 0.000000, -1.408100, -0.701700, 0.100000, -1.244400, -0.509400, 0.100000, -1.244400, -0.509400, 0.100000, -1.259300, -0.480600, 0.000000, -1.440700, -0.681900, 0.000000, -1.259300, -0.480600, 0.000000, -1.244400, -0.509400, 0.100000, -0.963000, -0.338900, 0.100000, -0.963000, -0.338900, 0.100000, -0.950000, -0.300000, 0.000000, -1.259300, -0.480600, 0.000000, -1.461100, -0.900000, 0.100000, -1.388900, -0.900000, 0.100000, -1.347500, -0.738500, 0.100000, -1.347500, -0.738500, 0.100000, -1.408100, -0.701700, 0.100000, -1.461100, -0.900000, 0.100000, -1.408100, -0.701700, 0.100000, -1.347500, -0.738500, 0.100000, -1.216700, -0.562900, 0.100000, -1.216700, -0.562900, 0.100000, -1.244400, -0.509400, 0.100000, -1.408100, -0.701700, 0.100000, -1.244400, -0.509400, 0.100000, -1.216700, -0.562900, 0.100000, -0.987000, -0.411100, 0.100000, -0.987000, -0.411100, 0.100000, -0.963000, -0.338900, 0.100000, -1.244400, -0.509400, 0.100000, -1.388900, -0.900000, 0.100000, -1.350000, -0.900000, 0.000000, -1.314800, -0.758300, 0.000000, -1.314800, -0.758300, 0.000000, -1.347500, -0.738500, 0.100000, -1.388900, -0.900000, 0.100000, -1.347500, -0.738500, 0.100000, -1.314800, -0.758300, 0.000000, -1.201900, -0.591700, 0.000000, -1.201900, -0.591700, 0.000000, -1.216700, -0.562900, 0.100000, -1.347500, -0.738500, 0.100000, -1.216700, -0.562900, 0.100000, -1.201900, -0.591700, 0.000000, -1.000000, -0.450000, 0.000000, -1.000000, -0.450000, 0.000000, -0.987000, -0.411100, 0.100000, -1.216700, -0.562900, 0.100000, 0.850000, -0.712500, 0.000000, 0.850000, -0.605600, -0.220000, 1.169800, -0.737100, -0.184600, 1.169800, -0.737100, -0.184600, 1.135200, -0.805600, 0.000000, 0.850000, -0.712500, 0.000000, 1.135200, -0.805600, 0.000000, 1.169800, -0.737100, -0.184600, 1.274700, -0.981400, -0.118800, 1.274700, -0.981400, -0.118800, 1.231500, -1.006900, 0.000000, 1.135200, -0.805600, 0.000000, 1.231500, -1.006900, 0.000000, 1.274700, -0.981400, -0.118800, 1.427800, -1.200000, -0.083300, 1.427800, -1.200000, -0.083300, 1.350000, -1.200000, 0.000000, 1.231500, -1.006900, 0.000000, 0.850000, -0.605600, -0.220000, 0.850000, -0.406900, -0.220000, 1.234000, -0.610100, -0.184600, 1.234000, -0.610100, -0.184600, 1.169800, -0.737100, -0.184600, 0.850000, -0.605600, -0.220000, 1.169800, -0.737100, -0.184600, 1.234000, -0.610100, -0.184600, 1.354900, -0.933900, -0.118800, 1.354900, -0.933900, -0.118800, 1.274700, -0.981400, -0.118800, 1.169800, -0.737100, -0.184600, 1.274700, -0.981400, -0.118800, 1.354900, -0.933900, -0.118800, 1.572200, -1.200000, -0.083300, 1.572200, -1.200000, -0.083300, 1.427800, -1.200000, -0.083300, 1.274700, -0.981400, -0.118800, 0.850000, -0.406900, -0.220000, 0.850000, -0.300000, 0.000000, 1.268500, -0.541700, 0.000000, 1.268500, -0.541700, 0.000000, 1.234000, -0.610100, -0.184600, 0.850000, -0.406900, -0.220000, 1.234000, -0.610100, -0.184600, 1.268500, -0.541700, 0.000000, 1.398100, -0.908300, 0.000000, 1.398100, -0.908300, 0.000000, 1.354900, -0.933900, -0.118800, 1.234000, -0.610100, -0.184600, 1.354900, -0.933900, -0.118800, 1.398100, -0.908300, 0.000000, 1.650000, -1.200000, 0.000000, 1.650000, -1.200000, 0.000000, 1.572200, -1.200000, -0.083300, 1.354900, -0.933900, -0.118800, 0.850000, -0.300000, 0.000000, 0.850000, -0.406900, 0.220000, 1.234000, -0.610100, 0.184600, 1.234000, -0.610100, 0.184600, 1.268500, -0.541700, 0.000000, 0.850000, -0.300000, 0.000000, 1.268500, -0.541700, 0.000000, 1.234000, -0.610100, 0.184600, 1.354900, -0.933900, 0.118800, 1.354900, -0.933900, 0.118800, 1.398100, -0.908300, 0.000000, 1.268500, -0.541700, 0.000000, 1.398100, -0.908300, 0.000000, 1.354900, -0.933900, 0.118800, 1.572200, -1.200000, 0.083300, 1.572200, -1.200000, 0.083300, 1.650000, -1.200000, 0.000000, 1.398100, -0.908300, 0.000000, 0.850000, -0.406900, 0.220000, 0.850000, -0.605600, 0.220000, 1.169800, -0.737100, 0.184600, 1.169800, -0.737100, 0.184600, 1.234000, -0.610100, 0.184600, 0.850000, -0.406900, 0.220000, 1.234000, -0.610100, 0.184600, 1.169800, -0.737100, 0.184600, 1.274700, -0.981400, 0.118800, 1.274700, -0.981400, 0.118800, 1.354900, -0.933900, 0.118800, 1.234000, -0.610100, 0.184600, 1.354900, -0.933900, 0.118800, 1.274700, -0.981400, 0.118800, 1.427800, -1.200000, 0.083300, 1.427800, -1.200000, 0.083300, 1.572200, -1.200000, 0.083300, 1.354900, -0.933900, 0.118800, 0.850000, -0.605600, 0.220000, 0.850000, -0.712500, 0.000000, 1.135200, -0.805600, 0.000000, 1.135200, -0.805600, 0.000000, 1.169800, -0.737100, 0.184600, 0.850000, -0.605600, 0.220000, 1.169800, -0.737100, 0.184600, 1.135200, -0.805600, 0.000000, 1.231500, -1.006900, 0.000000, 1.231500, -1.006900, 0.000000, 1.274700, -0.981400, 0.118800, 1.169800, -0.737100, 0.184600, 1.274700, -0.981400, 0.118800, 1.231500, -1.006900, 0.000000, 1.350000, -1.200000, 0.000000, 1.350000, -1.200000, 0.000000, 1.427800, -1.200000, 0.083300, 1.274700, -0.981400, 0.118800, 1.350000, -1.200000, 0.000000, 1.427800, -1.200000, -0.083300, 1.478900, -1.227200, -0.074700, 1.478900, -1.227200, -0.074700, 1.396300, -1.225000, 0.000000, 1.350000, -1.200000, 0.000000, 1.396300, -1.225000, 0.000000, 1.478900, -1.227200, -0.074700, 1.491200, -1.227700, -0.058600, 1.491200, -1.227700, -0.058600, 1.420400, -1.225000, 0.000000, 1.396300, -1.225000, 0.000000, 1.420400, -1.225000, 0.000000, 1.491200, -1.227700, -0.058600, 1.451900, -1.200000, -0.050000, 1.451900, -1.200000, -0.050000, 1.400000, -1.200000, 0.000000, 1.420400, -1.225000, 0.000000, 1.427800, -1.200000, -0.083300, 1.572200, -1.200000, -0.083300, 1.632200, -1.231200, -0.074700, 1.632200, -1.231200, -0.074700, 1.478900, -1.227200, -0.074700, 1.427800, -1.200000, -0.083300, 1.478900, -1.227200, -0.074700, 1.632200, -1.231200, -0.074700, 1.622700, -1.232700, -0.058600, 1.622700, -1.232700, -0.058600, 1.491200, -1.227700, -0.058600, 1.478900, -1.227200, -0.074700, 1.491200, -1.227700, -0.058600, 1.622700, -1.232700, -0.058600, 1.548100, -1.200000, -0.050000, 1.548100, -1.200000, -0.050000, 1.451900, -1.200000, -0.050000, 1.491200, -1.227700, -0.058600, 1.572200, -1.200000, -0.083300, 1.650000, -1.200000, 0.000000, 1.714800, -1.233300, 0.000000, 1.714800, -1.233300, 0.000000, 1.632200, -1.231200, -0.074700, 1.572200, -1.200000, -0.083300, 1.632200, -1.231200, -0.074700, 1.714800, -1.233300, 0.000000, 1.693500, -1.235400, 0.000000, 1.693500, -1.235400, 0.000000, 1.622700, -1.232700, -0.058600, 1.632200, -1.231200, -0.074700, 1.622700, -1.232700, -0.058600, 1.693500, -1.235400, 0.000000, 1.600000, -1.200000, 0.000000, 1.600000, -1.200000, 0.000000, 1.548100, -1.200000, -0.050000, 1.622700, -1.232700, -0.058600, 1.650000, -1.200000, 0.000000, 1.572200, -1.200000, 0.083300, 1.632200, -1.231200, 0.074700, 1.632200, -1.231200, 0.074700, 1.714800, -1.233300, 0.000000, 1.650000, -1.200000, 0.000000, 1.714800, -1.233300, 0.000000, 1.632200, -1.231200, 0.074700, 1.622700, -1.232700, 0.058600, 1.622700, -1.232700, 0.058600, 1.693500, -1.235400, 0.000000, 1.714800, -1.233300, 0.000000, 1.693500, -1.235400, 0.000000, 1.622700, -1.232700, 0.058600, 1.548100, -1.200000, 0.050000, 1.548100, -1.200000, 0.050000, 1.600000, -1.200000, 0.000000, 1.693500, -1.235400, 0.000000, 1.572200, -1.200000, 0.083300, 1.427800, -1.200000, 0.083300, 1.478900, -1.227200, 0.074700, 1.478900, -1.227200, 0.074700, 1.632200, -1.231200, 0.074700, 1.572200, -1.200000, 0.083300, 1.632200, -1.231200, 0.074700, 1.478900, -1.227200, 0.074700, 1.491200, -1.227700, 0.058600, 1.491200, -1.227700, 0.058600, 1.622700, -1.232700, 0.058600, 1.632200, -1.231200, 0.074700, 1.622700, -1.232700, 0.058600, 1.491200, -1.227700, 0.058600, 1.451900, -1.200000, 0.050000, 1.451900, -1.200000, 0.050000, 1.548100, -1.200000, 0.050000, 1.622700, -1.232700, 0.058600, 1.427800, -1.200000, 0.083300, 1.350000, -1.200000, 0.000000, 1.396300, -1.225000, 0.000000, 1.396300, -1.225000, 0.000000, 1.478900, -1.227200, 0.074700, 1.427800, -1.200000, 0.083300, 1.478900, -1.227200, 0.074700, 1.396300, -1.225000, 0.000000, 1.420400, -1.225000, 0.000000, 1.420400, -1.225000, 0.000000, 1.491200, -1.227700, 0.058600, 1.478900, -1.227200, 0.074700, 1.491200, -1.227700, 0.058600, 1.420400, -1.225000, 0.000000, 1.400000, -1.200000, 0.000000, 1.400000, -1.200000, 0.000000, 1.451900, -1.200000, 0.050000, 1.491200, -1.227700, 0.058600, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, 0.157100, -1.533300, -0.092400, 0.157100, -1.533300, -0.092400, 0.181500, -1.533300, 0.000000, 0.000000, -1.575000, 0.000000, 0.181500, -1.533300, 0.000000, 0.157100, -1.533300, -0.092400, 0.102600, -1.441700, -0.060300, 0.102600, -1.441700, -0.060300, 0.118500, -1.441700, 0.000000, 0.181500, -1.533300, 0.000000, 0.118500, -1.441700, 0.000000, 0.102600, -1.441700, -0.060300, 0.086500, -1.350000, -0.050800, 0.086500, -1.350000, -0.050800, 0.100000, -1.350000, 0.000000, 0.118500, -1.441700, 0.000000, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, 0.092400, -1.533300, -0.157100, 0.092400, -1.533300, -0.157100, 0.157100, -1.533300, -0.092400, 0.000000, -1.575000, 0.000000, 0.157100, -1.533300, -0.092400, 0.092400, -1.533300, -0.157100, 0.060300, -1.441700, -0.102600, 0.060300, -1.441700, -0.102600, 0.102600, -1.441700, -0.060300, 0.157100, -1.533300, -0.092400, 0.102600, -1.441700, -0.060300, 0.060300, -1.441700, -0.102600, 0.050800, -1.350000, -0.086500, 0.050800, -1.350000, -0.086500, 0.086500, -1.350000, -0.050800, 0.102600, -1.441700, -0.060300, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, 0.000000, -1.533300, -0.181500, 0.000000, -1.533300, -0.181500, 0.092400, -1.533300, -0.157100, 0.000000, -1.575000, 0.000000, 0.092400, -1.533300, -0.157100, 0.000000, -1.533300, -0.181500, 0.000000, -1.441700, -0.118500, 0.000000, -1.441700, -0.118500, 0.060300, -1.441700, -0.102600, 0.092400, -1.533300, -0.157100, 0.060300, -1.441700, -0.102600, 0.000000, -1.441700, -0.118500, 0.000000, -1.350000, -0.100000, 0.000000, -1.350000, -0.100000, 0.050800, -1.350000, -0.086500, 0.060300, -1.441700, -0.102600, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, -0.092400, -1.533300, -0.157100, -0.092400, -1.533300, -0.157100, 0.000000, -1.533300, -0.181500, 0.000000, -1.575000, 0.000000, 0.000000, -1.533300, -0.181500, -0.092400, -1.533300, -0.157100, -0.060300, -1.441700, -0.102600, -0.060300, -1.441700, -0.102600, 0.000000, -1.441700, -0.118500, 0.000000, -1.533300, -0.181500, 0.000000, -1.441700, -0.118500, -0.060300, -1.441700, -0.102600, -0.050800, -1.350000, -0.086500, -0.050800, -1.350000, -0.086500, 0.000000, -1.350000, -0.100000, 0.000000, -1.441700, -0.118500, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, -0.157100, -1.533300, -0.092400, -0.157100, -1.533300, -0.092400, -0.092400, -1.533300, -0.157100, 0.000000, -1.575000, 0.000000, -0.092400, -1.533300, -0.157100, -0.157100, -1.533300, -0.092400, -0.102600, -1.441700, -0.060300, -0.102600, -1.441700, -0.060300, -0.060300, -1.441700, -0.102600, -0.092400, -1.533300, -0.157100, -0.060300, -1.441700, -0.102600, -0.102600, -1.441700, -0.060300, -0.086500, -1.350000, -0.050800, -0.086500, -1.350000, -0.050800, -0.050800, -1.350000, -0.086500, -0.060300, -1.441700, -0.102600, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, -0.181500, -1.533300, 0.000000, -0.181500, -1.533300, 0.000000, -0.157100, -1.533300, -0.092400, 0.000000, -1.575000, 0.000000, -0.157100, -1.533300, -0.092400, -0.181500, -1.533300, 0.000000, -0.118500, -1.441700, 0.000000, -0.118500, -1.441700, 0.000000, -0.102600, -1.441700, -0.060300, -0.157100, -1.533300, -0.092400, -0.102600, -1.441700, -0.060300, -0.118500, -1.441700, 0.000000, -0.100000, -1.350000, 0.000000, -0.100000, -1.350000, 0.000000, -0.086500, -1.350000, -0.050800, -0.102600, -1.441700, -0.060300, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, -0.157100, -1.533300, 0.092400, -0.157100, -1.533300, 0.092400, -0.181500, -1.533300, 0.000000, 0.000000, -1.575000, 0.000000, -0.181500, -1.533300, 0.000000, -0.157100, -1.533300, 0.092400, -0.102600, -1.441700, 0.060300, -0.102600, -1.441700, 0.060300, -0.118500, -1.441700, 0.000000, -0.181500, -1.533300, 0.000000, -0.118500, -1.441700, 0.000000, -0.102600, -1.441700, 0.060300, -0.086500, -1.350000, 0.050800, -0.086500, -1.350000, 0.050800, -0.100000, -1.350000, 0.000000, -0.118500, -1.441700, 0.000000, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, -0.092400, -1.533300, 0.157100, -0.092400, -1.533300, 0.157100, -0.157100, -1.533300, 0.092400, 0.000000, -1.575000, 0.000000, -0.157100, -1.533300, 0.092400, -0.092400, -1.533300, 0.157100, -0.060300, -1.441700, 0.102600, -0.060300, -1.441700, 0.102600, -0.102600, -1.441700, 0.060300, -0.157100, -1.533300, 0.092400, -0.102600, -1.441700, 0.060300, -0.060300, -1.441700, 0.102600, -0.050800, -1.350000, 0.086500, -0.050800, -1.350000, 0.086500, -0.086500, -1.350000, 0.050800, -0.102600, -1.441700, 0.060300, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, 0.000000, -1.533300, 0.181500, 0.000000, -1.533300, 0.181500, -0.092400, -1.533300, 0.157100, 0.000000, -1.575000, 0.000000, -0.092400, -1.533300, 0.157100, 0.000000, -1.533300, 0.181500, 0.000000, -1.441700, 0.118500, 0.000000, -1.441700, 0.118500, -0.060300, -1.441700, 0.102600, -0.092400, -1.533300, 0.157100, -0.060300, -1.441700, 0.102600, 0.000000, -1.441700, 0.118500, 0.000000, -1.350000, 0.100000, 0.000000, -1.350000, 0.100000, -0.050800, -1.350000, 0.086500, -0.060300, -1.441700, 0.102600, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, 0.092400, -1.533300, 0.157100, 0.092400, -1.533300, 0.157100, 0.000000, -1.533300, 0.181500, 0.000000, -1.575000, 0.000000, 0.000000, -1.533300, 0.181500, 0.092400, -1.533300, 0.157100, 0.060300, -1.441700, 0.102600, 0.060300, -1.441700, 0.102600, 0.000000, -1.441700, 0.118500, 0.000000, -1.533300, 0.181500, 0.000000, -1.441700, 0.118500, 0.060300, -1.441700, 0.102600, 0.050800, -1.350000, 0.086500, 0.050800, -1.350000, 0.086500, 0.000000, -1.350000, 0.100000, 0.000000, -1.441700, 0.118500, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, 0.157100, -1.533300, 0.092400, 0.157100, -1.533300, 0.092400, 0.092400, -1.533300, 0.157100, 0.000000, -1.575000, 0.000000, 0.092400, -1.533300, 0.157100, 0.157100, -1.533300, 0.092400, 0.102600, -1.441700, 0.060300, 0.102600, -1.441700, 0.060300, 0.060300, -1.441700, 0.102600, 0.092400, -1.533300, 0.157100, 0.060300, -1.441700, 0.102600, 0.102600, -1.441700, 0.060300, 0.086500, -1.350000, 0.050800, 0.086500, -1.350000, 0.050800, 0.050800, -1.350000, 0.086500, 0.060300, -1.441700, 0.102600, 0.000000, -1.575000, 0.000000, 0.000000, -1.575000, 0.000000, 0.181500, -1.533300, 0.000000, 0.181500, -1.533300, 0.000000, 0.157100, -1.533300, 0.092400, 0.000000, -1.575000, 0.000000, 0.157100, -1.533300, 0.092400, 0.181500, -1.533300, 0.000000, 0.118500, -1.441700, 0.000000, 0.118500, -1.441700, 0.000000, 0.102600, -1.441700, 0.060300, 0.157100, -1.533300, 0.092400, 0.102600, -1.441700, 0.060300, 0.118500, -1.441700, 0.000000, 0.100000, -1.350000, 0.000000, 0.100000, -1.350000, 0.000000, 0.086500, -1.350000, 0.050800, 0.102600, -1.441700, 0.060300, 0.100000, -1.350000, 0.000000, 0.086500, -1.350000, -0.050800, 0.248300, -1.294400, -0.145900, 0.248300, -1.294400, -0.145900, 0.287000, -1.294400, 0.000000, 0.100000, -1.350000, 0.000000, 0.287000, -1.294400, 0.000000, 0.248300, -1.294400, -0.145900, 0.458200, -1.255600, -0.269100, 0.458200, -1.255600, -0.269100, 0.529600, -1.255600, 0.000000, 0.287000, -1.294400, 0.000000, 0.529600, -1.255600, 0.000000, 0.458200, -1.255600, -0.269100, 0.562400, -1.200000, -0.330300, 0.562400, -1.200000, -0.330300, 0.650000, -1.200000, 0.000000, 0.529600, -1.255600, 0.000000, 0.086500, -1.350000, -0.050800, 0.050800, -1.350000, -0.086500, 0.145900, -1.294400, -0.248300, 0.145900, -1.294400, -0.248300, 0.248300, -1.294400, -0.145900, 0.086500, -1.350000, -0.050800, 0.248300, -1.294400, -0.145900, 0.145900, -1.294400, -0.248300, 0.269100, -1.255600, -0.458200, 0.269100, -1.255600, -0.458200, 0.458200, -1.255600, -0.269100, 0.248300, -1.294400, -0.145900, 0.458200, -1.255600, -0.269100, 0.269100, -1.255600, -0.458200, 0.330300, -1.200000, -0.562400, 0.330300, -1.200000, -0.562400, 0.562400, -1.200000, -0.330300, 0.458200, -1.255600, -0.269100, 0.050800, -1.350000, -0.086500, 0.000000, -1.350000, -0.100000, 0.000000, -1.294400, -0.287000, 0.000000, -1.294400, -0.287000, 0.145900, -1.294400, -0.248300, 0.050800, -1.350000, -0.086500, 0.145900, -1.294400, -0.248300, 0.000000, -1.294400, -0.287000, 0.000000, -1.255600, -0.529600, 0.000000, -1.255600, -0.529600, 0.269100, -1.255600, -0.458200, 0.145900, -1.294400, -0.248300, 0.269100, -1.255600, -0.458200, 0.000000, -1.255600, -0.529600, 0.000000, -1.200000, -0.650000, 0.000000, -1.200000, -0.650000, 0.330300, -1.200000, -0.562400, 0.269100, -1.255600, -0.458200, 0.000000, -1.350000, -0.100000, -0.050800, -1.350000, -0.086500, -0.145900, -1.294400, -0.248300, -0.145900, -1.294400, -0.248300, 0.000000, -1.294400, -0.287000, 0.000000, -1.350000, -0.100000, 0.000000, -1.294400, -0.287000, -0.145900, -1.294400, -0.248300, -0.269100, -1.255600, -0.458200, -0.269100, -1.255600, -0.458200, 0.000000, -1.255600, -0.529600, 0.000000, -1.294400, -0.287000, 0.000000, -1.255600, -0.529600, -0.269100, -1.255600, -0.458200, -0.330300, -1.200000, -0.562400, -0.330300, -1.200000, -0.562400, 0.000000, -1.200000, -0.650000, 0.000000, -1.255600, -0.529600, -0.050800, -1.350000, -0.086500, -0.086500, -1.350000, -0.050800, -0.248300, -1.294400, -0.145900, -0.248300, -1.294400, -0.145900, -0.145900, -1.294400, -0.248300, -0.050800, -1.350000, -0.086500, -0.145900, -1.294400, -0.248300, -0.248300, -1.294400, -0.145900, -0.458200, -1.255600, -0.269100, -0.458200, -1.255600, -0.269100, -0.269100, -1.255600, -0.458200, -0.145900, -1.294400, -0.248300, -0.269100, -1.255600, -0.458200, -0.458200, -1.255600, -0.269100, -0.562400, -1.200000, -0.330300, -0.562400, -1.200000, -0.330300, -0.330300, -1.200000, -0.562400, -0.269100, -1.255600, -0.458200, -0.086500, -1.350000, -0.050800, -0.100000, -1.350000, 0.000000, -0.287000, -1.294400, 0.000000, -0.287000, -1.294400, 0.000000, -0.248300, -1.294400, -0.145900, -0.086500, -1.350000, -0.050800, -0.248300, -1.294400, -0.145900, -0.287000, -1.294400, 0.000000, -0.529600, -1.255600, 0.000000, -0.529600, -1.255600, 0.000000, -0.458200, -1.255600, -0.269100, -0.248300, -1.294400, -0.145900, -0.458200, -1.255600, -0.269100, -0.529600, -1.255600, 0.000000, -0.650000, -1.200000, 0.000000, -0.650000, -1.200000, 0.000000, -0.562400, -1.200000, -0.330300, -0.458200, -1.255600, -0.269100, -0.100000, -1.350000, 0.000000, -0.086500, -1.350000, 0.050800, -0.248300, -1.294400, 0.145900, -0.248300, -1.294400, 0.145900, -0.287000, -1.294400, 0.000000, -0.100000, -1.350000, 0.000000, -0.287000, -1.294400, 0.000000, -0.248300, -1.294400, 0.145900, -0.458200, -1.255600, 0.269100, -0.458200, -1.255600, 0.269100, -0.529600, -1.255600, 0.000000, -0.287000, -1.294400, 0.000000, -0.529600, -1.255600, 0.000000, -0.458200, -1.255600, 0.269100, -0.562400, -1.200000, 0.330300, -0.562400, -1.200000, 0.330300, -0.650000, -1.200000, 0.000000, -0.529600, -1.255600, 0.000000, -0.086500, -1.350000, 0.050800, -0.050800, -1.350000, 0.086500, -0.145900, -1.294400, 0.248300, -0.145900, -1.294400, 0.248300, -0.248300, -1.294400, 0.145900, -0.086500, -1.350000, 0.050800, -0.248300, -1.294400, 0.145900, -0.145900, -1.294400, 0.248300, -0.269100, -1.255600, 0.458200, -0.269100, -1.255600, 0.458200, -0.458200, -1.255600, 0.269100, -0.248300, -1.294400, 0.145900, -0.458200, -1.255600, 0.269100, -0.269100, -1.255600, 0.458200, -0.330300, -1.200000, 0.562400, -0.330300, -1.200000, 0.562400, -0.562400, -1.200000, 0.330300, -0.458200, -1.255600, 0.269100, -0.050800, -1.350000, 0.086500, 0.000000, -1.350000, 0.100000, 0.000000, -1.294400, 0.287000, 0.000000, -1.294400, 0.287000, -0.145900, -1.294400, 0.248300, -0.050800, -1.350000, 0.086500, -0.145900, -1.294400, 0.248300, 0.000000, -1.294400, 0.287000, 0.000000, -1.255600, 0.529600, 0.000000, -1.255600, 0.529600, -0.269100, -1.255600, 0.458200, -0.145900, -1.294400, 0.248300, -0.269100, -1.255600, 0.458200, 0.000000, -1.255600, 0.529600, 0.000000, -1.200000, 0.650000, 0.000000, -1.200000, 0.650000, -0.330300, -1.200000, 0.562400, -0.269100, -1.255600, 0.458200, 0.000000, -1.350000, 0.100000, 0.050800, -1.350000, 0.086500, 0.145900, -1.294400, 0.248300, 0.145900, -1.294400, 0.248300, 0.000000, -1.294400, 0.287000, 0.000000, -1.350000, 0.100000, 0.000000, -1.294400, 0.287000, 0.145900, -1.294400, 0.248300, 0.269100, -1.255600, 0.458200, 0.269100, -1.255600, 0.458200, 0.000000, -1.255600, 0.529600, 0.000000, -1.294400, 0.287000, 0.000000, -1.255600, 0.529600, 0.269100, -1.255600, 0.458200, 0.330300, -1.200000, 0.562400, 0.330300, -1.200000, 0.562400, 0.000000, -1.200000, 0.650000, 0.000000, -1.255600, 0.529600, 0.050800, -1.350000, 0.086500, 0.086500, -1.350000, 0.050800, 0.248300, -1.294400, 0.145900, 0.248300, -1.294400, 0.145900, 0.145900, -1.294400, 0.248300, 0.050800, -1.350000, 0.086500, 0.145900, -1.294400, 0.248300, 0.248300, -1.294400, 0.145900, 0.458200, -1.255600, 0.269100, 0.458200, -1.255600, 0.269100, 0.269100, -1.255600, 0.458200, 0.145900, -1.294400, 0.248300, 0.269100, -1.255600, 0.458200, 0.458200, -1.255600, 0.269100, 0.562400, -1.200000, 0.330300, 0.562400, -1.200000, 0.330300, 0.330300, -1.200000, 0.562400, 0.269100, -1.255600, 0.458200, 0.086500, -1.350000, 0.050800, 0.100000, -1.350000, 0.000000, 0.287000, -1.294400, 0.000000, 0.287000, -1.294400, 0.000000, 0.248300, -1.294400, 0.145900, 0.086500, -1.350000, 0.050800, 0.248300, -1.294400, 0.145900, 0.287000, -1.294400, 0.000000, 0.529600, -1.255600, 0.000000, 0.529600, -1.255600, 0.000000, 0.458200, -1.255600, 0.269100, 0.248300, -1.294400, 0.145900, 0.458200, -1.255600, 0.269100, 0.529600, -1.255600, 0.000000, 0.650000, -1.200000, 0.000000, 0.650000, -1.200000, 0.000000, 0.562400, -1.200000, 0.330300, 0.458200, -1.255600, 0.269100];
          for (var i = 0; i < teapot.length; i += 3) {
            this._meshVertices.push(new Vec3(teapot[i] * scale, teapot[i + 1] * scale + offsetY, teapot[i + 2] * scale));
          }
          for (var _i = 0; _i < teapot.length / 3; _i++) {
            this._meshIndices.push(_i);
          }
        };
        return GeometryCreator;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggleWireframe", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toggleDepthTest", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "toggleUnlit", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "toggleRotate", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "cameraComp", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GoblinTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, sp, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      sp = module.sp;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "c0840gIfPZPZ7vnmbqqIWBa", "GoblinTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GoblinTest = exports('GoblinTest', (_dec = ccclass('GoblinTest'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GoblinTest, _Component);
        function GoblinTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "runMode", _descriptor, _assertThisInitialized(_this));
          _this.colorCount = 0;
          return _this;
        }
        var _proto = GoblinTest.prototype;
        _proto.start = function start() {};
        _proto.onChangeSkin = function onChangeSkin() {
          var skinBoy = 'goblin';
          var skinGirl = 'goblingirl';
          var skelComp = this.node.getComponent(sp.Skeleton);
          var curName = skelComp._skeleton.skin.name;
          if (curName === skinBoy) {
            skelComp.setSkin(skinGirl);
          } else {
            skelComp.setSkin(skinBoy);
          }
        };
        _proto.onChangeMode = function onChangeMode() {
          var skelComp = this.node.getComponent(sp.Skeleton);
          var skinName = skelComp._skeleton.skin.name;
          if (skelComp.isAnimationCached()) {
            skelComp.setAnimationCacheMode(sp.AnimationCacheMode.REALTIME);
            this.runMode.string = 'realtime';
          } else {
            skelComp.setAnimationCacheMode(sp.AnimationCacheMode.PRIVATE_CACHE);
            this.runMode.string = 'cache';
          }
        };
        _proto.onChangeColor = function onChangeColor() {
          var skelComp = this.node.getComponent(sp.Skeleton);
          if (this.colorCount === 0) {
            skelComp.color = new Color(255, 255, 0, 255);
          } else if (this.colorCount === 1) {
            skelComp.color = new Color(0, 0, 255, 150);
          } else {
            skelComp.color = new Color(179, 245, 170, 255);
          }
          this.colorCount++;
          this.colorCount = this.colorCount % 3;
        };
        _proto.update = function update(deltaTime) {};
        return GoblinTest;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "runMode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gold.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "9cb89iurc1Dl4w4xqSuIEHk", "gold", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var gold = exports('gold', (_dec = ccclass("gold"), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gold, _Component);
        function gold() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _this.test = 0;
          return _this;
        }
        var _proto = gold.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.onButton = function onButton() {
          this.test += 1;
          this.label.string = "" + this.test;
          if (this.test > 9) {
            this.test = 0;
          }
        }
        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return gold;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/graphics-continuous-filling.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec2, Node, Graphics, UITransform, Vec3, math, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
      Node = module.Node;
      Graphics = module.Graphics;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "027fazjnA9F8bfae44tQFpj", "graphics-continuous-filling", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var temp_vec2 = new Vec2();
      var GraphicsContinuousFilling = exports('GraphicsContinuousFilling', (_dec = ccclass('GraphicsContinuousFilling'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GraphicsContinuousFilling, _Component);
        function GraphicsContinuousFilling() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.pos = new Vec3();
          _this.worldPos = new Vec3();
          _this.graphics = null;
          _this.minX = 0;
          _this.minY = 0;
          _this.maxX = 0;
          _this.maxY = 0;
          return _this;
        }
        var _proto = GraphicsContinuousFilling.prototype;
        _proto.start = function start() {
          var _this$getComponent;
          this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.graphics = this.getComponent(Graphics);
          var trans = this.getComponent(UITransform);
          var wPos = (_this$getComponent = this.getComponent(UITransform)) == null ? void 0 : _this$getComponent.convertToWorldSpaceAR(new Vec3(), this.worldPos);
          this.minX = -trans.anchorX * trans.width + wPos.x;
          this.maxX = (1 - trans.anchorX) * trans.width + wPos.x;
          this.minY = -trans.anchorY * trans.height + wPos.y;
          this.maxY = (1 - trans.anchorY) * trans.height + wPos.y;
          this.graphics.lineWidth = 10;
        };
        _proto.onDestroy = function onDestroy() {
          this.node.off(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
        };
        _proto.onTouchStart = function onTouchStart(touch, event) {
          touch.getUILocation(temp_vec2);
          var x = math.clamp(temp_vec2.x, this.minX, this.maxX);
          var y = math.clamp(temp_vec2.y, this.minY, this.maxY);
          this.pos.set(x - this.worldPos.x, y - this.worldPos.y, 0);
        };
        _proto.onTouchMove = function onTouchMove(touch, event) {
          this.graphics.moveTo(this.pos.x, this.pos.y);
          touch.getUILocation(temp_vec2);
          var x = math.clamp(temp_vec2.x, this.minX, this.maxX);
          var y = math.clamp(temp_vec2.y, this.minY, this.maxY);
          this.pos.set(x - this.worldPos.x, y - this.worldPos.y, 0);
          this.graphics.lineTo(this.pos.x, this.pos.y);
          this.graphics.stroke();
        };
        _proto.clear = function clear() {
          this.graphics.clear();
        };
        return GraphicsContinuousFilling;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/graphics-draw-before-init.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, Graphics, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Graphics = module.Graphics;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "1d492ntcNpHzpqOcIZLVpin", "graphics-draw-before-init", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GraphicsDrawBeforeInit = exports('GraphicsDrawBeforeInit', (_dec = ccclass('GraphicsDrawBeforeInit'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GraphicsDrawBeforeInit, _Component);
        function GraphicsDrawBeforeInit() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = GraphicsDrawBeforeInit.prototype;
        _proto.start = function start() {
          var node = new Node('graphics');
          var g = node.addComponent(Graphics);
          g.clear();
          g.lineWidth = 10;
          g.fillColor.fromHEX('#ff0000');

          // rect
          g.rect(-250, 0, 200, 100);

          // round rect
          g.roundRect(50, 0, 200, 100, 20);
          g.stroke();
          g.fill();
          node.parent = this.node;
        };
        return GraphicsDrawBeforeInit;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/graphics-line-join.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Graphics, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "1c5e8plAmhLNI/zRXjnw0+i", "graphics-line-join", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LineCap = Graphics.LineCap;
      var LineJoin = Graphics.LineJoin;
      var GraphicsLineJoin = exports('GraphicsLineJoin', (_dec = ccclass('GraphicsLineJoin'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GraphicsLineJoin, _Component);
        function GraphicsLineJoin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.graphics = null;
          _this.time = 0;
          _this.radius = 100;
          return _this;
        }
        var _proto = GraphicsLineJoin.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this.graphics = this.getComponent(Graphics);
          this.graphics.lineWidth = 20;
          this.draw();
        };
        _proto.draw = function draw() {
          var graphics = this.graphics;
          graphics.clear();
          var rx = this.radius * Math.sin(this.time);
          var ry = -this.radius * Math.cos(this.time);

          // line join
          graphics.lineCap = LineCap.BUTT;
          graphics.lineJoin = LineJoin.BEVEL;
          this.drawLine(-200, 0, rx, ry);
          graphics.lineJoin = LineJoin.MITER;
          this.drawLine(0, 0, rx, ry);
          graphics.lineJoin = LineJoin.ROUND;
          this.drawLine(200, 0, rx, ry);

          // line cap
          graphics.lineJoin = LineJoin.MITER;
          graphics.lineCap = LineCap.BUTT;
          this.drawLine(0, -125, rx, ry);
          graphics.lineCap = LineCap.SQUARE;
          this.drawLine(-200, -125, rx, ry);
          graphics.lineCap = LineCap.ROUND;
          this.drawLine(200, -125, rx, ry);
        };
        _proto.drawLine = function drawLine(x, y, rx, ry) {
          var graphics = this.graphics;
          graphics.moveTo(x + rx, y + ry);
          graphics.lineTo(x, y);
          graphics.lineTo(x - rx, y + ry);
          graphics.stroke();
        };
        _proto.update = function update(dt) {
          this.time += dt * 0.5;
          this.draw();
        };
        return GraphicsLineJoin;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/graphics-mask.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Mask, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Mask = module.Mask;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "c3558UrdgNCJ4ibMKFaVL2l", "graphics-mask", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu,
        executeInEditMode = _decorator.executeInEditMode;
      var GraphicsMask = exports('GraphicsMask', (_dec = ccclass("GraphicsMask"), _dec2 = menu('UI/GraphicsMask'), _dec(_class = _dec2(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GraphicsMask, _Component);
        function GraphicsMask() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = GraphicsMask.prototype;
        _proto.start = function start() {
          this.drawArc();
        };
        _proto.drawArc = function drawArc() {
          var mask = this.getComponent(Mask);
          var g = mask.graphics;
          g.clear();
          g.lineWidth = 10;
          g.fillColor.fromHEX('#ff0000');
          g.moveTo(-80, 0);
          g.lineTo(0, -150);
          g.lineTo(80, 0);
          g.lineTo(0, 150);
          g.close();
          g.stroke();
          g.fill();
        };
        return GraphicsMask;
      }(Component)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HeroSlot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class3;
      cclegacy._RF.push({}, "57d15BvDjxLBLxQT6h/Vxab", "HeroSlot", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HeroSlot = exports('HeroSlot', (_dec = property([SpriteFrame]), _dec2 = property([SpriteFrame]), _dec3 = property([SpriteFrame]), _dec4 = property([SpriteFrame]), _dec5 = property(Label), _dec6 = property(Sprite), _dec7 = property(Sprite), _dec8 = property(Sprite), _dec9 = property(Sprite), _dec10 = property([Sprite]), ccclass(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HeroSlot, _Component);
        function HeroSlot() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sfAttributes", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sfRanks", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sfHeroes", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sfBorders", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labelLevel", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spHero", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spRank", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spAttribute", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spBorder", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spStars", _descriptor10, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = HeroSlot.prototype;
        // use this for initialization
        _proto.onLoad = function onLoad() {
          this.refresh();
          HeroSlot.num++;
        };
        _proto.refresh = function refresh() {
          var bgIdx = HeroSlot.num % this.sfBorders.length;
          var heroIdx = HeroSlot.num % this.sfHeroes.length;
          var starIdx = HeroSlot.num % this.spStars.length;
          var rankIdx = HeroSlot.num % this.sfRanks.length;
          var attIdx = HeroSlot.num % this.sfAttributes.length;
          var levelIdx = HeroSlot.num % 100;
          this.labelLevel.string = 'LV.' + levelIdx;
          this.spRank.spriteFrame = this.sfRanks[rankIdx];
          this.refreshStars(starIdx);
          this.spBorder.spriteFrame = this.sfBorders[bgIdx];
          this.spAttribute.spriteFrame = this.sfAttributes[attIdx];
          this.spHero.spriteFrame = this.sfHeroes[heroIdx];
        };
        _proto.refreshStars = function refreshStars(count) {
          for (var i = 0; i < this.spStars.length; ++i) {
            if (i <= count) this.spStars[i].enabled = true;else this.spStars[i].enabled = false;
          }
        };
        return HeroSlot;
      }(Component), _class3.num = 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sfAttributes", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfRanks", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sfHeroes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sfBorders", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labelLevel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "spHero", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "spRank", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "spAttribute", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "spBorder", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "spStars", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BackPackUI.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, BackPackUI;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      BackPackUI = module.BackPackUI;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "20a4bqYC8FOspjJHTAavIkF", "HomeUI", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HomeUI = exports('HomeUI', (_dec = property(BackPackUI), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HomeUI, _Component);
        function HomeUI() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "backPackUI", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = HomeUI.prototype;
        // use this for initialization
        _proto.onLoad = function onLoad() {
          // this.menuAnim.play('menu_reset');
        };
        _proto.start = function start() {
          this.backPackUI.init(this);
        };
        _proto.gotoShop = function gotoShop() {};
        return HomeUI;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "backPackUI", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/icu-component.ts", ['cc'], function () {
  var cclegacy, _decorator;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7a9702ZfUJLAYlcof0GxBG1", "icu-component", undefined);
      // @ts-ignore

      // import ICUType from '../core/ICUType';
      // import I18nComponent from './I18nComponent';
      // import { DateTimeFormatOptions, NumberFormatOptions, RelativeTimeFormatOptions, RelativeTimeFormatUnit } from '../core/ICUOptions';
      // import intl from '../core/IntlManager';

      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        requireComponent = _decorator.requireComponent,
        executeInEditMode = _decorator.executeInEditMode;
      // @executeInEditMode(true)
      // @requireComponent(Label)
      // export default class ICUComponent extends I18nComponent {
      //     @property({ visible: false })
      //     _icuValue = '';
      //
      //     @property
      //     set icuValue(value: string) {
      //         this._icuValue = value;
      //         this.render();
      //     }
      //
      //     get icuValue(): string {
      //         return this._icuValue;
      //     }
      //
      //     @property({ visible: false })
      //         _type: ICUType = ICUType.DateTime;
      //
      //     @property({ visible: true, type: Enum(ICUType) })
      //     set type(value: ICUType) {
      //         this._type = value;
      //     }
      //
      //     get type(): ICUType {
      //         return this._type;
      //     }
      //
      //     protected onLoad() {
      //         super.onLoad();
      //         if (this.label && !this._icuValue) {
      //             this._icuValue = this.label.string;
      //         }
      //     }
      //
      //     protected start() {
      //         this.render();
      //     }
      //
      //     public render() {
      //         super.render();
      //         if (this._icuValue.length === 0) return;
      //         let translatedString!: string;
      //         try {
      //             switch (this.type) {
      //                 case ICUType.Number:
      //                     translatedString = intl.tn(parseFloat(this.icuValue), this.numberFormatOptions);
      //                     break;
      //                 case ICUType.DateTime:
      //                     translatedString = intl.td(new Date(this.icuValue), this.dateTimeFormatOptions);
      //                     break;
      //                 case ICUType.RelativeTime:
      //                     translatedString = intl.tt(
      //                         parseFloat(this.icuValue),
      //                         this.relativeTimeUnit,
      //                         this.relativeTimeFormatOptions,
      //                     );
      //                     break;
      //                 case ICUType.List: {
      //                     const icuList = this.icuValue.split(',');
      //                     translatedString = intl.tl(icuList);
      //                     break;
      //                 }
      //                 default:
      //                     break;
      //             }
      //         } catch (e) {
      //             translatedString = this._icuValue;
      //         }
      //         if (EDITOR) {
      //             this.preview(translatedString);
      //         } else {
      //             this.label!.string = translatedString;
      //         }
      //     }
      //
      //     // ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ auto generate by script don't edit ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
      //     /************************** NumberFormatOptions **************************/
      //     @property({ visible: false })
      //         numberFormatOptions: NumberFormatOptions = { useGrouping: false };
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set numberStyle(value: string) {
      //         this.numberFormatOptions.style = value;
      //         this.render();
      //     }
      //     get numberStyle(): string {
      //         return this.numberFormatOptions.style as string;
      //     }
      //
      //     @property({
      //         type: CCString,
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set currency(value: string) {
      //         this.numberFormatOptions.currency = value;
      //         this.render();
      //     }
      //     get currency(): string {
      //         return this.numberFormatOptions.currency as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set currencySign(value: string) {
      //         this.numberFormatOptions.currencySign = value;
      //         this.render();
      //     }
      //     get currencySign(): string {
      //         return this.numberFormatOptions.currencySign as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set currencyDisplay(value: string) {
      //         this.numberFormatOptions.currencyDisplay = value;
      //         this.render();
      //     }
      //     get currencyDisplay(): string {
      //         return this.numberFormatOptions.currencyDisplay as string;
      //     }
      //
      //     @property({
      //         type: CCBoolean,
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set useGrouping(value: boolean) {
      //         this.numberFormatOptions.useGrouping = value;
      //         this.render();
      //     }
      //     get useGrouping(): boolean {
      //         return this.numberFormatOptions.useGrouping as boolean;
      //     }
      //
      //     @property({
      //         type: CCInteger,
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set minimumIntegerDigits(value: number) {
      //         this.numberFormatOptions.minimumIntegerDigits = value;
      //         this.render();
      //     }
      //     get minimumIntegerDigits(): number {
      //         return this.numberFormatOptions.minimumIntegerDigits as number;
      //     }
      //
      //     @property({
      //         type: CCInteger,
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set minimumFractionDigits(value: number) {
      //         this.numberFormatOptions.minimumFractionDigits = value;
      //         this.render();
      //     }
      //     get minimumFractionDigits(): number {
      //         return this.numberFormatOptions.minimumFractionDigits as number;
      //     }
      //
      //     @property({
      //         type: CCInteger,
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set maximumFractionDigits(value: number) {
      //         this.numberFormatOptions.maximumFractionDigits = value;
      //         this.render();
      //     }
      //     get maximumFractionDigits(): number {
      //         return this.numberFormatOptions.maximumFractionDigits as number;
      //     }
      //
      //     @property({
      //         type: CCInteger,
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set minimumSignificantDigits(value: number) {
      //         this.numberFormatOptions.minimumSignificantDigits = value;
      //         this.render();
      //     }
      //     get minimumSignificantDigits(): number {
      //         return this.numberFormatOptions.minimumSignificantDigits as number;
      //     }
      //
      //     @property({
      //         type: CCInteger,
      //         group: 'Number',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.Number;
      //         },
      //     })
      //     set maximumSignificantDigits(value: number) {
      //         this.numberFormatOptions.maximumSignificantDigits = value;
      //         this.render();
      //     }
      //     get maximumSignificantDigits(): number {
      //         return this.numberFormatOptions.maximumSignificantDigits as number;
      //     }
      //
      //     /************************** DateTimeFormatOptions **************************/
      //     @property({ visible: false })
      //         dateTimeFormatOptions: DateTimeFormatOptions = {};
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set dateTimeLocaleMatcher(value: string) {
      //         this.dateTimeFormatOptions.localeMatcher = value;
      //         this.render();
      //     }
      //     get dateTimeLocaleMatcher(): string {
      //         return this.dateTimeFormatOptions.localeMatcher as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set weekday(value: string) {
      //         this.dateTimeFormatOptions.weekday = value;
      //         this.render();
      //     }
      //     get weekday(): string {
      //         return this.dateTimeFormatOptions.weekday as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set era(value: string) {
      //         this.dateTimeFormatOptions.era = value;
      //         this.render();
      //     }
      //     get era(): string {
      //         return this.dateTimeFormatOptions.era as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set year(value: string) {
      //         this.dateTimeFormatOptions.year = value;
      //         this.render();
      //     }
      //     get year(): string {
      //         return this.dateTimeFormatOptions.year as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set month(value: string) {
      //         this.dateTimeFormatOptions.month = value;
      //         this.render();
      //     }
      //     get month(): string {
      //         return this.dateTimeFormatOptions.month as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set day(value: string) {
      //         this.dateTimeFormatOptions.day = value;
      //         this.render();
      //     }
      //     get day(): string {
      //         return this.dateTimeFormatOptions.day as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set hour(value: string) {
      //         this.dateTimeFormatOptions.hour = value;
      //         this.render();
      //     }
      //     get hour(): string {
      //         return this.dateTimeFormatOptions.hour as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set minute(value: string) {
      //         this.dateTimeFormatOptions.minute = value;
      //         this.render();
      //     }
      //     get minute(): string {
      //         return this.dateTimeFormatOptions.minute as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set second(value: string) {
      //         this.dateTimeFormatOptions.second = value;
      //         this.render();
      //     }
      //     get second(): string {
      //         return this.dateTimeFormatOptions.second as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set timeZoneName(value: string) {
      //         this.dateTimeFormatOptions.timeZoneName = value;
      //         this.render();
      //     }
      //     get timeZoneName(): string {
      //         return this.dateTimeFormatOptions.timeZoneName as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set formatMatcher(value: string) {
      //         this.dateTimeFormatOptions.formatMatcher = value;
      //         this.render();
      //     }
      //     get formatMatcher(): string {
      //         return this.dateTimeFormatOptions.formatMatcher as string;
      //     }
      //
      //     @property({
      //         type: CCBoolean,
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set hour12(value: boolean) {
      //         this.dateTimeFormatOptions.hour12 = value;
      //         this.render();
      //     }
      //     get hour12(): boolean {
      //         return this.dateTimeFormatOptions.hour12 as boolean;
      //     }
      //
      //     @property({
      //         type: CCString,
      //         group: 'DateTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.DateTime;
      //         },
      //     })
      //     set timeZone(value: string) {
      //         this.dateTimeFormatOptions.timeZone = value;
      //         this.render();
      //     }
      //     get timeZone(): string {
      //         return this.dateTimeFormatOptions.timeZone as string;
      //     }
      //
      //     /************************** RelativeTimeOptions **************************/
      //     @property({ visible: false })
      //         relativeTimeFormatOptions: RelativeTimeFormatOptions = {};
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'RelativeTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.RelativeTime;
      //         },
      //     })
      //     set relativeTimeLocaleMatcher(value: string) {
      //         this.relativeTimeFormatOptions.localeMatcher = value;
      //         this.render();
      //     }
      //     get relativeTimeLocaleMatcher(): string {
      //         return this.relativeTimeFormatOptions.localeMatcher as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'RelativeTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.RelativeTime;
      //         },
      //     })
      //     set numeric(value: string) {
      //         this.relativeTimeFormatOptions.numeric = value;
      //         this.render();
      //     }
      //     get numeric(): string {
      //         return this.relativeTimeFormatOptions.numeric as string;
      //     }
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'RelativeTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.RelativeTime;
      //         },
      //     })
      //     set relativeTimeStyle(value: string) {
      //         this.relativeTimeFormatOptions.style = value;
      //         this.render();
      //     }
      //     get relativeTimeStyle(): string {
      //         return this.relativeTimeFormatOptions.style as string;
      //     }
      //
      //     @property({ visible: false })
      //         _relativeTimeUnit: RelativeTimeFormatUnit = 'second';
      //
      //     @property({
      //         type: Enum(VirtualEnum),
      //         group: 'RelativeTime',
      //         visible(this: ICUComponent) {
      //             return this.type === ICUType.RelativeTime;
      //         },
      //     })
      //     set relativeTimeUnit(value: string) {
      //         this._relativeTimeUnit = value;
      //         this.render();
      //     }
      //     get relativeTimeUnit(): string {
      //         return this._relativeTimeUnit;
      //     }
      //
      //     // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ auto generate by script don't edit ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
      // }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/icu-options.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "dc153GItvdCNIAlIBY8vQ+M", "icu-options", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/icu-type.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e5dc4ljkiFFpI9LqK8hBCPl", "icu-type", undefined);
      /**
       * Intl formatting
       */
      var ICUType = exports('default', /*#__PURE__*/function (ICUType) {
        ICUType[ICUType["DateTime"] = 0] = "DateTime";
        ICUType[ICUType["Number"] = 1] = "Number";
        ICUType[ICUType["List"] = 2] = "List";
        ICUType[ICUType["RelativeTime"] = 3] = "RelativeTime";
        return ICUType;
      }(ICUType || {}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/instanced-color.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Color, MeshRenderer, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "cb4458YfHxLYJuKZiHvk9m8", "instanced-color", undefined);
      var ccclass = _decorator.ccclass;
      var _color = new Color();
      var _data = new Float32Array(4);
      var InstancedColor = exports('InstancedColor', (_dec = ccclass('InstancedColor'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InstancedColor, _Component);
        function InstancedColor() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._models = [];
          return _this;
        }
        var _proto = InstancedColor.prototype;
        _proto.start = function start() {
          this._models = this.node.getComponentsInChildren(MeshRenderer);
        };
        _proto.update = function update(deltaTime) {
          var models = this._models;
          var len = models.length;
          for (var i = 0; i < len; i++) {
            var model = models[i];
            Color.toArray(_data, _color.fromHSV((model.node.position.y + 1) * 0.5, 0.5, 1));
            model.setInstancedAttribute('a_color_instanced', _data);
          }
        };
        return InstancedColor;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/instanced-skinning.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './unlit-quad.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, Texture2D, Node, director, gfx, instantiate, SkeletalAnimationComponent, Component, UnlitQuadComponent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Texture2D = module.Texture2D;
      Node = module.Node;
      director = module.director;
      gfx = module.gfx;
      instantiate = module.instantiate;
      SkeletalAnimationComponent = module.SkeletalAnimationComponent;
      Component = module.Component;
    }, function (module) {
      UnlitQuadComponent = module.UnlitQuadComponent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "68c59n+01ZPy5jl1xY5mn38", "instanced-skinning", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var InstancedSkinning = exports('InstancedSkinning', (_dec = ccclass('InstancedSkinning'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property([Texture2D]), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InstancedSkinning, _Component);
        function InstancedSkinning() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "baseline", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "testgroup", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labelImages", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "maxGroupCount", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "baselineVisible", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_groupCount", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "groupPerColumn", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "warningSign", _descriptor8, _assertThisInitialized(_this));
          _this._baselineNode = null;
          _this._testNodes = [];
          _this._nameLabels = [];
          return _this;
        }
        var _proto = InstancedSkinning.prototype;
        _proto.start = function start() {
          // clamp the initial count if instancing is not supported
          if (!director.root.device.hasFeature(gfx.Feature.INSTANCED_ARRAYS)) {
            this._groupCount = Math.min(this._groupCount, 1);
            if (this.warningSign) {
              this.warningSign.active = true;
            }
          }
          this._baselineNode = this._initGroup('Baseline', this.baseline, 0);
          this._updateGroups();
          this._baselineNode.active = this.baselineVisible;
        };
        _proto.toggleBaselineGroup = function toggleBaselineGroup(e) {
          this._baselineNode.active = e.isChecked;
        };
        _proto.toggleAnimNames = function toggleAnimNames(e) {
          for (var i = 0; i < this._nameLabels.length; i++) {
            this._nameLabels[i].active = e.isChecked;
          }
        };
        _proto.setGroups = function setGroups(e) {
          this.groupCount = Math.floor(e.progress * this.maxGroupCount);
        };
        _proto._updateGroups = function _updateGroups() {
          for (var i = 0; i < this._groupCount; i++) {
            if (this._testNodes[i]) {
              this._testNodes[i].active = true;
            } else {
              this._testNodes.push(this._initGroup('TestGroup', this.testgroup, 5 * (i + 1)));
            }
          }
          for (var _i = this._groupCount; _i < this._testNodes.length; _i++) {
            this._testNodes[_i].active = false;
          }
        };
        _proto._initGroup = function _initGroup(name, prefab, posZ) {
          var len = this.labelImages.length;
          var group = new Node(name);
          group.parent = this.node.scene;
          for (var i = 0; i < len; i++) {
            var posX = Math.floor(posZ / this.groupPerColumn) * 30 + i * 3;
            var inst = instantiate(prefab);
            inst.setPosition(posX, 0, posZ % this.groupPerColumn);
            inst.parent = group;
            var label = inst.getChildByName('Label').getComponent(UnlitQuadComponent);
            label.texture = this.labelImages[i];
            this._nameLabels.push(label.node);
            var animComp = inst.getChildByName('Model').getComponent(SkeletalAnimationComponent);
            var clipName = inst.name = animComp.clips[i].name;
            animComp.play(clipName);
          }
          return group;
        };
        _createClass(InstancedSkinning, [{
          key: "groupCount",
          get: function get() {
            return this._groupCount;
          },
          set: function set(val) {
            this._groupCount = val;
            this._updateGroups();
          }
        }]);
        return InstancedSkinning;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseline", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "testgroup", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelImages", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "maxGroupCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "baselineVisible", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_groupCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "groupPerColumn", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "groupCount", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "groupCount"), _class2.prototype), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "warningSign", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IntersectRayTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Prefab, Camera, geometry, Node, instantiate, MeshRenderer, input, Input, Vec3, gfx, Vec2, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Prefab = module.Prefab;
      Camera = module.Camera;
      geometry = module.geometry;
      Node = module.Node;
      instantiate = module.instantiate;
      MeshRenderer = module.MeshRenderer;
      input = module.input;
      Input = module.Input;
      Vec3 = module.Vec3;
      gfx = module.gfx;
      Vec2 = module.Vec2;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "107d8RVVo1LYoC6nEcHgFgp", "IntersectRayTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      // const { Model } = renderer.scene

      var map = {};
      var IntersectRayTest = exports('IntersectRayTest', (_dec = ccclass('IntersectRayTest'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Camera
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(IntersectRayTest, _Component);
        function IntersectRayTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tips", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "point", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mainCamera", _descriptor3, _assertThisInitialized(_this));
          _this._ray = new geometry.Ray();
          _this._modelComps = [];
          _this._container = void 0;
          _this._points = [];
          return _this;
        }
        var _proto = IntersectRayTest.prototype;
        _proto.start = function start() {
          this._container = new Node('_TEST_');
          this.node.scene.addChild(this._container);
          this._points.push(instantiate(this.point));
          this._points.push(instantiate(this.point));
          this._points.push(instantiate(this.point));
          this._container.addChild(this._points[0]);
          this._container.addChild(this._points[1]);
          this._container.addChild(this._points[2]);
          this._points[0].active = false;
          this._points[1].active = false;
          this._points[2].active = false;
          this._modelComps = this.getComponentsInChildren(MeshRenderer);
        };
        _proto.onEnable = function onEnable() {
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onDisable = function onDisable() {
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          var touch = event.touch;
          this._points[0].active = false;
          this._points[1].active = false;
          this._points[2].active = false;
          var loc = touch.getLocation();
          this.mainCamera.screenPointToRay(loc.x, loc.y, this._ray);
          for (var i = 0; i < this._modelComps.length; i++) {
            var mo = this._modelComps[i].model;
            var me = this._modelComps[i].mesh;
            var opt = {
              'mode': geometry.ERaycastMode.CLOSEST,
              'distance': Infinity,
              'result': [],
              'subIndices': [],
              'doubleSided': false
            };
            var dis = geometry.intersect.rayModel(this._ray, mo, opt);
            if (dis) {
              console.log(mo.node.name, dis);
              if (mo.node.name == 'Cube') {
                map['Cube'] = dis;
              } else if (mo.node.name == 'Cube-non-uniform-scaled') {
                map['Cube-non-uniform-scaled'] = dis;
              }
              var r_cube = map['Cube'];
              var r_cube_nus = map['Cube-non-uniform-scaled'];
              if (r_cube && r_cube_nus) this.testEquals(r_cube, r_cube_nus, 4);
              var r = opt.result;
              var s = opt.subIndices;

              // test dis is equals result[0]
              this.testEquals(dis, r[0].distance, 0);
              if (me.subMeshCount == 1) {
                var vertex = new Vec3();
                var pos = me.renderingSubMeshes[0].geometricInfo.positions;
                var posIndex = r[0].vertexIndex0 * 3;
                vertex.set(pos[posIndex], pos[posIndex + 1], pos[posIndex + 2]);
                Vec3.transformMat4(vertex, vertex, mo.node.worldMatrix);
                this._points[0].setWorldPosition(vertex);
                posIndex = r[0].vertexIndex1 * 3;
                vertex.set(pos[posIndex], pos[posIndex + 1], pos[posIndex + 2]);
                Vec3.transformMat4(vertex, vertex, mo.node.worldMatrix);
                this._points[1].setWorldPosition(vertex);
                posIndex = r[0].vertexIndex2 * 3;
                vertex.set(pos[posIndex], pos[posIndex + 1], pos[posIndex + 2]);
                Vec3.transformMat4(vertex, vertex, mo.node.worldMatrix);
                this._points[2].setWorldPosition(vertex);
                this._points[0].active = true;
                this._points[1].active = true;
                this._points[2].active = true;

                /**GET UV  */
                var tex_coord = me.readAttribute(s[0], gfx.AttributeName.ATTR_TEX_COORD);
                if (tex_coord) {
                  var uv = new Vec2();
                  var uvIndex = r[0].vertexIndex0 * 2;
                  uv.set(tex_coord[uvIndex], tex_coord[uvIndex + 1]);
                  console.log(JSON.stringify(uv));
                  uvIndex = r[0].vertexIndex1 * 2;
                  uv.set(tex_coord[uvIndex], tex_coord[uvIndex + 1]);
                  console.log(JSON.stringify(uv));
                  uvIndex = r[0].vertexIndex2 * 2;
                  uv.set(tex_coord[uvIndex], tex_coord[uvIndex + 1]);
                  console.log(JSON.stringify(uv));
                }
              } else {
                var hitPoint = new Vec3();
                this._ray.computeHit(hitPoint, r[0].distance);
                this._points[0].setWorldPosition(hitPoint);
                this._points[0].active = true;
              }
            }
          }
        };
        _proto.testEquals = function testEquals(a, b, precision) {
          if (Math.abs(a - b) > precision) {
            this.tips.string = "请建立 issue 并截图。" + ("Math.abs(" + a.toPrecision(3) + " - " + b.toPrecision(3) + ") > " + precision);
            this.tips.color = Color.RED;
          }
        };
        return IntersectRayTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "point", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mainCamera", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Intl.PluralRules.ts", ['cc', './polyfill.mjs_cjs=&original=.js'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, null],
    execute: function () {
      cclegacy._RF.push({}, "c9594RdIOFIPIqnCMoH103U", "Intl.PluralRules", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/keyboard-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Node, sys, input, Input, Color, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      input = module.input;
      Input = module.Input;
      Color = module.Color;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "3122c1K7LxOX4ANwtri6+eN", "keyboard-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var keyCode2KeyName = {
        0: "none",
        6: "back",
        8: "backspace",
        9: "tab",
        13: "enter",
        16: "shiftLeft",
        17: "ctrlLeft",
        18: "altLeft",
        19: "pause",
        20: "capslock",
        27: "escape",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        41: "select",
        45: "insert",
        46: "Delete",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        96: "num0",
        97: "num1",
        98: "num2",
        99: "num3",
        100: "num4",
        101: "num5",
        102: "num6",
        103: "num7",
        104: "num8",
        105: "num9",
        106: "asterisk",
        107: "plus",
        109: "minus",
        110: "numdel",
        111: "numslash",
        112: "f1",
        113: "f2",
        114: "f3",
        115: "f4",
        116: "f5",
        117: "f6",
        118: "f7",
        119: "f8",
        120: "f9",
        121: "f10",
        122: "f11",
        123: "f12",
        144: "numlock",
        145: "scrolllock",
        186: "semicolon",
        187: "equal",
        188: "comma",
        189: "dash",
        190: "period",
        191: "forwardslash",
        192: "grave",
        219: "openbracket",
        220: "backslash",
        221: "closebracket",
        222: "quote",
        1000: "dpadLeft",
        1001: "dpadRight",
        1003: "dpadUp",
        1004: "dpadDown",
        1005: "dpadCenter",
        // supported on v3.3
        2000: "shiftRight",
        2001: "ctrlRight",
        2002: "altRight",
        2003: "numEnter"
      };
      var KeyboardEvent = exports('KeyboardEvent', (_dec = ccclass('KeyboardEvent'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(KeyboardEvent, _Component);
        function KeyboardEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._keyNode2TimeoutId = new WeakMap();
          _initializerDefineProperty(_this, "noSupport", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = KeyboardEvent.prototype;
        _proto.onLoad = function onLoad() {
          if (sys.platform === sys.Platform.WIN32 || sys.platform === sys.Platform.MACOS || sys.platform === sys.Platform.DESKTOP_BROWSER || sys.platform === sys.Platform.WECHAT_GAME && !sys.isMobile || sys.platform === sys.Platform.ANDROID && sys.hasFeature(sys.Feature.HPE)) {
            this.noSupport.active = false;
          } else {
            this.noSupport.active = true;
            return;
          }
          this.registerEvent();
        };
        _proto.onDestroy = function onDestroy() {
          this.unregisterEvent();
        };
        _proto.registerEvent = function registerEvent() {
          input.on(Input.EventType.KEY_DOWN, this.onKeyboardDown, this);
          input.on(Input.EventType.KEY_PRESSING, this.onKeyboardPressing, this);
          input.on(Input.EventType.KEY_UP, this.onKeyboardUp, this);
        };
        _proto.unregisterEvent = function unregisterEvent() {
          input.off(Input.EventType.KEY_DOWN, this.onKeyboardDown, this);
          input.off(Input.EventType.KEY_PRESSING, this.onKeyboardPressing, this);
          input.off(Input.EventType.KEY_UP, this.onKeyboardUp, this);
        };
        _proto.onKeyboardDown = function onKeyboardDown(event) {
          var keyCode = event.keyCode;
          var keyName = keyCode2KeyName[keyCode];
          console.log('key down: ', keyName);
          var keyNode = this.getChildRecursively(this.node, keyName);
          if (keyNode) {
            this.showKeyNodeWithColor(keyNode, Color.RED);
          }
        };
        _proto.onKeyboardPressing = function onKeyboardPressing(event) {
          var keyCode = event.keyCode;
          var keyName = keyCode2KeyName[keyCode];
          console.log('key down: ', keyName);
          var keyNode = this.getChildRecursively(this.node, keyName);
          if (keyNode) {
            this.showKeyNodeWithColor(keyNode, Color.GREEN);
          }
        };
        _proto.onKeyboardUp = function onKeyboardUp(event) {
          var keyCode = event.keyCode;
          var keyName = keyCode2KeyName[keyCode];
          console.log('key up: ', keyName);
          var keyNode = this.getChildRecursively(this.node, keyName);
          if (keyNode) {
            this.showKeyNodeWithColor(keyNode, Color.BLUE);
          }
        };
        _proto.getChildRecursively = function getChildRecursively(currentNode, name) {
          var childs = currentNode.children;
          for (var _iterator = _createForOfIteratorHelperLoose(childs), _step; !(_step = _iterator()).done;) {
            var child = _step.value;
            if (child.name === name) {
              return child;
            } else {
              var result = this.getChildRecursively(child, name);
              if (result) {
                return result;
              }
            }
          }
          return null;
        };
        _proto.showKeyNodeWithColor = function showKeyNodeWithColor(node, color) {
          var timeoutId = this._keyNode2TimeoutId.get(node);
          if (timeoutId) {
            clearTimeout(timeoutId);
          }
          node.getComponent(Sprite).color = color;
          node.active = true;
          timeoutId = setTimeout(function () {
            node.active = false;
          }, 200);
          this._keyNode2TimeoutId.set(node, timeoutId);
        };
        return KeyboardEvent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "noSupport", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/l10n-component.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './env'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _createClass, cclegacy, _decorator, Label, Component, EDITOR;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      EDITOR = module.EDITOR;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2;
      cclegacy._RF.push({}, "64a56e3cKhJIYlOsrVQprpv", "l10n-component", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        disallowMultiple = _decorator.disallowMultiple,
        requireComponent = _decorator.requireComponent,
        menu = _decorator.menu;
      var L10nComponent = exports('default', (_dec = ccclass('L10nComponent'), _dec2 = requireComponent(Label), _dec3 = disallowMultiple(), _dec4 = menu('hidden:LocalizationEditor/L10nComponent'), _dec5 = property({
        readonly: true
      }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(L10nComponent, _Component);
        function L10nComponent() {
          var _this;
          _this = _Component.call(this) || this;
          _this.label = undefined;
          return _this;
        }
        var _proto = L10nComponent.prototype;
        _proto.onLoad = function onLoad() {
          this.label = this.node.getComponent(Label);
        };
        _proto.start = function start() {
          this.render();
        };
        _proto.render = function render() {};
        _proto.preview = function preview(value) {
          if (this.label && EDITOR) {
            var originalString = this.label.string;
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            this.label._string = value;
            this.label.updateRenderData(true);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            cce.Engine.repaintInEditMode();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            this.label._string = originalString;
          }
        };
        _createClass(L10nComponent, [{
          key: "string",
          get: function get() {
            var _this$label;
            return ((_this$label = this.label) == null ? void 0 : _this$label.string) || '';
          }
        }]);
        return L10nComponent;
      }(Component), _applyDecoratedDescriptor(_class2.prototype, "string", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "string"), _class2.prototype), _class2)) || _class) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/l10n-label.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './l10n-manager.ts', './l10n-component.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCInteger, l10n, L10nComponent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
    }, function (module) {
      l10n = module.default;
    }, function (module) {
      L10nComponent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "30d83qzRfZHLYMFn4KA9PG4", "l10n-label", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        menu = _decorator.menu;
      var L10nLabel = exports('default', (_dec = ccclass('L10nLabel'), _dec2 = executeInEditMode(true), _dec3 = menu('LocalizationEditor/L10nLabel'), _dec4 = property({
        visible: false
      }), _dec5 = property({
        visible: true
      }), _dec6 = property({
        visible: false
      }), _dec7 = property({
        type: CCInteger,
        visible: true
      }), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = /*#__PURE__*/function (_L10nComponent) {
        _inheritsLoose(L10nLabel, _L10nComponent);
        function L10nLabel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _L10nComponent.call.apply(_L10nComponent, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_key", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_count", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = L10nLabel.prototype;
        _proto.onLoad = function onLoad() {
          if (typeof _L10nComponent.prototype.onLoad === 'function') {
            _L10nComponent.prototype.onLoad.call(this);
          }
        };
        _proto.render = function render() {
          var translatedString = l10n.t(this._key, {
            count: this._count
          });
          if (typeof this.label === 'undefined' || typeof translatedString === 'undefined') {
            return;
          }
          {
            this.label.string = translatedString;
          }
        };
        _createClass(L10nLabel, [{
          key: "key",
          get: function get() {
            return this._key;
          },
          set: function set(value) {
            this._key = value;
            this.render();
          }
        }, {
          key: "count",
          get: function get() {
            return this._count;
          },
          set: function set(value) {
            this._count = value;
            this.render();
          }
        }]);
        return L10nLabel;
      }(L10nComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_key", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "key", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "key"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_count", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "count", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "count"), _class2.prototype)), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/l10n-listen-event.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "34153BqzJ9LR4lhJDevpA4f", "l10n-listen-event", undefined);
      var L10nListenEvent = exports('default', /*#__PURE__*/function (L10nListenEvent) {
        L10nListenEvent["languageChanged"] = "languageChanged";
        L10nListenEvent["onMissingKey"] = "missingKey";
        return L10nListenEvent;
      }(L10nListenEvent || {}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/l10n-manager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './i18next.js', './resource-data-manager.ts', './localization-global.ts'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, _extends, cclegacy, assetManager, game, createInstance, ResourceDataManager, mainName, pluginName;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      assetManager = module.assetManager;
      game = module.game;
    }, function (module) {
      createInstance = module.createInstance;
    }, function (module) {
      ResourceDataManager = module.default;
    }, function (module) {
      mainName = module.mainName;
      pluginName = module.pluginName;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "2856a7GSV9Fbb53nOimJ33J", "l10n-manager", undefined);
      var L10nManager = exports('L10nManager', /*#__PURE__*/function () {
        function L10nManager() {
          /**
           * @zh
           * i18n 实例
           * @en
           * i18next instance
           */
          this._intl = undefined;
          this._options = {};
          this.resourceList = void 0;
          this.resourceBundle = {};
          this.resourceDataManager = void 0;
          this.resourceDataManager = new ResourceDataManager();
        }
        var _proto = L10nManager.prototype;
        _proto.isInitialized = function isInitialized() {
          var _this$_intl$isInitial, _this$_intl;
          return (_this$_intl$isInitial = (_this$_intl = this._intl) == null ? void 0 : _this$_intl.isInitialized) != null ? _this$_intl$isInitial : false;
        };
        _proto.createIntl = /*#__PURE__*/function () {
          var _createIntl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
            var _ref, _localStorageLanguage, _options$fallbackLang, _options$resources;
            var reloadResult, localStorageLanguage, _l10n$_options$localS, defaultLanguage, fallbackLanguage, resources, i18nextOptions;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.reloadResourceData();
                case 2:
                  reloadResult = _context.sent;
                  if (reloadResult) {
                    _context.next = 5;
                    break;
                  }
                  return _context.abrupt("return");
                case 5:
                  this._options = options;
                  this._intl = createInstance();
                  localStorageLanguage = undefined;
                  {
                    localStorageLanguage = localStorage.getItem((_l10n$_options$localS = l10n['_options'].localStorageLanguageKey) != null ? _l10n$_options$localS : L10nManager.LOCAL_STORAGE_LANGUAGE_KEY);
                    localStorageLanguage = this.checkLanguage(localStorageLanguage);
                  }
                  defaultLanguage = (_ref = (_localStorageLanguage = localStorageLanguage) != null ? _localStorageLanguage : options.language) != null ? _ref : this.resourceList.defaultLanguage;
                  fallbackLanguage = (_options$fallbackLang = options.fallbackLanguage) != null ? _options$fallbackLang : this.resourceList.fallbackLanguage;
                  resources = (_options$resources = options.resources) != null ? _options$resources : this.resourceBundle;
                  i18nextOptions = {
                    lng: defaultLanguage,
                    fallbackLng: fallbackLanguage,
                    resources: _extends({}, resources),
                    ns: L10nManager.ALLOW_NAMESPACE,
                    defaultNS: L10nManager.DEFAULT_NAMESPACE,
                    initImmediate: false,
                    load: 'currentOnly'
                  };
                  _context.next = 15;
                  return this._intl.init(i18nextOptions);
                case 15:
                  this.setAssetOverrideMap(resources[defaultLanguage][L10nManager.ASSET_NAMESPACE]);
                case 16:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function createIntl(_x) {
            return _createIntl.apply(this, arguments);
          }
          return createIntl;
        }();
        _proto.checkLanguage = function checkLanguage(language) {
          if (!language || language.length === 0 || language === 'null' || language === null || language === 'undefined' || language === undefined) {
            return undefined;
          }
          if (this.resourceList && this.resourceList.languages.length > 0 && this.resourceList.languages.find(function (it) {
            return it === language;
          })) {
            return language;
          }
          return undefined;
        };
        _proto.cloneIntl = function cloneIntl(options) {
          if (!this._intl) {
            throw new Error('i18next not init, please use \'l10n.createIntl\'');
          }
          this._intl = this._intl.cloneInstance(options);
        };
        _proto.reloadResourceData = /*#__PURE__*/function () {
          var _reloadResourceData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this$resourceList$la, _this$resourceList, _this$resourceList2;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.resourceDataManager.readResourceList();
                case 2:
                  this.resourceList = _context2.sent;
                  if (this.resourceList) {
                    _context2.next = 6;
                    break;
                  }
                  console.log("[" + pluginName + "] not found translate language list, skip init l10n");
                  return _context2.abrupt("return", false);
                case 6:
                  _context2.next = 8;
                  return this.resourceDataManager.readResourceBundle((_this$resourceList$la = (_this$resourceList = this.resourceList) == null ? void 0 : _this$resourceList.languages) != null ? _this$resourceList$la : []);
                case 8:
                  this.resourceBundle = _context2.sent;
                  if ((_this$resourceList2 = this.resourceList) != null && _this$resourceList2.defaultLanguage) {
                    _context2.next = 12;
                    break;
                  }
                  console.log("[" + pluginName + "] not found translate language data, skip init l10n");
                  return _context2.abrupt("return", false);
                case 12:
                  return _context2.abrupt("return", true);
                case 13:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function reloadResourceData() {
            return _reloadResourceData.apply(this, arguments);
          }
          return reloadResourceData;
        }() /** 初始化 i18next */;
        _proto.config = function config(options) {
          this.cloneIntl(options);
        };
        _proto.changeLanguage = /*#__PURE__*/function () {
          var _changeLanguage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(language) {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (language) {
                    _context3.next = 3;
                    break;
                  }
                  console.warn("[" + pluginName + "] invalid language tag");
                  return _context3.abrupt("return");
                case 3:
                  console.log("[" + pluginName + "] will change language to", language);
                  if (!this._intl) {
                    _context3.next = 12;
                    break;
                  }
                  if (this.currentLanguage) {
                    this.releaseOverrideMap(this.resourceBundle[this.currentLanguage][L10nManager.ASSET_NAMESPACE]);
                  }
                  _context3.next = 8;
                  return this._intl.changeLanguage(language);
                case 8:
                  this.setAssetOverrideMap(this.resourceBundle[language][L10nManager.ASSET_NAMESPACE]);
                  {
                    localStorage.setItem(L10nManager.LOCAL_STORAGE_LANGUAGE_KEY, language);
                    console.log("[" + pluginName + "] game will restart");
                    game.restart();
                  }
                  _context3.next = 13;
                  break;
                case 12:
                  console.log("[" + pluginName + "] language data not load, please confirm whether the language data is included in the build");
                case 13:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function changeLanguage(_x2) {
            return _changeLanguage.apply(this, arguments);
          }
          return changeLanguage;
        }();
        _proto.t = function t(key, options) {
          var _this$_intl$isInitial2, _this$_intl2;
          if (!((_this$_intl$isInitial2 = (_this$_intl2 = this._intl) == null ? void 0 : _this$_intl2.isInitialized) != null ? _this$_intl$isInitial2 : false)) return key;
          return this._intl.t(key, options);
        }

        /**
         * 实验性功能暂不开放
         * 数字类ICU
         */;
        _proto.tn = function tn(value, options) {
          var _this$_intl$isInitial3, _this$_intl3, _this$_intl4;
          if (!((_this$_intl$isInitial3 = (_this$_intl3 = this._intl) == null ? void 0 : _this$_intl3.isInitialized) != null ? _this$_intl$isInitial3 : false)) return value.toString();
          var cloneOptions = {};
          Object.assign(cloneOptions, options);
          for (var _i = 0, _arr = Object.keys(cloneOptions); _i < _arr.length; _i++) {
            var key = _arr[_i];
            if (typeof cloneOptions[key] === 'string' && cloneOptions[key].length === 0) {
              delete cloneOptions[key];
            } else if (typeof cloneOptions[key] === 'number' && cloneOptions[key] === 0) {
              delete cloneOptions[key];
            }
          }
          return new Intl.NumberFormat((_this$_intl4 = this._intl) == null ? void 0 : _this$_intl4.language, cloneOptions).format(value);
        }

        /**
         * 实验性功能暂不开放
         * 日期/时刻类ICU
         */;
        _proto.td = function td(date, options) {
          var _this$_intl$isInitial4, _this$_intl5, _this$_intl6;
          if (!((_this$_intl$isInitial4 = (_this$_intl5 = this._intl) == null ? void 0 : _this$_intl5.isInitialized) != null ? _this$_intl$isInitial4 : false)) return date.toString();
          var cloneOptions = {};
          Object.assign(cloneOptions, options);
          for (var _i2 = 0, _arr2 = Object.keys(cloneOptions); _i2 < _arr2.length; _i2++) {
            var key = _arr2[_i2];
            if (typeof cloneOptions[key] === 'string' && cloneOptions[key].length === 0) {
              delete cloneOptions[key];
            }
          }
          return new Intl.DateTimeFormat((_this$_intl6 = this._intl) == null ? void 0 : _this$_intl6.language, cloneOptions).format(date);
        }

        /**
         * 实验性功能暂不开放
         * 时长类ICU
         */;
        _proto.tt = function tt(value, unit, options) {
          var _this$_intl$isInitial5, _this$_intl7, _this$_intl8;
          if (!((_this$_intl$isInitial5 = (_this$_intl7 = this._intl) == null ? void 0 : _this$_intl7.isInitialized) != null ? _this$_intl$isInitial5 : false)) return value.toString();
          var cloneOptions = {};
          Object.assign(cloneOptions, options);
          for (var _i3 = 0, _arr3 = Object.keys(cloneOptions); _i3 < _arr3.length; _i3++) {
            var key = _arr3[_i3];
            if (typeof cloneOptions[key] === 'string' && cloneOptions[key].length === 0) {
              delete cloneOptions[key];
            }
          }
          return new Intl.RelativeTimeFormat((_this$_intl8 = this._intl) == null ? void 0 : _this$_intl8.language, cloneOptions).format(value, unit);
        }

        /**
         * 实验性功能暂不开放
         * 数组类ICU
         */;
        _proto.tl = function tl(value) {
          var _this$_intl$isInitial6, _this$_intl9, _this$_intl10;
          if (!((_this$_intl$isInitial6 = (_this$_intl9 = this._intl) == null ? void 0 : _this$_intl9.isInitialized) != null ? _this$_intl$isInitial6 : false)) return value.toString();
          return new Intl.ListFormat((_this$_intl10 = this._intl) == null ? void 0 : _this$_intl10.language).format(value);
        };
        _proto.exists = function exists(key) {
          var _this$_intl$exists, _this$_intl11;
          return (_this$_intl$exists = (_this$_intl11 = this._intl) == null ? void 0 : _this$_intl11.exists(key)) != null ? _this$_intl$exists : false;
        };
        _proto.direction = function direction(language) {
          return (language ? new Intl.Locale(language) : new Intl.Locale(this._intl.language)).textInfo().direction;
        };
        _proto.on = function on(event, callback) {
          var _this$_intl12;
          (_this$_intl12 = this._intl) == null || _this$_intl12.on(event, callback);
        };
        _proto.off = function off(event, callback) {
          var _this$_intl13;
          (_this$_intl13 = this._intl) == null || _this$_intl13.off(event, callback);
        };
        _proto.getResourceBundle = function getResourceBundle(language, namespace) {
          var _this$_intl14;
          return (_this$_intl14 = this._intl) == null ? void 0 : _this$_intl14.getResourceBundle(language, namespace);
        };
        _proto.setAssetOverrideMap = function setAssetOverrideMap(assetNamespace) {
          for (var _i4 = 0, _Object$keys = Object.keys(assetNamespace); _i4 < _Object$keys.length; _i4++) {
            var key = _Object$keys[_i4];
            assetManager.assetsOverrideMap.set(key, assetNamespace[key]);
          }
        };
        _proto.releaseOverrideMap = function releaseOverrideMap(assetNamespace) {
          for (var _i5 = 0, _Object$keys2 = Object.keys(assetNamespace); _i5 < _Object$keys2.length; _i5++) {
            var key = _Object$keys2[_i5];
            assetManager.assetsOverrideMap["delete"](key);
          }
        };
        _createClass(L10nManager, [{
          key: "currentLanguage",
          get: function get() {
            var _this$_intl$language, _this$_intl15;
            return (_this$_intl$language = (_this$_intl15 = this._intl) == null ? void 0 : _this$_intl15.language) != null ? _this$_intl$language : '';
          }
        }, {
          key: "languages",
          get: function get() {
            var _this$resourceList$la2, _this$resourceList3;
            return (_this$resourceList$la2 = (_this$resourceList3 = this.resourceList) == null ? void 0 : _this$resourceList3.languages) != null ? _this$resourceList$la2 : [];
          }
        }]);
        return L10nManager;
      }());
      _class = L10nManager;
      L10nManager.LOCAL_STORAGE_LANGUAGE_KEY = mainName + "/language";
      L10nManager.DEFAULT_NAMESPACE = 'translation';
      L10nManager.ASSET_NAMESPACE = 'asset';
      L10nManager.ALLOW_NAMESPACE = [_class.DEFAULT_NAMESPACE, _class.ASSET_NAMESPACE];
      L10nManager.l10n = new _class();
      var l10n = exports('default', L10nManager.l10n);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/l10n-options.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b4618IbsRtLLbRp2dQrE3EI", "l10n-options", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/l10n.ts", ['cc', './l10n-manager.ts', './l10n-listen-event.ts', './l10n-label.ts'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      var _setter = {};
      _setter.L10nManager = module.L10nManager;
      _setter.l10n = module.default;
      exports(_setter);
    }, function (module) {
      exports('L10nListenEvent', module.default);
    }, function (module) {
      exports('L10nLabel', module.default);
    }],
    execute: function () {
      cclegacy._RF.push({}, "07b54nOFPVJZJ/ENmuVbfjY", "l10n", undefined);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/label-model-component.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Color, Font, quat, Vec3, Camera, Canvas, Node, UITransform, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      Font = module.Font;
      quat = module.quat;
      Vec3 = module.Vec3;
      Camera = module.Camera;
      Canvas = module.Canvas;
      Node = module.Node;
      UITransform = module.UITransform;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "378c6HWD4pOybbqKzh7da60", "label-model-component", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var LabelModelComponent = exports('LabelModelComponent', (_dec = ccclass('LabelModelComponent'), _dec2 = menu('自定义脚本/LabelModel/label-model-component'), _dec3 = property({
        type: Color
      }), _dec4 = property({
        type: Font
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LabelModelComponent, _Component);
        function LabelModelComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_string", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_typeName", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_color", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_font", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_priority", _descriptor5, _assertThisInitialized(_this));
          _this._label = null;
          _this._camera = null;
          _this._worldRot = quat();
          _this._lastCameraWPos = new Vec3();
          _this._wPos = new Vec3();
          _this._cameraWPos = new Vec3();
          _this._lastWPos = new Vec3();
          return _this;
        }
        var _proto = LabelModelComponent.prototype;
        _proto.onEnable = function onEnable() {
          this._camera = this.node.scene.getComponentInChildren(Camera);
          if (this.labelInit()) {
            return;
          }
          var canvas = this.node.scene.getComponentInChildren(Canvas);
          if (!canvas) {
            return;
          }
          var root = canvas.node.getChildByName('label-model-manager');
          if (!root) {
            root = new Node('label-model-manager');
            root.setParent(canvas.node);
            root.setSiblingIndex(0);
            root.addComponent(UITransform);
          }
          var labelNode = new Node(this._typeName);
          labelNode.setParent(root);
          var labelTrans = labelNode.getComponent(UITransform);
          var label = labelNode.addComponent(Label);
          labelTrans.setContentSize(200, 50);
          label.horizontalAlign = Label.HorizontalAlign.CENTER;
          label.verticalAlign = Label.VerticalAlign.CENTER;
          this._label = label;
          this.labelInit();
        };
        _proto.lateUpdate = function lateUpdate() {
          this._camera.node.getWorldRotation(this._worldRot);
          this.node.setWorldRotation(this._worldRot);
          if (!this._camera || !this._label) {
            return;
          }
          this.node.getWorldPosition(this._wPos);
          this._camera.node.getWorldPosition(this._cameraWPos);
          if (this._cameraWPos.equals(this._lastCameraWPos) && this._wPos.equals(this._lastWPos)) {
            return;
          }
          this._lastCameraWPos.set(this._cameraWPos);
          this._lastWPos.set(this._wPos);

          // [HACK]
          // @ts-ignore
          this._camera._camera.update();
          this._camera.convertToUINode(this._wPos, this._label.node.parent, this._wPos);
          this._label.node.setPosition(this._wPos);
        };
        _proto.onDisable = function onDisable() {
          if (this._label) {
            this._label.node.active = false;
          }
        };
        _proto.onDestroy = function onDestroy() {
          if (this._label && this._label.node) {
            this._label.node.destroy();
          }
        };
        _proto.labelInit = function labelInit() {
          if (this._label) {
            this._label.string = this._string;
            this._label.font = this._font;
            this._label.color = this._color;
            this._label.node.active = true;
            return true;
          }
          return false;
        };
        _createClass(LabelModelComponent, [{
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            this._color.set(value);
          }
        }, {
          key: "string",
          get: function get() {
            return this._string;
          },
          set: function set(value) {
            this._string = value;
          }
        }, {
          key: "typeName",
          get: function get() {
            return this._typeName;
          },
          set: function set(value) {
            this._typeName = value;
          }
        }, {
          key: "font",
          get: function get() {
            return this._font;
          },
          set: function set(value) {
            this._font = value;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(value) {
            this._priority = value;
          }
        }]);
        return LabelModelComponent;
      }(Component), (_applyDecoratedDescriptor(_class2.prototype, "color", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "color"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "string", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "string"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "typeName", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "typeName"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "font", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "font"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "priority", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "priority"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_string", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_typeName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'name-block';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_color", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return Color.WHITE.clone();
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_font", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_priority", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LabelAttributeSwitch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Font, Size, Color, Vec2, Label, UITransform, LabelOutline, LabelShadow, math, Overflow, CacheMode, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Font = module.Font;
      Size = module.Size;
      Color = module.Color;
      Vec2 = module.Vec2;
      Label = module.Label;
      UITransform = module.UITransform;
      LabelOutline = module.LabelOutline;
      LabelShadow = module.LabelShadow;
      math = module.math;
      Overflow = module.Overflow;
      CacheMode = module.CacheMode;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "48e7c4h4eBKqakYu2MZTLR5", "LabelAttributeSwitch", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      var LabelAttributeSwitch = exports('LabelAttributeSwitch', (_dec = ccclass('LabelAttributeSwitch'), _dec2 = property({
        type: Font
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LabelAttributeSwitch, _Component);
        function LabelAttributeSwitch() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = null;
          _this.stateLabel = null;
          _this.transform = null;
          _this.outline = null;
          _this.shadow = null;
          _this.oriSize = new Size(200, 200);
          _this.oriColor = new Color(255, 255, 255, 255);
          _this.oriFontSize = 0;
          _this.oriFont = null;
          _this.oriOutlineColor = new Color(0, 0, 0, 255);
          _this.oriOutlineWidth = 3;
          _this.oriShadowColor = new Color(0, 0, 0, 255);
          _this.oriShadowOffset = new Vec2(3, 3);
          _this.oriShadowBlur = 3;
          _initializerDefineProperty(_this, "font", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LabelAttributeSwitch.prototype;
        _proto.start = function start() {
          var _this$node$getChildBy, _this$node$getChildBy2;
          this.label = (_this$node$getChildBy = this.node.getChildByName('Label')) == null ? void 0 : _this$node$getChildBy.getComponent(Label);
          this.stateLabel = (_this$node$getChildBy2 = this.node.getChildByName('state')) == null ? void 0 : _this$node$getChildBy2.getComponent(Label);
          this.transform = this.label.getComponent(UITransform);
          this.outline = this.label.getComponent(LabelOutline);
          this.shadow = this.label.getComponent(LabelShadow);
          this.oriFontSize = this.label.fontSize;
          this.oriFont = this.label.font;
          this.updateState();
        };
        _proto.update = function update(deltaTime) {};
        _proto.switchActive = function switchActive() {
          this.label.node.active = !this.label.node.active;
          this.updateState();
        };
        _proto.switchEnabled = function switchEnabled() {
          this.label.enabled = !this.label.enabled;
          this.updateState();
        };
        _proto.switchContentSize = function switchContentSize() {
          var randX = math.random();
          var randY = math.random();
          this.transform.contentSize = new Size(this.oriSize.x * 2 * randX, this.oriSize.y * 2 * randY);
          this.updateState();
        };
        _proto.switchAnchorX = function switchAnchorX() {
          var randX = math.random();
          this.transform.anchorX = randX;
          this.updateState();
        };
        _proto.switchAnchorY = function switchAnchorY() {
          var randY = math.random();
          this.transform.anchorY = randY;
          this.updateState();
        };
        _proto.switchColor = function switchColor() {
          var randR = math.random();
          var randG = math.random();
          var randB = math.random();
          var randA = math.random();
          this.label.color = new Color(this.oriColor.r * randR, this.oriColor.g * randG, this.oriColor.b * randB, this.oriColor.a * randA);
          this.updateState();
        };
        _proto.switchString = function switchString() {
          var result = '';
          var length = characters.length * math.random();
          for (var i = 0; i < length; i++) {
            result += characters[Math.round(characters.length * math.random())];
          }
          this.label.string = result;
          this.updateState();
        };
        _proto.switchHorizontalAlign = function switchHorizontalAlign() {
          this.label.horizontalAlign = ++this.label.horizontalAlign % 3;
          this.updateState();
        };
        _proto.switchVerticalAlign = function switchVerticalAlign() {
          this.label.verticalAlign = ++this.label.verticalAlign % 3;
          this.updateState();
        };
        _proto.switchFont = function switchFont() {
          var useOri = this.label.font === this.oriFont;
          this.label.font = useOri ? this.font : this.oriFont;
          this.updateState();
        };
        _proto.switchUseSystemFont = function switchUseSystemFont() {
          this.label.useSystemFont = !this.label.useSystemFont;
          if (!this.label.useSystemFont) {
            this.label.font = this.oriFont;
          }
          this.updateState();
        };
        _proto.switchFontSize = function switchFontSize() {
          this.label.fontSize = Math.round(this.oriFontSize * 2 * math.random());
          this.updateState();
        };
        _proto.switchOverflow = function switchOverflow() {
          this.label.overflow = ++this.label.overflow % 4;
          this.updateState();
        };
        _proto.switchCacheMode = function switchCacheMode() {
          this.label.cacheMode = ++this.label.cacheMode % 3;
          this.updateState();
        };
        _proto.switchOutline = function switchOutline() {
          this.outline.enabled = !this.outline.enabled;
          this.updateState();
        };
        _proto.switchOutlineColor = function switchOutlineColor() {
          var randR = math.random();
          var randG = math.random();
          var randB = math.random();
          var randA = math.random();
          this.outline.color = new Color(255 * randR, 255 * randG, 255 * randB, 255 * randA);
          this.updateState();
        };
        _proto.switchOutlineWidth = function switchOutlineWidth() {
          this.outline.width = this.oriOutlineWidth * 2 * math.random();
          this.updateState();
        };
        _proto.switchShadow = function switchShadow() {
          this.shadow.enabled = !this.shadow.enabled;
          this.updateState();
        };
        _proto.switchShadowColor = function switchShadowColor() {
          var randR = math.random();
          var randG = math.random();
          var randB = math.random();
          var randA = math.random();
          this.shadow.color = new Color(255 * randR, 255 * randG, 255 * randB, 255 * randA);
          this.updateState();
        };
        _proto.switchShadowOffset = function switchShadowOffset() {
          var randX = math.random();
          var randY = math.random();
          this.shadow.offset = new Vec2(this.oriShadowOffset.x * 2 * randX, this.oriShadowOffset.y * 2 * randY);
          this.updateState();
        };
        _proto.switchShadowBlur = function switchShadowBlur() {
          this.shadow.blur = this.oriShadowBlur * 2 * math.random();
          this.updateState();
        };
        _proto.reset = function reset() {
          this.label.node.active = true;
          this.label.enabled = true;
          this.transform.contentSize = this.oriSize;
          this.transform.anchorX = 0.5;
          this.transform.anchorY = 0.5;
          this.label.color = this.oriColor;
          this.label.string = 'label';
          this.label.font = this.oriFont;
          this.label.fontSize = this.oriFontSize;
          this.label.overflow = Overflow.SHRINK;
          this.label.cacheMode = CacheMode.NONE;
          this.outline.enabled = true;
          this.outline.color = this.oriOutlineColor;
          this.outline.width = this.oriOutlineWidth;
          this.shadow.enabled = true;
          this.shadow.color = this.oriShadowColor;
          this.shadow.offset = this.oriShadowOffset;
          this.shadow.blur = this.oriShadowBlur;
          this.updateState();
        };
        _proto.updateState = function updateState() {
          var _this$label$font;
          var state = "active = " + this.label.node.active + "\nenabled = " + this.label.enabled + "\ncontentSize = " + this.transform.contentSize + "\nanchor = " + this.transform.anchorPoint + "\ncolor = " + this.label.color + "\nstring = " + this.label.string + "\nfont = " + ((_this$label$font = this.label.font) == null ? void 0 : _this$label$font.name) + "\nuseSystemFont = " + this.label.useSystemFont + "\nfontSize = " + this.label.fontSize + "\noverflow = " + this.label.overflow.toString() + "\ncacheMode = " + this.label.cacheMode.toString() + "\noutline.enabled = " + this.outline.enabled + "\noutline.color = " + this.outline.color + "\noutline.width = " + this.outline.width + "\nshadow.enabled = " + this.shadow.enabled + "\nshadow.color = " + this.shadow.color + "\nshadow.offset = " + this.shadow.offset + "\nshadow.blur = " + this.shadow.blur + "\n";
          this.stateLabel.string = state;
        };
        return LabelAttributeSwitch;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "font", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LabeledSlider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Slider, Label, EventHandler, js, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Slider = module.Slider;
      Label = module.Label;
      EventHandler = module.EventHandler;
      js = module.js;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "c457eD5+XJJ/LMdYhKEG60x", "LabeledSlider", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LabeledSlider = exports('LabeledSlider', (_dec = ccclass('LabeledSlider'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LabeledSlider, _Component);
        function LabeledSlider() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "min", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "max", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "integral", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LabeledSlider.prototype;
        _proto.start = function start() {
          var slider = this._slider = this.node.getChildByPath('Slider').getComponent(Slider);
          var valueLabel = this._valueLabel = this.node.getChildByPath('ValueLabel').getComponent(Label);
          var eventHandler = new EventHandler();
          eventHandler.target = this.node;
          eventHandler.component = js.getClassName(LabeledSlider);
          eventHandler.handler = '_onSliderChanged';
          slider.slideEvents.push(eventHandler);
          this._onSliderChanged();
        };
        _proto._onSliderChanged = function _onSliderChanged() {
          var val = this.min + (this.max - this.min) * this._slider.progress;
          this._valueLabel.string = "" + (this.integral ? Math.floor(val) : val);
        };
        return LabeledSlider;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "min", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "max", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "integral", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/layout-change-order.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "9d410ZZ47ZDeYDqx999RaNZ", "layout-change-order", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode;
      var LayoutChangeOrder = exports('LayoutChangeOrder', (_dec = ccclass('LayoutChangeOrder'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LayoutChangeOrder, _Component);
        function LayoutChangeOrder() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "changePriority", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "children_0", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "children_1", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "children_2", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "children_3", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "children_4", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "children_5", _descriptor7, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LayoutChangeOrder.prototype;
        _proto.start = function start() {
          if (this.changePriority) {
            this.children_0.getComponent(UITransform).priority = 0;
            this.children_1.getComponent(UITransform).priority = 2;
            this.children_2.getComponent(UITransform).priority = 1;
            this.children_3.getComponent(UITransform).priority = 3;
            this.children_4.getComponent(UITransform).priority = 4;
            this.children_5.getComponent(UITransform).priority = 5;
          } else {
            this.children_2.setSiblingIndex(1);
          }
        };
        return LayoutChangeOrder;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "changePriority", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "children_0", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "children_1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "children_2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "children_3", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "children_4", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "children_5", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/light-hint.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SphereLightComponent, SpotLightComponent, ModelComponent, CameraComponent, Vec4, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SphereLightComponent = module.SphereLightComponent;
      SpotLightComponent = module.SpotLightComponent;
      ModelComponent = module.ModelComponent;
      CameraComponent = module.CameraComponent;
      Vec4 = module.Vec4;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "bd5838x//xGMYENw1vAlfIM", "light-hint", undefined);
      var ccclass = _decorator.ccclass;
      var LightHint = exports('LightHint', (_dec = ccclass("LightHint"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LightHint, _Component);
        function LightHint() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._material = null;
          _this._camera = null;
          return _this;
        }
        var _proto = LightHint.prototype;
        _proto.start = function start() {
          var light = this.node.parent.getComponent(SphereLightComponent);
          if (!light) light = this.node.parent.getComponent(SpotLightComponent);
          this._material = this.node.getComponent(ModelComponent).material;
          this._camera = this.node.scene.getComponentInChildren(CameraComponent);
          var size = light.size * 4;
          this.node.setWorldScale(size, size, size);
          this._material.setProperty('mainColor', light.color);
          this._material.setProperty('intensitySize', new Vec4(light.luminance, 0.4, 0, 0));
        };
        _proto.update = function update() {
          this.node.setWorldRotation(this._camera.node.worldRotation);
        };
        return LightHint;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/list-view-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Node, ScrollView, Button, Label, instantiate, UITransform, error, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Button = module.Button;
      Label = module.Label;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      error = module.error;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;
      cclegacy._RF.push({}, "4cd67QgY99J/q8+hpaUQjt0", "list-view-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var _temp_vec3 = new Vec3();
      var ListViewCtrl = exports('ListViewCtrl', (_dec = ccclass("ListViewCtrl"), _dec2 = menu('UI/ListViewCtrl'), _dec3 = property(Node), _dec4 = property(ScrollView), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Label), _dec9 = property(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ListViewCtrl, _Component);
        function ListViewCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "itemTemplate", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "scrollView", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spawnCount", _descriptor3, _assertThisInitialized(_this));
          // 初始化 item 数量
          _initializerDefineProperty(_this, "totalCount", _descriptor4, _assertThisInitialized(_this));
          // 滚动列表里总的 item 数量
          _initializerDefineProperty(_this, "spacing", _descriptor5, _assertThisInitialized(_this));
          // item 垂直排布间隔
          _initializerDefineProperty(_this, "bufferZone", _descriptor6, _assertThisInitialized(_this));
          // when item is away from bufferZone, we relocate it
          _initializerDefineProperty(_this, "btnAddItem", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btnRemoveItem", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btnJumpToPosition", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "lblJumpPosition", _descriptor10, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "lblTotalItems", _descriptor11, _assertThisInitialized(_this));
          _this._content = null;
          _this._items = [];
          _this._updateTimer = 0;
          _this._updateInterval = 0.2;
          _this._lastContentPosY = 0;
          _this._itemTemplateUITrans = void 0;
          _this._contentUITrans = void 0;
          return _this;
        }
        var _proto = ListViewCtrl.prototype;
        _proto.onLoad = function onLoad() {
          this._content = this.scrollView.content;
          this.initialize();
          this._updateTimer = 0;
          this._updateInterval = 0.2;
          this._lastContentPosY = 0; // use this variable to detect if we are scrolling up or down
        }

        // 初始化 item
        ;

        _proto.initialize = function initialize() {
          this._itemTemplateUITrans = this.itemTemplate._uiProps.uiTransformComp;
          this._contentUITrans = this._content._uiProps.uiTransformComp;
          this._contentUITrans.height = this.totalCount * (this._itemTemplateUITrans.height + this.spacing) + this.spacing; // get total content height
          for (var i = 0; i < this.spawnCount; ++i) {
            // spawn items, we only need to do this once
            var item = instantiate(this.itemTemplate);
            this._content.addChild(item);
            var itemUITrans = item._uiProps.uiTransformComp;
            item.setPosition(0, -itemUITrans.height * (0.5 + i) - this.spacing * (i + 1), 0);
            var labelComp = item.getComponentInChildren(Label);
            labelComp.string = "item_" + i;
            this._items.push(item);
          }
        };
        _proto.getPositionInView = function getPositionInView(item) {
          // get item position in scrollview's node space
          var worldPos = item.parent.getComponent(UITransform).convertToWorldSpaceAR(item.position);
          var viewPos = this.scrollView.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);
          return viewPos;
        };
        _proto.update = function update(dt) {
          this._updateTimer += dt;
          if (this._updateTimer < this._updateInterval) return; // we don't need to do the math every frame
          this._updateTimer = 0;
          var items = this._items;
          var buffer = this.bufferZone;
          var isDown = this.scrollView.content.position.y < this._lastContentPosY; // scrolling direction
          var offset = (this._itemTemplateUITrans.height + this.spacing) * items.length;
          for (var i = 0; i < items.length; ++i) {
            var viewPos = this.getPositionInView(items[i]);
            items[i].getPosition(_temp_vec3);
            if (isDown) {
              // if away from buffer zone and not reaching top of content
              if (viewPos.y < -buffer && _temp_vec3.y + offset < 0) {
                _temp_vec3.y += offset;
                items[i].setPosition(_temp_vec3);
              }
            } else {
              // if away from buffer zone and not reaching bottom of content
              if (viewPos.y > buffer && _temp_vec3.y - offset > -this._contentUITrans.height) {
                _temp_vec3.y -= offset;
                items[i].setPosition(_temp_vec3);
              }
            }
          }
          // update lastContentPosY
          this._lastContentPosY = this.scrollView.content.position.y;
          this.lblTotalItems.string = "Total Items: " + this.totalCount;
        };
        _proto.addItem = function addItem() {
          this._contentUITrans.height = (this.totalCount + 1) * (this._itemTemplateUITrans.height + this.spacing) + this.spacing; // get total content height
          this.totalCount = this.totalCount + 1;
        };
        _proto.removeItem = function removeItem() {
          if (this.totalCount - 1 < 30) {
            error("can't remove item less than 30!");
            return;
          }
          this._contentUITrans.height = (this.totalCount - 1) * (this._itemTemplateUITrans.height + this.spacing) + this.spacing; // get total content height
          this.totalCount = this.totalCount - 1;
          this.moveBottomItemToTop();
        };
        _proto.moveBottomItemToTop = function moveBottomItemToTop() {
          var offset = (this._itemTemplateUITrans.height + this.spacing) * this._items.length;
          var length = this._items.length;
          var item = this.getItemAtBottom();
          item.getPosition(_temp_vec3);

          // whether need to move to top
          if (_temp_vec3.y + offset < 0) {
            _temp_vec3.y = _temp_vec3.y + offset;
            item.setPosition(_temp_vec3);
          }
        };
        _proto.getItemAtBottom = function getItemAtBottom() {
          var item = this._items[0];
          for (var i = 1; i < this._items.length; ++i) {
            if (item.position.y > this._items[i].position.y) {
              item = this._items[i];
            }
          }
          return item;
        };
        _proto.scrollToFixedPosition = function scrollToFixedPosition() {
          this.scrollView.scrollToOffset(new Vec3(0, 500, 0), 2, true);
        };
        return ListViewCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemTemplate", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spawnCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "totalCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spacing", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "bufferZone", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnAddItem", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btnRemoveItem", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnJumpToPosition", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "lblJumpPosition", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lblTotalItems", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/listitem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './backbutton.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Label, Node, director, Sprite, Button, Color, Component, BackButton;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      director = module.director;
      Sprite = module.Sprite;
      Button = module.Button;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      BackButton = module.BackButton;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "4fa73P9DaREY7uj4BrhuimX", "listitem", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ItemType = exports('ItemType', /*#__PURE__*/function (ItemType) {
        ItemType[ItemType["SCENSE_ITEM"] = 0] = "SCENSE_ITEM";
        ItemType[ItemType["SCENSE_FOLD"] = 1] = "SCENSE_FOLD";
        return ItemType;
      }({}));
      var ListItem = exports('ListItem', (_dec = ccclass("ListItem"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ListItem, _Component);
        function ListItem() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._name = "";
          _this.index = -1;
          _this.label = null;
          _this.color = null;
          _this.type = ItemType.SCENSE_FOLD;
          _this.xpos = -1;
          return _this;
        }
        var _proto = ListItem.prototype;
        _proto.onload = function onload() {};
        _proto.start = function start() {
          var _this2 = this;
          // Your initialization goes here.
          if (this.node) {
            this.label = this.node.getComponentInChildren(Label);
            this.label.string = this._name;
            if (this.color) this.label.color = this.color;
            this.resetPostion(this.label);
          }
          this.node.on(Node.EventType.MOUSE_ENTER, function (event) {
            BackButton.focusButtonIndex = _this2.node.getSiblingIndex();
            BackButton.isControllerMode = false;
          });
        };
        _proto.resetPostion = function resetPostion(label) {
          if (!label) {
            return;
          }
          var position = label.node.getPosition();
          if (this.xpos == -1) {
            this.xpos = position.x;
          }
          if (this.type == ItemType.SCENSE_FOLD && this.xpos == position.x) {
            label.node.setPosition(position.x - 20, position.y, position.z);
          } else if (this.type == ItemType.SCENSE_ITEM && this.xpos != position.x) {
            label.node.setPosition(this.xpos, position.y, position.z);
          }
        };
        _proto.loadScene = function loadScene() {
          var _this3 = this;
          return new Promise(function (resovle, reject) {
            BackButton.focusButtonIndex = _this3.node.getSiblingIndex();
            BackButton.saveOffset();
            BackButton.saveIndex(_this3.index);
            director.loadScene(_this3._name, function (error) {
              error ? reject(error) : resovle();
            });
          });
        };
        _proto.updateItem = function updateItem(type, idx, name) {
          this.index = idx;
          this.type = type;
          var sprite = this.node.getComponent(Sprite);
          var button = this.node.getComponent(Button);
          if (type == ItemType.SCENSE_ITEM) {
            button.enabled = true;
            sprite.enabled = true;
            this._name = name;
            this.color = new Color(0, 0, 0, 255);
          } else {
            button.enabled = false;
            sprite.enabled = false;
            this._name = name;
            this.color = new Color(255, 255, 255, 255);
          }
          if (this.label) {
            this.label.color = this.color;
            this.label.string = this._name;
            this.resetPostion(this.label);
          }
        };
        return ListItem;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadDragonBones.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, dragonBones, loader, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dragonBones = module.dragonBones;
      loader = module.loader;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "db25aaEuudOurDFcTFrx3Al", "LoadDragonBones", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LoadDragonBones = exports('LoadDragonBones', (_dec = ccclass('LoadDragonBones'), _dec2 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadDragonBones, _Component);
        function LoadDragonBones() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "dragonBones", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LoadDragonBones.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.dynamicCreate = function dynamicCreate() {
          var _this2 = this;
          loader.loadRes('dragonBones/NewDragonTest', dragonBones.DragonBonesAsset, function (err, res) {
            if (err) {
              console.error(err);
              return;
            }
            _this2.dragonBones.dragonAsset = res;
            loader.loadRes('dragonBones/texture', dragonBones.DragonBonesAtlasAsset, function (err, res) {
              if (err) {
                console.error(err);
                return;
              }
              _this2.dragonBones.dragonAtlasAsset = res;
              _this2.dragonBones.armatureName = "armatureName";
              _this2.dragonBones.playAnimation('stand', 0);
            });
          });
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return LoadDragonBones;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragonBones", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadRes_example.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteAtlas, loader, Layers, Sprite, Prefab, instantiate, director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      loader = module.loader;
      Layers = module.Layers;
      Sprite = module.Sprite;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "4b343jq4LREvorHBiCggFf4", "LoadRes_example", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var builtInEffectList = ['711ebe11-f673-4cd9-9a83-63c60ba54c5b.json', '971bdb23-3ff6-43eb-b422-1c30165a3663.json', '17debcc3-0a6b-4b8a-b00b-dc58b885581e.json', 'd1346436-ac96-4271-b863-1f4fdead95b0.json', '60f7195c-ec2a-45eb-ba94-8955f60e81d0.json', '1baf0fc9-befa-459c-8bdd-af1a450a0319.json', '1d08ef62-a503-4ce2-8b9a-46c90873f7d3.json', 'a7612b54-35e3-4238-a1a9-4a7b54635839.json', 'a3cd009f-0ab0-420d-9278-b9fdab939bbc.json'];
      var LoadResExample = exports('LoadResExample', (_dec = ccclass("LoadResExample"), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadResExample, _Component);
        function LoadResExample() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._url = ["test_assets/atlas", "test_assets/prefab"];
          _initializerDefineProperty(_this, "content", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = LoadResExample.prototype;
        _proto.loadSpriteFrame = function loadSpriteFrame() {
          var _this2 = this;
          var url = this._url[0];
          this._releaseResource(url, SpriteAtlas);
          loader.loadRes(url, SpriteAtlas, function (err, atlas) {
            _this2._removeAllChildren();
            loader.setAutoRelease(atlas, true);
            var node = new Node();
            node.layer = Layers.Enum.UI_2D;
            _this2.content.addChild(node);
            node.setPosition(0, 0, 0);
            var sprite = node.addComponent(Sprite);
            sprite.spriteFrame = atlas.getSpriteFrame('sheep_run_0');
          });
        };
        _proto.loadPrefab = function loadPrefab() {
          var _this3 = this;
          var url = this._url[1];
          this._releaseResource(url, Prefab);
          loader.loadRes(url, Prefab, function (err, prefab) {
            _this3._removeAllChildren();
            loader.setAutoRelease(prefab, true);
            var node = instantiate(prefab);
            node.layer = Layers.Enum.UI_2D;
            _this3.content.addChild(node);
            node.setPosition(0, 0, 0);
          });
        };
        _proto.onDisable = function onDisable() {
          this._releaseResource(this._url[0], SpriteAtlas);
          this._releaseResource(this._url[1], Prefab);
        };
        _proto._removeAllChildren = function _removeAllChildren() {
          this.content.removeAllChildren();
        };
        _proto._releaseResource = function _releaseResource(url, type) {
          this._removeAllChildren();
          var res = loader.getRes(url, type);
          var all = loader.getDependsRecursively(res);
          this._removeBuiltInEffect(all);
          loader.release(all);
        };
        _proto._removeBuiltInEffect = function _removeBuiltInEffect(deps) {
          var cache = [];
          for (var i = 0; i < deps.length; i++) {
            for (var j = 0; j < builtInEffectList.length; j++) {
              if (deps[i].includes(builtInEffectList[j])) {
                cache.push(i);
              }
            }
          }
          for (var k = 0; k < cache.length; k++) {
            delete deps[cache[k]];
          }
          cache = [];
        };
        _proto.backToAssetLoading = function backToAssetLoading() {
          return new Promise(function (resovle, reject) {
            director.loadScene('AssetLoading', function (err) {
              err ? reject(err) : resovle();
            });
          });
        };
        return LoadResExample;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadResDir_example.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, ScrollView, UITransform, instantiate, Label, assetManager, loader, JsonAsset, js, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      assetManager = module.assetManager;
      loader = module.loader;
      JsonAsset = module.JsonAsset;
      js = module.js;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "fbf7dF/vuxDcKIaWPb56M3y", "LoadResDir_example", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var builtInEffectList = ['711ebe11-f673-4cd9-9a83-63c60ba54c5b', '971bdb23-3ff6-43eb-b422-1c30165a3663', '17debcc3-0a6b-4b8a-b00b-dc58b885581e', 'd1346436-ac96-4271-b863-1f4fdead95b0', '60f7195c-ec2a-45eb-ba94-8955f60e81d0', '1baf0fc9-befa-459c-8bdd-af1a450a0319', '1d08ef62-a503-4ce2-8b9a-46c90873f7d3', 'a7612b54-35e3-4238-a1a9-4a7b54635839', 'a3cd009f-0ab0-420d-9278-b9fdab939bbc'];
      var LoadResDirExample = exports('LoadResDirExample', (_dec = ccclass("LoadResDirExample"), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: ScrollView
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadResDirExample, _Component);
        function LoadResDirExample() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /* class member could be defined like this */
          // dummy = '';
          _initializerDefineProperty(_this, "btnClearAll", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "scrollView", _descriptor3, _assertThisInitialized(_this));
          _this._assets = [];
          _this._hasLoading = false;
          return _this;
        }
        var _proto = LoadResDirExample.prototype;
        _proto._init = function _init() {
          var uiTrans = this.scrollView.content.getComponent(UITransform);
          uiTrans.height = 0;
          this.btnClearAll.active = false;
        };
        _proto.onLoad = function onLoad() {
          this._init();
        };
        _proto._createLabel = function _createLabel(text) {
          var node = instantiate(this.label);
          var label = node.getComponent(Label);
          label.string = text;
          this.scrollView.content.addChild(node);
        };
        _proto._clear = function _clear() {
          this.scrollView.content.removeAllChildren();
          for (var i = 0; i < this._assets.length; ++i) {
            var asset = this._assets[i];
            // 需要释放所有资源依赖
            assetManager.releaseAsset(asset);
          }
          this._assets = [];
        };
        _proto._removeBuiltInEffect = function _removeBuiltInEffect(deps) {
          var cache = [];
          for (var i = 0; i < deps.length; i++) {
            for (var j = 0; j < builtInEffectList.length; j++) {
              if (deps[i].includes(builtInEffectList[j])) {
                cache.push(i);
              }
            }
          }
          for (var k = 0; k < cache.length; k++) {
            delete deps[cache[k]];
          }
          cache = [];
        };
        _proto.onClearAll = function onClearAll() {
          var uiTrans = this.scrollView.content.getComponent(UITransform);
          uiTrans.height = 0;
          this.btnClearAll.active = false;
          this._clear();
        };
        _proto.onLoadAll = function onLoadAll() {
          var _this2 = this;
          if (this._hasLoading) {
            return;
          }
          this._hasLoading = true;
          this._clear();
          this._createLabel("Load All Assets");
          this.scrollView.scrollToTop();
          this.btnClearAll.active = false; // 防止加载的过程中清除资源

          loader.loadResDir("test_assets", function (err, assets) {
            if (!_this2.isValid && err) {
              return;
            }
            _this2._assets = assets;
            for (var i = 0; i < assets.length; ++i) {
              var asset = assets[i];
              var info = asset.toString();
              if (!info) {
                if (asset instanceof JsonAsset) {
                  info = JSON.stringify(asset.json, null, 4);
                } else {
                  info = info || asset.name || js.getClassName(asset);
                }
              }
              _this2._createLabel(info);
            }
            _this2._hasLoading = false;
            _this2.btnClearAll.active = true;
          });
        };
        _proto.onLoadSpriteFrameAll = function onLoadSpriteFrameAll() {
          var _this3 = this;
          if (this._hasLoading) {
            return;
          }
          this._hasLoading = true;
          this._clear();
          this._createLabel("Load All Sprite Frame");
          this.scrollView.scrollToTop();
          this.btnClearAll.active = false; // 防止加载的过程中清除资源

          loader.loadResDir("test_assets", SpriteFrame, function (err, assets) {
            if (!_this3.isValid) {
              return;
            }
            _this3._assets = assets;
            for (var i = 0; i < assets.length; ++i) {
              var asset = assets[i];
              _this3._createLabel(asset.name);
            }
            _this3._hasLoading = false;
            _this3.btnClearAll.active = true;
          });
        };
        return LoadResDirExample;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnClearAll", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadSpine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, sp, loader, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      sp = module.sp;
      loader = module.loader;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "c17afOJ5PBHxIigUOVBfvPh", "LoadSpine", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var LoadSpine = exports('LoadSpine', (_dec = ccclass('LoadSpine'), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadSpine, _Component);
        function LoadSpine() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tips", _descriptor, _assertThisInitialized(_this));
          _this.isLoadedRes = false;
          return _this;
        }
        var _proto = LoadSpine.prototype;
        _proto.start = function start() {
          var _this2 = this;
          // Your initialization goes here.

          var alienRes;
          if (sp.SPINE_VERSION === '4.2') {
            alienRes = 'spine/alien/4.2/alien-pro';
          } else {
            alienRes = 'spine/alien/3.8/alien-pro';
          }
          loader.loadRes(alienRes, sp.SkeletonData, function (err, spineAsset) {
            if (err) {
              _this2.tips.string = "Failed to load asset";
              _this2.isLoadedRes = true; // AutoTest: Consider loading complete even if loading failed
              return;
            }
            var comp = _this2.getComponent('sp.Skeleton');
            comp.skeletonData = spineAsset;
            var ani = comp.setAnimation(0, 'run', true);
            _this2.tips.string = 'Load Success';
            _this2.isLoadedRes = true;
          });
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return LoadSpine;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/loadSubPack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Label, Button, Component, loader, math, director;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
      loader = module.loader;
      math = module.math;
      director = module.director;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "30af6PoiY9LnL7y8Z0Qg4vY", "loadSubPack", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var loadSubPack = exports('loadSubPack', (_dec = ccclass("loadSubPack"), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Button
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(loadSubPack, _Component);
        function loadSubPack() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "createButton_1", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "createButton_2", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = loadSubPack.prototype;
        _proto.start = /*#__PURE__*/function () {
          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.loadSubPackages();
                case 2:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function start() {
            return _start.apply(this, arguments);
          }
          return start;
        }();
        _proto.loadSubPackages = /*#__PURE__*/function () {
          var _loadSubPackages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this2 = this;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise(function () {
                    _this2.createButton_1.node.active = false;
                    _this2.createButton_2.node.active = false;
                    _this2.label.string = 'Load subPackage...';
                    loader.downloader.loadSubpackage('sub-pack-01', function (err) {
                      if (err) {
                        _this2.label.string = 'load sub-pack-01 failed!';
                        _this2.label.color = math.Color.RED;
                        return console.error(err);
                      }
                      _this2.label.string = 'load sub-pack-01 success!';
                      console.log("load subpackage(sub-pack-01) successfully.");
                      _this2.createButton_1.node.active = true;
                      loader.downloader.loadSubpackage('sub-pack-02', function (err) {
                        if (err) {
                          _this2.label.string = 'load sub-pack-02 failed!';
                          _this2.label.color = math.Color.RED;
                          return console.error(err);
                        }
                        _this2.label.string += '\n load sub-pack-02 success!';
                        console.log("load subpackage(sub-pack-02) successfully.");
                        _this2.createButton_2.node.active = true;
                        _this2.label.string += '\n load all success!';
                        return;
                      });
                    });
                  }));
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function loadSubPackages() {
            return _loadSubPackages.apply(this, arguments);
          }
          return loadSubPackages;
        }();
        _proto.jumpToSubScene01 = /*#__PURE__*/function () {
          var _jumpToSubScene = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", new Promise(function (resolve, reject) {
                    director.loadScene('subPack01', function (err) {
                      console.log('subpack01');
                      err ? reject(err) : resolve();
                    });
                  }));
                case 1:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function jumpToSubScene01() {
            return _jumpToSubScene.apply(this, arguments);
          }
          return jumpToSubScene01;
        }();
        _proto.jumpToSubScene02 = /*#__PURE__*/function () {
          var _jumpToSubScene2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", new Promise(function (resolve, reject) {
                    director.loadScene('subPack02', function (err) {
                      console.log('subPack02');
                      err ? reject(err) : resolve();
                    });
                  }));
                case 1:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));
          function jumpToSubScene02() {
            return _jumpToSubScene2.apply(this, arguments);
          }
          return jumpToSubScene02;
        }();
        return loadSubPack;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "createButton_1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "createButton_2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/loadSubPackages.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, loader, Color, assetManager, SpriteAtlas, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      loader = module.loader;
      Color = module.Color;
      assetManager = module.assetManager;
      SpriteAtlas = module.SpriteAtlas;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "c613aqM8DtJXq0RwpVyXnS/", "loadSubPackages", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var loadSubPackages = exports('loadSubPackages', (_dec = ccclass("loadSubPackages"), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(loadSubPackages, _Component);
        function loadSubPackages() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "canvas", _descriptor2, _assertThisInitialized(_this));
          _this.status = false;
          return _this;
        }
        var _proto = loadSubPackages.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this.loadSubPackage();
        };
        _proto.loadSubPackage = function loadSubPackage() {
          var _this2 = this;
          this.label.string = 'Load subPackage...';
          loader.downloader.loadSubpackage('subPackage', function (err) {
            if (err) {
              _this2.label.string = 'load subPackage failed!';
              _this2.label.color = Color.RED;
              return console.error(err);
            }
            _this2.label.string = 'load subPackage success!';
            console.log("load subpackage(subPackage) successfully.");
            _this2.loadSpriteAtlas();
            _this2.status = true;
          });
        };
        _proto.loadSpriteAtlas = function loadSpriteAtlas() {
          var _this3 = this;
          assetManager.getBundle('subPackage').load('sheep', SpriteAtlas, function (err, atlas) {
            if (err) {
              return console.error(err);
            }
            loader.setAutoRelease(atlas, true);
            var node = new Node();
            _this3.canvas.addChild(node);
            node.setPosition(0, 0, 0);
            var sprite = node.addComponent(Sprite);
            sprite.spriteFrame = atlas.getSpriteFrame('sheep_down_0');
            _this3.label.string += '\nLoad atlas in subPackage success!';
            console.log('Load atlas in subPackage success!');
          });
        }
        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return loadSubPackages;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/localization-global.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "02d9etKgNBGqLPpvU7RX29o", "localization-global", undefined);
      var pluginName = exports('pluginName', 'Localization Editor');
      var mainName = exports('mainName', 'localization-editor');
      var runtimeBundleName = exports('runtimeBundleName', 'l10n');
      var resourceListPath = exports('resourceListPath', 'resource-list');
      var resourceBundlePath = exports('resourceBundlePath', 'resource-bundle');
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/lod-test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, CameraComponent, Label, Prefab, Slider, instantiate, v3, LODGroup, director, gfx, NodeEventType, UITransform, MeshRenderer, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      CameraComponent = module.CameraComponent;
      Label = module.Label;
      Prefab = module.Prefab;
      Slider = module.Slider;
      instantiate = module.instantiate;
      v3 = module.v3;
      LODGroup = module.LODGroup;
      director = module.director;
      gfx = module.gfx;
      NodeEventType = module.NodeEventType;
      UITransform = module.UITransform;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "dc248TTiXlJfKq/pr6HQXgF", "lod-test", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MAX_COUNT_TO_ADD = 16;
      var LodTest = exports('LodTest', (_dec = ccclass('LodTest'), _dec2 = property(Button), _dec3 = property(CameraComponent), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Prefab), _dec9 = property(Slider), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LodTest, _Component);
        function LodTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "cameraButton", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cameraComp", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "frameRateLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "triangleCountLabel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "enableLodLabel", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "renderTimeLabel", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "prefab", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "distanceSlider", _descriptor8, _assertThisInitialized(_this));
          _this._lodGroups = [];
          _this._enableMove = false;
          _this._moveBtnStartPos = null;
          _this._cameraBtnPos = null;
          _this._moveBtnSize = 0;
          _this._cameraPos = null;
          _this._lastFrameRate = 0;
          _this._lastTriangleCount = 0;
          _this._lastRenderTime = 0;
          _this._lastUpdateTime = 0;
          _this._sceneData = null;
          _this._device = null;
          return _this;
        }
        var _proto = LodTest.prototype;
        _proto.onAddButton = function onAddButton() {
          var column = 14;
          for (; column > 0; column--) {
            for (var i = 0; i < MAX_COUNT_TO_ADD; i++) {
              var node = instantiate(this.prefab);
              var pos = v3((i - MAX_COUNT_TO_ADD / 2) * 5, 0, 10 - column * 6);
              node.setPosition(pos);
              var lodGroup = node.getComponent(LODGroup);
              node.parent = director.getScene();
              if (lodGroup) {
                this._lodGroups.push(lodGroup);
              }
            }
          }
        };
        _proto.onToggleChanged = function onToggleChanged(toggle) {
          var level = toggle.isChecked ? -1 : 0;
          // if (toggle.isChecked) {
          //     this.enableLodLabel.string = "Disable LOD";
          // } else {
          //     this.enableLodLabel.string = "Enable LOD";
          // }
          var enabled = toggle.isChecked;
          this._lodGroups.forEach(function (lodGroup) {
            // lodGroup.forceLOD(level);
            lodGroup.enabled = enabled;
            for (var i = 1; i < lodGroup.lodCount; i++) {
              for (var k = 0; k < lodGroup.LODs[i].rendererCount; k++) {
                var mr = lodGroup.LODs[i].getRenderer(k);
                if (mr) {
                  mr.enabled = enabled;
                }
              }
            }
          });
        };
        _proto.onSliderChange = function onSliderChange(slider) {
          this.cameraComp.node.setPosition(this._cameraPos.x, this._cameraPos.y, 2 - slider.progress);
        };
        _proto.start = function start() {
          var _this$cameraButton$no;
          this._device = gfx.deviceManager.gfxDevice;
          this._cameraPos = this.cameraComp.node.getPosition();
          this.cameraButton.node.on(NodeEventType.TOUCH_START, this._onTouchStart, this);
          this.cameraButton.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMove, this);
          this.cameraButton.node.on(NodeEventType.TOUCH_END, this._onTouchEnd, this);
          this.cameraButton.node.on(NodeEventType.TOUCH_CANCEL, this._onTouchEnd, this);
          this._moveBtnSize = ((_this$cameraButton$no = this.cameraButton.node.getComponent(UITransform)) == null ? void 0 : _this$cameraButton$no.contentSize.width) || 0;
          // this._sceneData = director.getScene()?.renderScene?.root.pipeline.pipelineSceneData || null;
          // director.getScene()?.renderScene?.root.pipelineEvent.on(PipelineEventType.RENDER_CAMERA_END, this._afterCulling, this);
          // director.on(Director.EVENT_BEFORE_DRAW, this._beforeDraw, this);
          // director.on(Director.EVENT_AFTER_DRAW, this._afterDraw, this);

          this.onAddButton();
        };
        _proto.onDestroy = function onDestroy() {
          //
        };
        _proto.update = function update(deltaTime) {
          var _director$getScene;
          var frameRate = ((_director$getScene = director.getScene()) == null || (_director$getScene = _director$getScene.renderScene) == null ? void 0 : _director$getScene.root.fps) || 0;
          if (this._lastFrameRate !== frameRate) {
            this._lastFrameRate = frameRate;
            this.frameRateLabel.string = "" + frameRate;
          }
          if (this._lastTriangleCount != this._device.numTris) {
            this._lastTriangleCount = this._device.numTris;
            this.triangleCountLabel.string = "" + this._lastTriangleCount;
          }
        }

        // private _beforeDraw() {
        //     this._lastRenderTime = performance.now();
        // }

        // private _afterDraw() {
        //     const now = performance.now();
        //     if (now - this._lastUpdateTime < RECALCULATE_RENDER_TIME_DURATION) return;
        //     this._lastUpdateTime = now;
        //     const elapseTime = now - this._lastRenderTime;
        //     this.renderTimeLabel.string = elapseTime.toFixed(3);
        // }
        ;

        _proto._afterCulling = function _afterCulling(target) {
          if (target !== this.cameraComp.camera) return;
          var count = 0;
          if (this._sceneData) {
            this._sceneData.renderObjects.forEach(function (renderObject, index) {
              var _renderObject$model$n, _meshRender$mesh;
              var meshRender = (_renderObject$model$n = renderObject.model.node) == null ? void 0 : _renderObject$model$n.getComponent(MeshRenderer);
              var primitives = meshRender == null || (_meshRender$mesh = meshRender.mesh) == null ? void 0 : _meshRender$mesh.struct.primitives;
              primitives == null || primitives.forEach(function (subMesh) {
                if (subMesh && subMesh.indexView) {
                  count += subMesh.indexView.count;
                }
              });
            });
          }
          count /= 3;
          if (this._lastTriangleCount !== count) {
            this._lastTriangleCount = count;
            this.triangleCountLabel.string = "" + count;
          }
        };
        _proto._onTouchStart = function _onTouchStart(event) {
          this._enableMove = true;
          this._moveBtnStartPos = event.getLocation();
          this._cameraBtnPos = this.cameraButton.node.position.clone();
        };
        _proto._onTouchEnd = function _onTouchEnd(event) {
          this._enableMove = false;
          this.cameraButton.node.setPosition(this._cameraBtnPos.x, this._cameraBtnPos.y);
        };
        _proto._onTouchMove = function _onTouchMove(event) {
          if (!this._enableMove) return;
          var touch = event.getLocation();
          var diffX = touch.x - this._moveBtnStartPos.x;
          var diffY = touch.y - this._moveBtnStartPos.y;
          if (diffX > 0 && diffX > this._moveBtnSize) {
            diffX = this._moveBtnSize;
          } else if (diffX < 0 && diffX < -this._moveBtnSize) {
            diffX = -this._moveBtnSize;
          }
          if (diffY > 0 && diffY > this._moveBtnSize) {
            diffY = this._moveBtnSize;
          } else if (diffY < 0 && diffY < -this._moveBtnSize) {
            diffY = -this._moveBtnSize;
          }
          // const z = Math.abs(diffX + diffY) / 100;
          this.cameraButton.node.setPosition(this._cameraBtnPos.x + diffX, this._cameraBtnPos.y + diffY);
          this.cameraComp.node.setPosition(this._cameraPos.x + diffX * 0.8, this._cameraPos.y, 2 + diffY * 2.1);
        };
        return LodTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cameraButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cameraComp", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frameRateLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "triangleCountLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "enableLodLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "renderTimeLabel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "distanceSlider", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./setPriority.ts', './node-move.ts', './compressWithGray.ts', './single-compress.ts', './mipmapCheck.ts', './setMipRange-cube.ts', './setMipRange-quad.ts', './Client.ts', './Utils.ts', './backbutton.ts', './common.ts', './folditem.ts', './listitem.ts', './scenelist.ts', './AnimationEventTesting.ts', './LabeledSlider.ts', './MaterialTextureAnimation.ts', './MorphController.ts', './PlaybackRange.ts', './SwitchAnimation.ts', './UniformKTest.ts', './instanced-skinning.ts', './toggler.ts', './unlit-quad.ts', './asset-bundle-zip.ts', './asset-bundle.ts', './release-depend-asset.ts', './loadSubPack.ts', './TestBufferAsset.ts', './loadSubPackages.ts', './test-atlas-config.ts', './testJsList.ts', './AudioControl.ts', './AudioController.ts', './audioBuffer.ts', './audioOperationQueue.ts', './DirectorAfterDrawTest.ts', './cameraCotroller.ts', './dynamic-mesh.ts', './lod-test.ts', './acceleration-event.ts', './event-first.ts', './event-info.ts', './MultiTouchCtrl.ts', './node-event.ts', './dont-be-swallowed.ts', './event-order.ts', './gamepad-event.ts', './keyboard-event.ts', './mouse-event.ts', './screen-event.ts', './show-hide-event.ts', './touch-event.ts', './geometry-creator.ts', './player-controller.ts', './sphere_light.ts', './sport_light_1.ts', './sport_light_2.ts', './ChangeLanguage.ts', './NewComponent.ts', './builtin-textures-test.ts', './material-test.ts', './geometries.ts', './light-hint.ts', './pre-filter-envmap.ts', './tangent-visualizer.ts', './DragonBonesAttach.ts', './DragonBonesCollider.ts', './DragonBonesCtrl.ts', './DragonBonesMode.ts', './LoadDragonBones.ts', './ReplaceSlotDisplay.ts', './GoblinTest.ts', './LoadSpine.ts', './SpineApiTest.ts', './SpineAttach.ts', './SpineAttachment.ts', './SpineBoyCtrl.ts', './SpineCollider.ts', './SpineMeshEffect.ts', './SpineMeshJitterEffect.ts', './SpinePhysics.ts', './SpineSharedTest.ts', './SpineSkin.ts', './SpineTestCrash.ts', './SpineVersionBind.ts', './dynamic-tiled-map.ts', './puzzle.ts', './shield-node.ts', './NetworkCtrl.ts', './NetworkDownload.ts', './NetworkWebsocket.ts', './ButtonEventCapture.ts', './CameraController.ts', './ShowTips.ts', './TransformController.ts', './rotate.ts', './ChangeBloom.ts', './Player-box-projection.ts', './PlayerBoxProjection.ts', './planarReflectionController.ts', './capture_to_web.ts', './RTCapture.ts', './RTPixel.ts', './render-camera-to-model.ts', './render-texture-sample.ts', './render-ui-to-model.ts', './render-ui-to-spriteframe.ts', './use-render-texture-to-model.ts', './use-render-texture-to-sprite.ts', './use-render-texture-asset.ts', './batch-tester.ts', './instanced-color.ts', './static-batcher.ts', './SwitchHDR.ts', './IntersectRayTest.ts', './RaycastCanvasTest.ts', './RaycastColliderTest.ts', './RaycastModelTest.ts', './wire-frame.ts', './containerStragety.ts', './screenTest.ts', './AssetLoading.ts', './LoadResDir_example.ts', './LoadRes_example.ts', './PreloadAssets.ts', './BuildTimeConstantsTest.ts', './ByteCodeCache.ts', './ByteCodeLoader.ts', './deprecated-testing.ts', './AsyncFunctionsTest.ts', './CoreJsTest.ts', './SkewTest.ts', './pause.ts', './pauseButton.ts', './restart.ts', './terrain123.ts', './TweenActionCallBack.ts', './TweenClone.ts', './TweenCustomProgress.ts', './TweenDelay.ts', './TweenParallel.ts', './TweenReadOnly.ts', './TweenRemoveSelf.ts', './TweenRepeat.ts', './TweenRepeat2.ts', './TweenRepeatForever.ts', './TweenRepeatUnion.ts', './TweenShowHide.ts', './TweenStop.ts', './TweenThen.ts', './tween-test.ts', './fill-sprite.ts', './SpriteAttributeSwitch.ts', './tiled.ts', './trimmed.ts', './gold.ts', './LabelAttributeSwitch.ts', './VietnameseText.ts', './click-and-listener.ts', './click-change-size.ts', './widget-destroy.ts', './widget-preformance.ts', './layout-change-order.ts', './list-view-ctrl.ts', './scroll-view-bounce-back.ts', './scroll-view-events.ts', './scroll-view-scroll-to-offset.ts', './rich-text-child-state.ts', './rich-text-event.ts', './rich-text-font-color.ts', './graphics-mask.ts', './mask-inverted-event.ts', './mask-migrate.ts', './mask-type-change.ts', './mask-use-image-stencil.ts', './toggle-ctrl.ts', './toggle-event-ctrl.ts', './slider-ctrl.ts', './progress.ts', './editbox-ctrl.ts', './editbox-event.ts', './change-graphics.ts', './graphics-continuous-filling.ts', './graphics-draw-before-init.ts', './graphics-line-join.ts', './page-view-ctrl.ts', './coordinate-ui-3d.ts', './coordinate-ui-local-local.ts', './rotate-around-axis.ts', './Test.ts', './click-event.ts', './static-ui.ts', './changeUniform.ts', './video-player-ctrl.ts', './webview-ctrl.ts', './motion-streak-ctrl.ts', './particle-2d-position-type-change.ts', './particle-custom-change.ts', './particle-normal.ts', './particle-sprite-change.ts', './auto-change-opacity.ts', './move-ctrl.ts', './stringChange.ts', './BackPackUI.ts', './ButtonScaler.ts', './HomeUI.ts', './HeroSlot.ts', './ModelTest.ts', './visibility-changed.ts', './ui-log.ts', './migrate-canvas.ts', './extension-detection.ts', './first-person-camera.ts', './label-model-component.ts', './tips-ctrl.ts', './static-scene-list.ts', './icu-component.ts', './l10n-component.ts', './l10n-label.ts', './auto-config-intl-manager.ts', './icu-options.ts', './icu-type.ts', './l10n-listen-event.ts', './l10n-manager.ts', './l10n-options.ts', './localization-global.ts', './resource-data-manager.ts', './l10n.ts', './Intl.PluralRules.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/mask-inverted-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "70ef4zUKLxDA5zRBYDljNmp", "mask-inverted-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var MaskInvertedEvent = exports('MaskInvertedEvent', (_dec = ccclass("MaskInvertedEvent"), _dec2 = menu('UI/MaskInvertedEvent'), _dec3 = property(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MaskInvertedEvent, _Component);
        function MaskInvertedEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "string", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = MaskInvertedEvent.prototype;
        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_START, this.callback, this);
        };
        _proto.callback = function callback() {
          this.label.string = this.string;
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return MaskInvertedEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "string", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mask-migrate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "3eadcnV45BGHrXiKVuHmx28", "mask-migrate", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var mask_migrate = exports('mask_migrate', (_dec = ccclass('mask_migrate'), _dec2 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(mask_migrate, _Component);
        function mask_migrate() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "maskPerfab", _descriptor, _assertThisInitialized(_this));
          _this.ready = false;
          return _this;
        }
        var _proto = mask_migrate.prototype;
        _proto.start = function start() {
          var maskNode = instantiate(this.maskPerfab);
          maskNode.setParent(this.node);
          maskNode.setPosition(200, 0, 0);
          this.ready = true;
        };
        return mask_migrate;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "maskPerfab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mask-type-change.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Mask, SpriteFrame, Label, UITransform, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Mask = module.Mask;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "11d5fPPR6pJfaSdcqL6Ggz9", "mask-type-change", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var mask_type_change = exports('mask_type_change', (_dec = ccclass('mask_type_change'), _dec2 = type(Mask), _dec3 = type(SpriteFrame), _dec4 = type(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(mask_type_change, _Component);
        function mask_type_change() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "maskParent", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "image", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = mask_type_change.prototype;
        _proto.start = function start() {
          var _this2 = this;
          var mask = this.getComponent(Mask);
          var maskParent = this.maskParent;
          this.scheduleOnce(function () {
            mask.type = Mask.Type.GRAPHICS_ELLIPSE;
            _this2.scheduleOnce(function () {
              mask.inverted = true;
              maskParent.enabled = true;
              _this2.scheduleOnce(function () {
                mask.segments = 3;
                mask.inverted = false;
                _this2.scheduleOnce(function () {
                  maskParent.enabled = false;
                  mask.type = Mask.Type.GRAPHICS_RECT;
                  mask.inverted = true;
                  _this2.scheduleOnce(function () {
                    mask.enabled = false;
                    _this2.scheduleOnce(function () {
                      maskParent.enabled = false;
                      mask.type = Mask.Type.GRAPHICS_STENCIL;
                      var g = mask.graphics;
                      g.clear();
                      g.lineWidth = 10;
                      g.fillColor.fromHEX('#ff0000');
                      g.moveTo(-40, 0);
                      g.lineTo(0, -75);
                      g.lineTo(40, 0);
                      g.lineTo(0, 75);
                      g.close();
                      g.stroke();
                      g.fill();
                      mask.enabled = true;
                      _this2.scheduleOnce(function () {
                        maskParent.enabled = true;
                        mask.inverted = false;
                        mask.type = Mask.Type.SPRITE_STENCIL;
                        mask.spriteFrame = _this2.image;
                        mask.alphaThreshold = 0.1;
                        mask.node.getComponent(UITransform).setContentSize(100, 100);
                        _this2.scheduleOnce(function () {
                          mask.enabled = false;
                          _this2.scheduleOnce(function () {
                            mask.enabled = true;
                            _this2.scheduleOnce(function () {
                              mask.type = Mask.Type.GRAPHICS_RECT;
                              _this2.label.string = '测试完成';
                            }, 2);
                          }, 2);
                        }, 2);
                      }, 2);
                    }, 2);
                  }, 2);
                }, 2);
              }, 2);
            }, 2);
          }, 2);
        };
        return mask_type_change;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "maskParent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "image", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mask-use-image-stencil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Label, Mask, UITransform, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Label = module.Label;
      Mask = module.Mask;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "37545UEL51DoZgd4hrYyzOH", "mask-use-image-stencil", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var MaskUseImageStencil = exports('MaskUseImageStencil', (_dec = ccclass('MaskUseImageStencil'), _dec2 = type(SpriteFrame), _dec3 = type(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MaskUseImageStencil, _Component);
        function MaskUseImageStencil() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "image", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = MaskUseImageStencil.prototype;
        _proto.start = function start() {
          var _this2 = this;
          var mask = this.getComponent(Mask);
          this.scheduleOnce(function () {
            mask.type = Mask.Type.SPRITE_STENCIL;
            _this2.scheduleOnce(function () {
              mask.enabled = false;
              _this2.scheduleOnce(function () {
                mask.type = Mask.Type.GRAPHICS_STENCIL;
                var g = mask.graphics;
                g.clear();
                g.lineWidth = 10;
                g.fillColor.fromHEX('#ff0000');
                g.moveTo(-80, 0);
                g.lineTo(0, -150);
                g.lineTo(80, 0);
                g.lineTo(0, 150);
                g.close();
                g.stroke();
                g.fill();
                mask.enabled = true;
                _this2.scheduleOnce(function () {
                  mask.type = Mask.Type.SPRITE_STENCIL;
                  mask.spriteFrame = _this2.image;
                  mask.alphaThreshold = 0.1;
                  mask.node.getComponent(UITransform).setContentSize(100, 100);
                  _this2.scheduleOnce(function () {
                    mask.type = Mask.Type.GRAPHICS_RECT;
                    _this2.label.string = '测试完成';
                  }, 2);
                }, 2);
              }, 1);
            }, 1);
          }, 2);
        };
        return MaskUseImageStencil;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "image", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/material-test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Color, Node, MeshRenderer, director, Label, gfx, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      Node = module.Node;
      MeshRenderer = module.MeshRenderer;
      director = module.director;
      Label = module.Label;
      gfx = module.gfx;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "a133filF+BE/b9gjDYAmj56", "material-test", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var color = Color.WHITE.clone();
      var MaterialTest = exports('MaterialTest', (_dec = ccclass("MaterialTest"), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MaterialTest, _Component);
        function MaterialTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "manualAlbedo", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "manualMetallic", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "manualAlphaTest", _descriptor3, _assertThisInitialized(_this));
          _this._material = null;
          _this._startFrames = 0;
          return _this;
        }
        var _proto = MaterialTest.prototype;
        _proto.start = function start() {
          this._material = this.node.getComponent(MeshRenderer).material;
          this._startFrames = director.getTotalFrames();
        };
        _proto.update = function update() {
          this.node.setRotationFromEuler(0, (director.getTotalFrames() - this._startFrames) * 0.1, 0);
        }

        // callbacks
        ;

        _proto.useAlbedoMap = function useAlbedoMap(e) {
          this._material.recompileShaders({
            USE_ALBEDO_MAP: e.isChecked
          });
          this.manualAlbedo.active = !e.isChecked;
          if (e.isChecked) {
            this._material.setProperty('albedo', Color.WHITE.clone());
          }
        };
        _proto.useMetallicMap = function useMetallicMap(e) {
          this._material.recompileShaders({
            USE_METALLIC_ROUGHNESS_MAP: e.isChecked
          });
          this.manualMetallic.active = !e.isChecked;
        };
        _proto.useAlphaTest = function useAlphaTest(e) {
          this._material.recompileShaders({
            USE_ALPHA_TEST: e.isChecked
          });
          this.manualAlphaTest.active = e.isChecked;
        };
        _proto.setAlbedo = function setAlbedo(e) {
          var li = e.progress * 255;
          color.set(li, li, li, li);
          this._material.setProperty('albedo', color);
          this.manualAlbedo.getComponentInChildren(Label).string = e.progress.toFixed(1);
        };
        _proto.setMetallic = function setMetallic(e) {
          this._material.setProperty('metallic', e.progress);
          this.manualMetallic.getComponentInChildren(Label).string = e.progress.toFixed(1);
        };
        _proto.setAlphaThreshold = function setAlphaThreshold(e) {
          this._material.setProperty('alphaThreshold', e.progress);
          this.manualAlphaTest.getComponentInChildren(Label).string = e.progress.toFixed(1);
        };
        _proto.cullFrontFace = function cullFrontFace(e) {
          this._material.overridePipelineStates({
            rasterizerState: {
              cullMode: e.isChecked ? gfx.CullMode.FRONT : gfx.CullMode.BACK
            }
          });
        };
        return MaterialTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "manualAlbedo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "manualMetallic", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "manualAlphaTest", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MaterialTextureAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Texture2D, Animation, error, Component, animation, AnimationClip, MeshRenderer;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Texture2D = module.Texture2D;
      Animation = module.Animation;
      error = module.error;
      Component = module.Component;
      animation = module.animation;
      AnimationClip = module.AnimationClip;
      MeshRenderer = module.MeshRenderer;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "7bcf6oXnxJKBK7SHzLOoCmh", "MaterialTextureAnimation", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * This component demonstrates how material texture animation run.
       */
      var MaterialTextureAnimation = exports('MaterialTextureAnimation', (_dec = ccclass("MaterialTextureAnimation"), _dec2 = property([Texture2D]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MaterialTextureAnimation, _Component);
        function MaterialTextureAnimation() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * Textures to be animated.
           */
          _initializerDefineProperty(_this, "textures", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = MaterialTextureAnimation.prototype;
        _proto.start = function start() {
          var animationComponent = this.node.getComponent(Animation);
          if (!animationComponent) {
            error("Animation component is required for this script.");
            return;
          }
          var clip = createMaterialTextureAnimationClip(this.textures, 0);
          clip.name = 'forward';
          var clip2 = createMaterialTextureAnimationClip(this.textures, 1);
          clip2.name = 'deferred';
          animationComponent.clips = [clip, clip2];
          animationComponent.defaultClip = clip;
          //animationComponent.playOnLoad = true;
          var state1 = animationComponent.getState('forward');
          state1.play();
          var state2 = animationComponent.getState('deferred');
          state2.play();
        };
        return MaterialTextureAnimation;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "textures", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      function createMaterialTextureAnimationClip(textures, passIndex) {
        // Animate every texture for 1 sec.
        var defaultKeys = textures.map(function (texture, index) {
          return index;
        });

        // Setup the value adapter.
        var uca = new animation.UniformProxyFactory();
        uca.passIndex = passIndex;
        uca.uniformName = 'albedoMap';
        var animationClip = new AnimationClip();
        animationClip.wrapMode = AnimationClip.WrapMode.Loop;
        animationClip.duration = defaultKeys[defaultKeys.length - 1] + 1;
        var track = new animation.ObjectTrack();
        animationClip.addTrack(track);
        track.path.toComponent(MeshRenderer).toProperty('sharedMaterials').toElement(0);
        track.proxy = uca;
        track.channel.curve.assignSorted(defaultKeys, textures);
        return animationClip;
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/migrate-canvas.ts", ['cc'], function () {
  var cclegacy, director, Director, Canvas, Camera, Node;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      Director = module.Director;
      Canvas = module.Canvas;
      Camera = module.Camera;
      Node = module.Node;
    }],
    execute: function () {
      cclegacy._RF.push({}, "357c1B+j+ZEKrORrCBMY+0Y", "migrate-canvas", undefined);
      var customLayerMask = 0x000fffff;
      var builtinLayerMask = 0xfff00000;
      director.on(Director.EVENT_AFTER_SCENE_LAUNCH, function () {
        var _director$getScene, _director$getScene2, _director$getScene3;
        var roots = (_director$getScene = director.getScene()) == null ? void 0 : _director$getScene.children;
        var allCanvases = (_director$getScene2 = director.getScene()) == null ? void 0 : _director$getScene2.getComponentsInChildren(Canvas);
        if (allCanvases.length <= 1) return;
        allCanvases = allCanvases.filter(function (x) {
          return !!x.cameraComponent;
        });
        var allCameras = (_director$getScene3 = director.getScene()) == null ? void 0 : _director$getScene3.getComponentsInChildren(Camera);
        var usedLayer = 0;
        allCameras.forEach(function (x) {
          return usedLayer |= x.visibility & customLayerMask;
        });
        var persistCanvas = [];
        for (var i = 0, l = roots.length; i < l; i++) {
          var root = roots[i];
          if (!director.isPersistRootNode(root)) continue;
          var canvases = root.getComponentsInChildren(Canvas);
          if (canvases.length === 0) continue;
          persistCanvas.push.apply(persistCanvas, canvases.filter(function (x) {
            return !!x.cameraComponent;
          }));
        }
        persistCanvas.forEach(function (val) {
          var isLayerCollided = allCanvases.find(function (x) {
            return x !== val && x.cameraComponent.visibility & val.cameraComponent.visibility & customLayerMask;
          });
          if (isLayerCollided) {
            var availableLayers = ~usedLayer;
            var lastAvailableLayer = availableLayers & ~(availableLayers - 1);
            val.cameraComponent.visibility = lastAvailableLayer | val.cameraComponent.visibility & builtinLayerMask;
            setChildrenLayer(val.node, lastAvailableLayer);
            usedLayer |= availableLayers;
          }
        });
      });
      function setChildrenLayer(node, layer) {
        for (var i = 0, l = node.children.length; i < l; i++) {
          node.children[i].layer = layer;
          setChildrenLayer(node.children[i], layer);
        }
      }
      var setParentEngine = Node.prototype.setParent;
      {
        Node.prototype.setParent = function (value, keepWorldTransform) {
          setParentEngine.call(this, value, keepWorldTransform);
          if (!value) return;
          // find canvas
          var layer = getCanvasCameraLayer(this);
          if (layer) {
            this.layer = layer;
            setChildrenLayer(this, layer);
          }
        };
      }
      function getCanvasCameraLayer(node) {
        var layer = 0;
        var canvas = node.getComponent(Canvas);
        if (canvas && canvas.cameraComponent) {
          if (canvas.cameraComponent.visibility & canvas.node.layer) {
            layer = canvas.node.layer;
          } else {
            layer = canvas.cameraComponent.visibility & ~(canvas.cameraComponent.visibility - 1);
          }
          return layer;
        }
        if (node.parent) {
          layer = getCanvasCameraLayer(node.parent);
        }
        return layer;
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mipmapCheck.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ImageAsset, Material, Node, Label, Texture2D, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ImageAsset = module.ImageAsset;
      Material = module.Material;
      Node = module.Node;
      Label = module.Label;
      Texture2D = module.Texture2D;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "5f33161PHVPoIie2mLpq1Oc", "mipmapCheck", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MipmapCheck = exports('MipmapCheck', (_dec = ccclass('MipmapCheck'), _dec2 = property({
        type: ImageAsset
      }), _dec3 = property({
        type: Material
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MipmapCheck, _Component);
        function MipmapCheck() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "mipMaps", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mat", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cameraNode", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "showTip", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cameraSpeed", _descriptor5, _assertThisInitialized(_this));
          _this.yMin = 15;
          _this.yMax = 200;
          _this.currY = _this.yMin;
          _this.moveCount = 0;
          _this.memeryBefore = 0;
          _this.memeryAfter = 0;
          _this.textureUsed = null;
          _this.allDone = false;
          _this.ready = false;
          return _this;
        }
        var _proto = MipmapCheck.prototype;
        _proto.start = function start() {
          var _this2 = this;
          this.scheduleOnce(function () {
            _this2.memeryBefore = cc.director.root.device.memoryStatus.textureSize;
            _this2.textureUsed = new Texture2D();
            _this2.textureUsed.mipmaps = _this2.mipMaps;
            _this2.textureUsed.setMipFilter(2);
            _this2.mat.setProperty('albedoMap', _this2.textureUsed);
            _this2.ready = true;
          }, 1);
        };
        _proto.checkMemory = function checkMemory() {
          this.memeryAfter = cc.director.root.device.memoryStatus.textureSize;
          if (this.memeryAfter === this.memeryBefore) {
            this.showTip.string = 'Memory Check Pass!';
          } else {
            this.showTip.string = 'Memory Check Fail!';
            this.showTip.color = Color.RED;
          }
          this.allDone = true;
        };
        _proto.update = function update(deltaTime) {
          if (this.allDone || !this.ready) {
            return;
          }
          if (!this.textureUsed) {
            this.checkMemory();
            return;
          }
          if (this.moveCount >= 2) {
            var _this$textureUsed;
            this.mat.setProperty('albedoMap', null);
            (_this$textureUsed = this.textureUsed) == null || _this$textureUsed.destroy();
            this.textureUsed = null;
            return;
          }
          if (this.currY > this.yMax) {
            this.cameraSpeed = -this.cameraSpeed;
          } else if (this.currY < this.yMin) {
            this.cameraSpeed = -this.cameraSpeed;
            this.moveCount++;
          }
          this.currY += this.cameraSpeed;
          this.cameraNode.setPosition(0, this.currY, 0);
        };
        return MipmapCheck;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mipMaps", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cameraNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "showTip", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "cameraSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ModelTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Label, instantiate, Layers, UIMeshRenderer, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      instantiate = module.instantiate;
      Layers = module.Layers;
      UIMeshRenderer = module.UIMeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "15859qFB2VKHqSh4HAQ+N0S", "ModelTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var ModelTest = exports('ModelTest', (_dec = ccclass("ModelTest"), _dec2 = menu('UI/ModelTest'), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Prefab
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ModelTest, _Component);
        function ModelTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "mount", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "prefab", _descriptor2, _assertThisInitialized(_this));
          _this._meshMounted = false;
          _this._buttonLabel = null;
          return _this;
        }
        var _proto = ModelTest.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this._buttonLabel = this.node.children[0].getComponent(Label);
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.onClick = function onClick() {
          if (this._meshMounted) {
            var c = this.mount.children[0];
            c.removeFromParent();
            c.destroy();
            this._buttonLabel.string = 'Add';
            this._meshMounted = false;
          } else {
            var _c = instantiate(this.prefab);
            _c.layer = Layers.Enum.UI_2D;
            _c.setScale(100, 100, 100);
            this.mount.addChild(_c);
            _c.addComponent(UIMeshRenderer);
            this._buttonLabel.string = 'Remove';
            this._meshMounted = true;
          }
        };
        return ModelTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mount", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MorphController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, _decorator, CCFloat, Prefab, Layout, MeshRenderer, instantiate, find, Label, Slider, EventHandler, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Prefab = module.Prefab;
      Layout = module.Layout;
      MeshRenderer = module.MeshRenderer;
      instantiate = module.instantiate;
      find = module.find;
      Label = module.Label;
      Slider = module.Slider;
      EventHandler = module.EventHandler;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _dec3, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "4e36bPGhGpItLiswUnsyx0x", "MorphController", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode;
      var NumberArray = exports('NumberArray', (_dec = ccclass('NumberArray'), _dec2 = property({
        type: [CCFloat],
        range: [0, 1, 0.1],
        slide: true
      }), _dec(_class = (_class2 = function NumberArray(n) {
        _initializerDefineProperty(this, "array", _descriptor, this);
        this.array = new Array(n).fill(0);
      }, _descriptor = _applyDecoratedDescriptor(_class2.prototype, "array", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      var MorphController = exports('MorphController', (_dec3 = ccclass('MorphController'), _dec4 = property({
        type: Prefab
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: Layout
      }), _dec7 = property({
        type: NumberArray
      }), _dec3(_class4 = executeInEditMode(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MorphController, _Component);
        function MorphController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._weightsControl = [];
          _this._modelComp = null;
          _this._morph = void 0;
          _this._totalTargets = [];
          _this._targetNames = [];
          _initializerDefineProperty(_this, "controlItemPrfb", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "controlMaskPrfb", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "itemLayout", _descriptor4, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = MorphController.prototype;
        _proto.setWeight = function setWeight(weights) {
          if (weights.length === 0) {
            return;
          }
          var newWeights = this.dataConversion(weights);
          for (var iSubMeshMorph = 0; iSubMeshMorph < this._morph.subMeshMorphs.length; ++iSubMeshMorph) {
            if (this._morph.subMeshMorphs[iSubMeshMorph]) {
              for (var iShape = 0; iShape < this._morph.subMeshMorphs[iSubMeshMorph].targets.length; ++iShape) {
                this._modelComp.setWeight(newWeights[iSubMeshMorph][iShape], iSubMeshMorph, iShape);
              }
            }
          }
        }

        // 数据转换
        // 因为要在编辑器上实现二维数组，封装了 NumberArray 类，把 NumberArray[] 转换成 number[][] 数据
        ;

        _proto.dataConversion = function dataConversion(weights) {
          var values = [];
          var iCount = 0;
          for (var iSubMeshMorph = 0; iSubMeshMorph < this._morph.subMeshMorphs.length; ++iSubMeshMorph) {
            values[iSubMeshMorph] = [];
            if (this._morph.subMeshMorphs[iSubMeshMorph]) {
              values[iSubMeshMorph] = weights[iCount].array;
              ++iCount;
            } else {
              values[iSubMeshMorph] = null;
            }
          }
          return values;
        };
        _proto.start = function start() {
          this._modelComp = this.node.getComponent(MeshRenderer);
          if (!this._modelComp) {
            return;
          }
          var mesh = this._modelComp.mesh;
          if (!mesh) {
            return;
          }
          this._morph = mesh.struct.morph;
          if (!this._morph) {
            return;
          }
          if (this._morph.subMeshMorphs.length === 0) {
            // TODO submeshcount是0
            console.warn('submesh count is 0');
            return;
          }
          var firstNonNullSubMeshMorph = this._morph.subMeshMorphs.find(function (subMeshMorph) {
            return !!subMeshMorph;
          });
          if (!firstNonNullSubMeshMorph) {
            // TODO 任何 submesh 都没有Morph
            console.warn("all submesh don't have morph");
            return;
          }
          if (!this._morph.subMeshMorphs.every(function (subMeshMorph) {
            return !subMeshMorph || subMeshMorph.targets.length === firstNonNullSubMeshMorph.targets.length;
          })) {
            // TODO 每个 submesh 的target数量不一样
            console.warn("not all submesh count are the same");
          }
          var subMeshMorphs = [];
          for (var i = 0; i < this._morph.subMeshMorphs.length; i++) {
            if (this._morph.subMeshMorphs[i]) {
              subMeshMorphs.push(this._morph.subMeshMorphs[i]);
            }
          }
          for (var _i = 0; _i < this._morph.targetNames.length; _i++) {
            var targetNames = this._morph.targetNames[_i].split('.');
            this._targetNames.push(targetNames[targetNames.length - 1]);
          }
          var nTargets = [];
          for (var _i2 = 0; _i2 < subMeshMorphs.length; _i2++) {
            var count = subMeshMorphs[_i2] && subMeshMorphs[_i2].targets.length > 0 ? subMeshMorphs[_i2].targets.length : 0;
            nTargets.push(count);
          }
          this._totalTargets = nTargets;
          for (var _i3 = 0; _i3 < nTargets.length; _i3++) {
            var nArray = new NumberArray(nTargets[_i3]);
            this.weightsControl.push(nArray);
          }
          {
            this.initUI();
          }
        };
        _proto.initUI = function initUI() {
          var _this$itemLayout$getC;
          var iCount = 0;
          for (var i = 0; i < this._totalTargets.length; i++) {
            if (this._totalTargets[i] > 0) {
              var _find;
              var controlMask = instantiate(this.controlMaskPrfb);
              controlMask.parent = this.itemLayout.node;
              var nameLabel = (_find = find('Name', controlMask)) == null ? void 0 : _find.getComponent(Label);
              if (nameLabel) {
                nameLabel.string = "SubMesh " + iCount;
                iCount++;
              }
            }
            for (var j = 0; j < this._totalTargets[i]; j++) {
              var _find2, _find3;
              var controllItem = instantiate(this.controlItemPrfb);
              controllItem.parent = this.itemLayout.node;
              var _nameLabel = (_find2 = find('Name', controllItem)) == null ? void 0 : _find2.getComponent(Label);
              if (_nameLabel) {
                if (this._targetNames[j]) {
                  _nameLabel.string = "Shape " + j + " : " + this._targetNames[j];
                } else {
                  _nameLabel.string = '' + j;
                }
              }
              var slider = (_find3 = find('Slider', controllItem)) == null ? void 0 : _find3.getComponent(Slider);
              var sliderEventHandler = new EventHandler();
              sliderEventHandler.target = this.node;
              sliderEventHandler.handler = "onSliderChanged";
              sliderEventHandler.component = "MorphController";
              var customEventData = i + "," + j;
              sliderEventHandler.customEventData = customEventData;
              slider == null || slider.slideEvents.push(sliderEventHandler);
            }
          }
          (_this$itemLayout$getC = this.itemLayout.getComponent(Layout)) == null || _this$itemLayout$getC.updateLayout();
        };
        _proto.onSliderChanged = function onSliderChanged(target, customEventData) {
          var customEventDatas = customEventData.split(',');
          var x = Number.parseInt(customEventDatas[0]);
          var y = Number.parseInt(customEventDatas[1]);
          this.weightsControl[x].array[y] = target.progress;
          this.weightsControl = this.weightsControl;
        };
        _createClass(MorphController, [{
          key: "weightsControl",
          get: function get() {
            return this._weightsControl;
          },
          set: function set(value) {
            // undo时会每个元素进行数组的一次set，等待fix
            if (value.length != this._totalTargets.length) {
              return;
            }
            this._weightsControl = value;
            this.setWeight(this._weightsControl);
          }
        }]);
        return MorphController;
      }(Component), (_descriptor2 = _applyDecoratedDescriptor(_class5.prototype, "controlItemPrfb", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "controlMaskPrfb", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "itemLayout", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "weightsControl", [_dec7], Object.getOwnPropertyDescriptor(_class5.prototype, "weightsControl"), _class5.prototype)), _class5)) || _class4) || _class4));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/motion-streak-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, MotionStreak, Texture2D, Animation, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MotionStreak = module.MotionStreak;
      Texture2D = module.Texture2D;
      Animation = module.Animation;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "22ac1BM7stAG4GBDo0Vwp7q", "motion-streak-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var MotionStreakCtrl = exports('MotionStreakCtrl', (_dec = ccclass('MotionStreakCtrl'), _dec2 = type(MotionStreak), _dec3 = type(Texture2D), _dec4 = type(Animation), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MotionStreakCtrl, _Component);
        function MotionStreakCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "motionStreak", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "newTexture", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "animationCom", _descriptor3, _assertThisInitialized(_this));
          _this._changed = true;
          _this._oldTexture = null;
          _this._colorChanged = false;
          _this._newColor = Color.CYAN;
          _this._oldColor = Color.WHITE;
          return _this;
        }
        var _proto = MotionStreakCtrl.prototype;
        _proto.onLoad = function onLoad() {
          this._changed = true;
          this._oldTexture = this.motionStreak.texture;
          this._colorChanged = false;
        };
        _proto.onClick = function onClick() {
          if (this._changed) {
            this.setMotionStreak(2, 3, 20, this.newTexture);
          } else {
            this.setMotionStreak(0.5, 1, 30, this._oldTexture);
          }
          this._changed = !this._changed;
        };
        _proto.colorChange = function colorChange() {
          this._colorChanged = !this._colorChanged;
          if (this._colorChanged) {
            this.motionStreak.color = this._newColor;
          } else {
            this.motionStreak.color = this._oldColor;
          }
        };
        _proto.setMotionStreak = function setMotionStreak(fadeTime, minSeg, stroke, texture) {
          this.motionStreak.fadeTime = fadeTime;
          this.motionStreak.minSeg = minSeg;
          this.motionStreak.stroke = stroke;
          this.motionStreak.texture = texture;
        };
        _proto.lateUpdate = function lateUpdate() {
          if (!this.animationCom.getState('move_around').isPlaying) {
            this.animationCom.play();
          }
        };
        _proto.onDisable = function onDisable() {
          this.animationCom.stop();
        };
        return MotionStreakCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "motionStreak", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "newTexture", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "animationCom", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mouse-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, sys, view, input, Input, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      sys = module.sys;
      view = module.view;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "3624chdE5lPlaJCHJz9nFgZ", "mouse-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var systemEventPC = exports('systemEventPC', (_dec = ccclass("systemEventPC"), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(systemEventPC, _Component);
        function systemEventPC() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "labelShow", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "tip", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "notSupported", _descriptor3, _assertThisInitialized(_this));
          _this._ignoreMoveEvent = false;
          _this._timeoutId = -1;
          return _this;
        }
        var _proto = systemEventPC.prototype;
        _proto.onLoad = function onLoad() {
          if (sys.isMobile && !sys.hasFeature(sys.Feature.HPE)) {
            this.notSupported.active = true;
            return;
          }
          var canvasSize = view.getCanvasSize();
          this.tip.string = this.tip.string.replace('{{width}}', canvasSize.width.toString());
          this.tip.string = this.tip.string.replace('{{height}}', canvasSize.height.toString());
          input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
          input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);
          input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          input.on(Input.EventType.MOUSE_WHEEL, this.onMouseScroll, this);
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
          input.off(Input.EventType.MOUSE_UP, this.onMouseUp, this);
          input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          input.off(Input.EventType.MOUSE_WHEEL, this.onMouseScroll, this);
        };
        _proto.onMouseDown = function onMouseDown(event) {
          this.labelShow.string = "MOUSE_DOWN: " + event.getLocation();
        };
        _proto.onMouseMove = function onMouseMove(event) {
          // NOTE: bug on Windows Web platform, 'mouse-move' event is dispatched after 'mouse-up' event, even if you don't move your mouse.
          if (this._ignoreMoveEvent) {
            return;
          }
          this.labelShow.string = "MOUSE_MOVE: " + event.getLocation();
        };
        _proto.onMouseUp = function onMouseUp(event) {
          var _this2 = this;
          if (sys.os === sys.OS.WINDOWS) {
            this._ignoreMoveEvent = true;
            if (this._timeoutId !== -1) {
              clearTimeout(this._timeoutId);
            }
            this._timeoutId = setTimeout(function () {
              _this2._ignoreMoveEvent = false;
              _this2._timeoutId = -1;
            }, 100);
          }
          this.labelShow.string = "MOUSE_UP: " + event.getLocation();
        };
        _proto.onMouseScroll = function onMouseScroll(event) {
          this.labelShow.string = "MOUSE_SCROLL: " + event.getScrollY();
        };
        return systemEventPC;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelShow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "notSupported", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/move-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Canvas, Button, Label, UIOpacity, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Canvas = module.Canvas;
      Button = module.Button;
      Label = module.Label;
      UIOpacity = module.UIOpacity;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "f6997jHmY9DxbFWEZzEAt1X", "move-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var MoveCtrl = exports('MoveCtrl', (_dec = ccclass("MoveCtrl"), _dec2 = menu('opacity/MoveCtrl'), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Canvas), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoveCtrl, _Component);
        function MoveCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "moveNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "firstNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "canvas", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "prevButton", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nextButton", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "calcFormule", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "calcValue", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "calcResult", _descriptor8, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = MoveCtrl.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this.calcOpacity();
        };
        _proto.calcOpacity = function calcOpacity() {
          var uiOp = this.moveNode.getComponent(UIOpacity);
          var uiOpVal = 1.0;
          if (uiOp && uiOp.enabled) {
            uiOpVal = uiOp.opacity / 255;
          }
          this.calcFormule.string = '';
          this.calcValue.string = '';
          this.calcResult.string = '';
          if (this.moveNode.children.length == 0 && this.moveNode.getParent() == this.canvas.node || this.moveNode.children.length > 0 && this.moveNode.children[0] == this.firstNode) {
            this.calcFormule.string = this.moveNode.name + '.opacity';
            this.calcValue.string = uiOpVal.toFixed(2).toString();
            this.calcResult.string = uiOpVal.toFixed(2).toString();
            return;
          }
          var opacity = 1.0;
          var node = this.firstNode;
          while (node != null && node != this.moveNode) {
            var nodeUiOp = node.getComponent(UIOpacity);
            var nodeOpacity = 1.0;
            if (nodeUiOp) {
              nodeOpacity = nodeUiOp.opacity / 255;
            }
            if (node == this.firstNode) {
              this.calcFormule.string += node.name + '.opacity';
              this.calcValue.string += nodeOpacity.toFixed(2).toString();
            } else {
              this.calcFormule.string += ' * ' + node.name + '.opacity';
              this.calcValue.string += ' * ' + nodeOpacity.toFixed(2).toString();
            }
            opacity *= nodeOpacity;
            node = node.children[0];
          }
          this.calcFormule.string += ' * ' + this.moveNode.name + '.opacity';
          this.calcValue.string += ' * ' + uiOpVal.toFixed(2).toString();
          this.calcResult.string = (uiOpVal * opacity).toFixed(2).toString();
          return;
        };
        _proto.prevNode = function prevNode() {
          this.nextButton.interactable = true;
          var parent = this.moveNode.getParent();
          if (parent) {
            if (this.moveNode.children.length > 0) {
              var child = this.moveNode.children[0];
              child.parent = parent;
            }
            var grandParent = parent.getParent();
            if (grandParent) {
              this.moveNode.parent = grandParent;
            }
            parent.parent = this.moveNode;
            if (parent == this.firstNode) {
              var pos = new Vec3(this.moveNode.position);
              this.moveNode.setPosition(this.firstNode.position);
              this.firstNode.setPosition(pos);
              this.prevButton.interactable = false;
            }
          }
          this.calcOpacity();
        };
        _proto.nextNode = function nextNode() {
          this.prevButton.interactable = true;
          var parent = this.moveNode.getParent();
          var child = this.moveNode.children[0];
          if (child) {
            if (child == this.firstNode) {
              var pos = new Vec3(this.moveNode.position);
              this.moveNode.setPosition(this.firstNode.position);
              this.firstNode.setPosition(pos);
            }
            if (parent) {
              child.parent = parent;
            }
            if (child.children.length > 0) {
              var grandChild = child.children[0];
              grandChild.parent = this.moveNode;
            } else {
              this.nextButton.interactable = false;
            }
            this.moveNode.parent = child;
          }
          this.calcOpacity();
        };
        _proto.separate = function separate() {
          this.prevButton.interactable = false;
          this.nextButton.interactable = false;
          var parent = this.moveNode.getParent();
          if (this.moveNode.children.length > 0) {
            var child = this.moveNode.children[0];
            if (child == this.firstNode) {
              var pos = new Vec3(this.moveNode.position);
              this.firstNode.setPosition(pos);
            }
            child.parent = parent;
          } else {
            parent.removeChild(this.moveNode);
          }
          this.moveNode.setPosition(-350, 180);
          this.moveNode.parent = this.canvas.node;
          this.calcOpacity();
        };
        _proto.reset = function reset() {
          var parent = this.moveNode.getParent();
          if (parent) {
            parent.removeChild(this.moveNode);
          }
          if (this.moveNode.children.length > 0 && this.moveNode.children[0] == this.firstNode) {
            var pos = new Vec3(this.moveNode.position);
            this.firstNode.setPosition(pos);
          }
          var child = this.moveNode.children[0];
          if (child) {
            parent == null || parent.addChild(child);
          }
          var thirdNode = this.firstNode.children[0].children[0];
          if (thirdNode) {
            this.moveNode.setPosition(120, 0);
            var _child = thirdNode.children[0];
            this.moveNode.addChild(_child);
            thirdNode.removeChild(_child);
            thirdNode.addChild(this.moveNode);
            this.prevButton.interactable = true;
            this.nextButton.interactable = true;
          }
          this.calcOpacity();
        };
        _proto.setEnabled = function setEnabled(event) {
          var UiOp = this.moveNode.getComponent(UIOpacity);
          if (UiOp) {
            UiOp.enabled = !UiOp.enabled;
          }
          var label = event.currentTarget.getComponentInChildren(Label);
          if (UiOp != null && UiOp.enabled) {
            label.string = 'disable';
          } else {
            label.string = 'enable';
          }
          this.calcOpacity();
        }
        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return MoveCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "firstNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "prevButton", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nextButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "calcFormule", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "calcValue", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "calcResult", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MultiTouchCtrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec2, Toggle, Node, input, Input, macro, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
      Toggle = module.Toggle;
      Node = module.Node;
      input = module.input;
      Input = module.Input;
      macro = module.macro;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "778bduOkDZEJoQ2kO/MRUcF", "MultiTouchCtrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var _temp_vec2_1 = new Vec2();
      var _temp_vec2_2 = new Vec2();
      var _temp_delta = new Vec2();
      var MultiTouchCtrl = exports('MultiTouchCtrl', (_dec = ccclass("MultiTouchCtrl"), _dec2 = property(Toggle), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MultiTouchCtrl, _Component);
        function MultiTouchCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "toggle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "target", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = MultiTouchCtrl.prototype;
        _proto.start = function start() {
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.changeMulti();
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
        };
        _proto.changeMulti = function changeMulti() {
          if (this.toggle.isChecked) {
            macro.ENABLE_MULTI_TOUCH = true;
          } else {
            macro.ENABLE_MULTI_TOUCH = false;
          }
        };
        _proto.onTouchMove = function onTouchMove(event) {
          var touch = event.touch;
          var touches = event.getAllTouches();
          var changedTouches = event.getTouches();
          if (macro.ENABLE_MULTI_TOUCH && touches.length > 1) {
            var touch1 = null;
            var touch2 = null;
            var delta2 = new Vec2();
            if (changedTouches.length > 1) {
              touch1 = touches[0];
              touch2 = touches[1];
              touch2.getDelta(delta2);
            } else {
              touch1 = touch;
              var diffID = touch1.getID();
              var str = '';
              for (var i = 0; i < touches.length; i++) {
                var element = touches[i];
                str += element.getID() + " - ";
                if (element.getID() !== diffID) {
                  touch2 = element;
                  break;
                }
              }
            }
            var delta1 = touch1.getDelta(_temp_delta);
            var touchPoint1 = touch1.getLocation(_temp_vec2_1);
            var touchPoint2 = touch2.getLocation(_temp_vec2_2);
            var distance = touchPoint1.subtract(touchPoint2);
            var delta = delta1.subtract(delta2);
            if (Math.abs(distance.x) > Math.abs(distance.y)) {
              this.target.setScale((distance.x + delta.x) / distance.x * this.target.getScale().x, this.target.getScale().y, 1);
            } else {
              this.target.setScale(this.target.getScale().x, (distance.y + delta.y) / distance.y * this.target.getScale().y, 1);
            }
          }
        };
        return MultiTouchCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkCtrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Asset, loader, sys, assetManager, assert, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Asset = module.Asset;
      loader = module.loader;
      sys = module.sys;
      assetManager = module.assetManager;
      assert = module.assert;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "2b4f5mwy11Bl7RSImxjHp/i", "NetworkCtrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      // imported from socket-io.js

      var NetworkCtrl = exports('NetworkCtrl', (_dec = ccclass('NetworkCtrl'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Asset
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NetworkCtrl, _Component);
        function NetworkCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "xhr", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "xhrAB", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "xhrTimeout", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "websocket", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "wssCacert", _descriptor5, _assertThisInitialized(_this));
          _this._reconnectCount = 0;
          _this._xhrXHR = null;
          _this._xhrHRAB = null;
          _this._xhrXHRTimeout = null;
          _this._wsiSendBinary = null;
          _this._sioClient = null;
          _this.tag = '';
          return _this;
        }
        var _proto = NetworkCtrl.prototype;
        // use this for initialization
        _proto.start = function start() {
          this._wsiSendBinary = null;
          this._xhrXHR = null;
          this._xhrHRAB = null;
          this._xhrXHRTimeout = null;
          this.xhr.string = 'waiting..';
          this.xhrAB.string = 'waiting..';
          this.xhrTimeout.string = 'waiting..';
          this.websocket.string = 'waiting..';
          this.sendXHR();
          this.sendXHRAB();
          this.sendXHRTimeout();
          this.prepareWebSocket();
        };
        _proto.onDestroy = function onDestroy() {
          var wsiSendBinary = this._wsiSendBinary;
          if (wsiSendBinary) {
            wsiSendBinary.onopen = null;
            wsiSendBinary.onmessage = null;
            wsiSendBinary.onerror = null;
            wsiSendBinary.onclose = null;
            wsiSendBinary.close();
          }
          this.rmXhrEventListener(this._xhrXHR);
          this.rmXhrEventListener(this._xhrHRAB);
          this.rmXhrEventListener(this._xhrXHRTimeout);
        };
        _proto.sendXHR = function sendXHR() {
          var xhr = loader.getXMLHttpRequest();
          this.streamXHREventsToLabel(xhr, this.xhr, 'GET');
          xhr.open('GET', 'https://httpbin.org/get?show_env=1', true);
          if (sys.isNative) {
            xhr.setRequestHeader('Accept-Encoding', 'gzip,deflate');
          }

          // note: In Internet Explorer, the timeout property may be set only after calling the open()
          // method and before calling the send() method.
          xhr.timeout = 10000; // 10 seconds for timeout

          xhr.send();
          this._xhrXHR = xhr;
        };
        _proto.sendXHRAB = function sendXHRAB() {
          var xhr = loader.getXMLHttpRequest();
          this.streamXHREventsToLabel(xhr, this.xhrAB, 'POST');
          xhr.open('POST', 'https://httpbin.org/post');
          // set Content-type "text/plain" to post ArrayBuffer or ArrayBufferView
          xhr.setRequestHeader('Content-Type', 'text/plain');
          // Uint8Array is an ArrayBufferView
          xhr.send(new Uint8Array([1, 2, 3, 4, 5]));
          this._xhrHRAB = xhr;
        };
        _proto.sendXHRTimeout = function sendXHRTimeout() {
          var xhr = new XMLHttpRequest();
          this.streamXHREventsToLabel(xhr, this.xhrTimeout, 'GET');
          xhr.open('GET', 'https://192.168.22.222', true);

          // note: In Internet Explorer, the timeout property may be set only after calling the open()
          // method and before calling the send() method.
          xhr.timeout = 4000; // 4 seconds for timeout
          xhr.send();
          this._xhrXHRTimeout = xhr;
        };
        _proto.prepareWebSocket = function prepareWebSocket() {
          var self = this;
          var websocketLabel = this.websocket.node.getParent().getComponent(Label);
          var respLabel = this.websocket;
          var url = this.wssCacert.nativeUrl;
          if (assetManager.cacheManager) {
            url = assetManager.cacheManager.getCache(url) || assetManager.cacheManager.getTemp(url) || url;
          }
          // We should pass the cacert to libwebsockets used in native platform, otherwise the wss connection would be closed.
          // @ts-ignore
          this._wsiSendBinary = new WebSocket('wss://echo.websocket.events', [], url);
          this._wsiSendBinary.binaryType = 'arraybuffer';
          this._wsiSendBinary.onopen = function (evt) {
            respLabel.string = 'Opened!';
            websocketLabel.string = 'WebSocket: onopen';
          };
          this._wsiSendBinary.onmessage = function (evt) {
            var binary = new Uint8Array(evt.data);
            var binaryStr = 'response bin msg: ';
            var str = '0x';
            var hexMap = '0123456789ABCDEF'.split('');
            assert(hexMap.length == 16);
            for (var i = 0; i < binary.length; i++) {
              str += hexMap[binary[i] >> 4];
              str += hexMap[binary[i] & 0x0F];
            }
            binaryStr += str;
            respLabel.string = binaryStr;
            websocketLabel.string = 'WebSocket: onmessage';
          };
          this._wsiSendBinary.onerror = function (evt) {
            websocketLabel.string = 'WebSocket: onerror';
            respLabel.string = 'Error!';
          };
          this._wsiSendBinary.onclose = function (evt) {
            websocketLabel.string = 'WebSocket: onclose';
            // After close, it's no longer possible to use it again,
            // if you want to send another request, you need to create a new websocket instance
            self._wsiSendBinary = null;
            respLabel.string = 'Close!';
          };
          this.scheduleOnce(this.sendWebSocketBinary, 1);
        };
        _proto.sendWebSocketBinary = function sendWebSocketBinary() {
          var _this2 = this;
          var websocketLabel = this.websocket.node.getParent().getComponent(Label);
          if (!this._wsiSendBinary) {
            return;
          }
          if (this._wsiSendBinary.readyState === WebSocket.OPEN) {
            websocketLabel.string = 'WebSocket: sendbinary';
            var buf = 'Hello WebSocket中文,\0 I\'m\0 a\0 binary\0 message\0.';
            var arrData = new Uint16Array(buf.length);
            for (var i = 0; i < buf.length; i++) {
              arrData[i] = buf.charCodeAt(i);
            }
            this._wsiSendBinary.send(arrData.buffer);
          } else {
            var warningStr = 'send binary websocket instance wasn\'t ready...';
            websocketLabel.string = 'WebSocket: not ready';
            this.websocket.string = warningStr;
            this.scheduleOnce(function () {
              _this2.sendWebSocketBinary();
            }, 1);
          }
        };
        _proto.streamXHREventsToLabel = function streamXHREventsToLabel(xhr, label, method, responseHandler) {
          var handler = responseHandler || function (response) {
            return method + ' Response (30 chars): ' + response.substring(0, 30) + '...';
          };
          var eventLabel = label.node.getParent().getComponent(Label);
          var eventLabelOrigin = eventLabel.string;
          // Simple events
          ['loadstart', 'abort', 'error', 'load', 'loadend', 'timeout'].forEach(function (eventName) {
            xhr['on' + eventName] = function () {
              eventLabel.string = eventLabelOrigin + '\nEvent : ' + eventName;
              if (eventName === 'timeout') {
                label.string += '(timeout)';
              } else if (eventName === 'loadend') {
                label.string += '...loadend!';
              }
            };
          });

          // Special event
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status >= 200) {
              label.string = handler(xhr.responseText);
            } else if (xhr.status === 404) {
              label.string = '404 page not found!';
            } else if (xhr.readyState === 3) {
              label.string = 'Request dealing!';
            } else if (xhr.readyState === 2) {
              label.string = 'Request received!';
            } else if (xhr.readyState === 1) {
              label.string = 'Server connection established! Request hasn\'t been received';
            } else if (xhr.readyState === 0) {
              label.string = 'Request hasn\'t been initiated!';
            }
          };
        };
        _proto.rmXhrEventListener = function rmXhrEventListener(xhr) {
          if (!xhr) {
            return;
          }
          ['loadstart', 'abort', 'error', 'load', 'loadend', 'timeout'].forEach(function (eventName) {
            xhr['on' + eventName] = null;
          });
          xhr.onreadystatechange = null;
        };
        return NetworkCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "xhr", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "xhrAB", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "xhrTimeout", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "websocket", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "wssCacert", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkDownload.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "0b65dQWPrhEOqkvVcpz/cAs", "NetworkDownload", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var NetworkDownload = exports('NetworkDownload', (_dec = ccclass('NetworkDownload'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NetworkDownload, _Component);
        function NetworkDownload() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "text", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "status", _descriptor2, _assertThisInitialized(_this));
          // For autotest, because the automation script needs to take a screenshot after the download events.
          _this.onProgress = null;
          _this.onSuccess = null;
          _this.onError = null;
          return _this;
        }
        var _proto = NetworkDownload.prototype;
        _proto.start = function start() {
          this.status.string = "status: Not start";
        };
        _proto.download = function download() {
          return;
        };
        return NetworkDownload;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "status", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetworkWebsocket.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, assert, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      assert = module.assert;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "66494GPoW5OFJanQ3q1SDfm", "NetworkWebsocket", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var NetworkWebSocket = exports('NetworkWebSocket', (_dec = ccclass('NetworkWebSocket'), _dec2 = property({
        type: Label
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NetworkWebSocket, _Component);
        function NetworkWebSocket() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "wsStatus", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "ws", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "wsServerStatus", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "wsServer", _descriptor4, _assertThisInitialized(_this));
          _this._wsiSendBinary = null;
          _this._wsServer = null;
          return _this;
        }
        var _proto = NetworkWebSocket.prototype;
        // only for native usage
        _proto.start = function start() {};
        _proto.onDestroy = function onDestroy() {};
        _proto.prepareWebSocket = function prepareWebSocket() {
          var self = this;
          var websocketLabel = this.ws;
          var respLabel = this.wsStatus;
          // let url = this.wssCacert.nativeUrl;
          // if (assetManager.cacheManager) {
          //     url = assetManager.cacheManager.getCache(url) || assetManager.cacheManager.getTemp(url) || url;
          // }
          // We should pass the cacert to libwebsockets used in native platform, otherwise the wss connection would be closed.
          // @ts-ignore
          // this._wsiSendBinary = new WebSocket('wss://echo.websocket.events', []);
          this._wsiSendBinary = new WebSocket('ws://localhost:8080', []);
          this._wsiSendBinary.binaryType = 'arraybuffer';
          this._wsiSendBinary.onopen = function (evt) {
            respLabel.string = 'Opened!';
            websocketLabel.string = 'WebSocket: onopen';
          };
          this._wsiSendBinary.onmessage = function (evt) {
            var binary = new Uint8Array(evt.data);
            var binaryStr = 'response bin msg: ';
            var str = '0x';
            var hexMap = '0123456789ABCDEF'.split('');
            assert(hexMap.length == 16);
            for (var i = 0; i < binary.length; i++) {
              str += hexMap[binary[i] >> 4];
              str += hexMap[binary[i] & 0x0F];
            }
            binaryStr += str;
            respLabel.string = binaryStr;
            websocketLabel.string = 'WebSocket: onmessage';
          };
          this._wsiSendBinary.onerror = function (evt) {
            websocketLabel.string = 'WebSocket: onerror';
            respLabel.string = 'Error!';
          };
          this._wsiSendBinary.onclose = function (evt) {
            websocketLabel.string = 'WebSocket: onclose';
            // After close, it's no longer possible to use it again,
            // if you want to send another request, you need to create a new websocket instance
            self._wsiSendBinary = null;
            respLabel.string = 'client is closed!';
          };
          this.scheduleOnce(this.sendWebSocketBinary, 1);
        };
        _proto.sendWebSocketBinary = function sendWebSocketBinary() {
          var _this2 = this;
          var websocketLabel = this.wsStatus.node.getParent().getComponent(Label);
          if (!this._wsiSendBinary) {
            return;
          }
          if (this._wsiSendBinary.readyState === WebSocket.OPEN) {
            websocketLabel.string = 'WebSocket: send binary';
            var buf = 'Hello WebSocket中文,\0 I\'m\0 a\0 binary\0 message\0.';
            var arrData = new Uint16Array(buf.length);
            for (var i = 0; i < buf.length; i++) {
              arrData[i] = buf.charCodeAt(i);
            }
            this._wsiSendBinary.send(arrData.buffer);
          } else {
            var warningStr = 'send binary websocket instance wasn\'t ready...';
            websocketLabel.string = 'WebSocket: not ready';
            this.wsStatus.string = warningStr;
            this.scheduleOnce(function () {
              _this2.sendWebSocketBinary();
            }, 1);
          }
        };
        _proto.prepareWebSocketServer = function prepareWebSocketServer() {
          var _this3 = this;
          var self = this;
          var wsServerLabel = this.wsServer;
          var respLabel = this.wsServerStatus;
          this._wsServer = new WebSocketServer();
          this._wsServer.listen(8080, function (err) {
            if (!err) {
              console.log("server booted!");
            } else {
              wsServerLabel.string = 'WebSocketServer: listen error';
              respLabel.string = 'error when listen!';
              console.log("error when listen:", err);
            }
          });
          this._wsServer.onconnection = function (conn) {
            wsServerLabel.string = 'WebSocketServer: onconnection';
            respLabel.string = 'server is connected!';
            conn.onmessage = function (data) {
              wsServerLabel.string = 'WebSocketServer: onmessage';
              conn.send(data, function (err) {
                if (!err) {
                  console.log("server send success!");
                } else {
                  console.log("error when send:", err);
                }
              });
              var binary = new Uint8Array(data);
              var binaryStr = 'response bin msg: ';
              var str = '0x';
              var hexMap = '0123456789ABCDEF'.split('');
              assert(hexMap.length == 16);
              for (var i = 0; i < binary.length; i++) {
                str += hexMap[binary[i] >> 4];
                str += hexMap[binary[i] & 0x0F];
              }
              binaryStr += str;
              respLabel.string = binaryStr;
              console.log(data, " data send!");
            };
            conn.onclose = function () {
              console.log("connection gone!");
            };
          };
          this._wsServer.onclose = function () {
            wsServerLabel.string = 'WebSocketServer: onclose';
            respLabel.string = 'server is closed!';
            self._wsServer = null;
            console.log("server is closed!");
          };
          setTimeout(function () {
            if (_this3._wsServer) {
              _this3._wsServer.close();
            }
          }, 5000);
        };
        return NetworkWebSocket;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wsStatus", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ws", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "wsServerStatus", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "wsServer", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NewComponent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './l10n.ts', './l10n-manager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Label, Component, l10n;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, null, function (module) {
      l10n = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "5dcf5gWtQRBtZAZuFD3j8GL", "NewComponent", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode;
      var NewComponent1 = exports('NewComponent1', (_dec = ccclass('NewComponent1'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NewComponent1, _Component);
        function NewComponent1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = undefined;
          return _this;
        }
        var _proto = NewComponent1.prototype;
        _proto.onLoad = function onLoad() {
          this.label = this.node.getComponent(Label);
        };
        _proto.onStart = function onStart() {
          if (this.label) {
            this.label.string = l10n.t('this_is_script');
          }
        };
        return NewComponent1;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/node-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "96eb5gupZdFEr/6F/8WWVUA", "node-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var NodeEvent = exports('NodeEvent', (_dec = ccclass("NodeEvent"), _dec2 = menu('Event/NodeEvent'), _dec3 = property(Label), _dec4 = property(Node), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NodeEvent, _Component);
        function NodeEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "labelComp", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "receiver", _descriptor2, _assertThisInitialized(_this));
          _this._receiver = null;
          return _this;
        }
        var _proto = NodeEvent.prototype;
        _proto.start = function start() {
          if (this.receiver) {
            this._receiver = this.receiver.getComponent(NodeEvent);
          } else {
            this._receiver = this;
          }
          this.node.on('click', this.click, this._receiver);
        };
        _proto.onDestroy = function onDestroy() {
          this.node.off('click', this.click, this._receiver);
        };
        _proto.click = function click() {
          this.labelComp.string = "Receiver is: " + this._receiver.node.name;
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return NodeEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelComp", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "receiver", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/node-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "5cd33koVLVEppCM1HguV765", "node-move", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var NodeMove = exports('NodeMove', (_dec = ccclass('NodeMove'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NodeMove, _Component);
        function NodeMove() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = NodeMove.prototype;
        _proto.start = function start() {
          var _this = this;
          var x = this.node.position.x;
          var y = this.node.position.y;
          var z = this.node.position.z;
          var vec3 = new Vec3(x, y, z);
          this.schedule(function (dt) {
            x += dt;
            vec3.x = x;
            _this.node.setPosition(vec3);
            if (x >= 5) {
              x = -5;
            }
          });
        };
        return NodeMove;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/page-view-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, PageView, Label, instantiate, Vec3, Color, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      PageView = module.PageView;
      Label = module.Label;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Color = module.Color;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;
      cclegacy._RF.push({}, "18f1cBj+JdJfr9Z5uh3wi34", "page-view-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var PageViewCtrl = exports('PageViewCtrl', (_dec = ccclass("PageViewCtrl"), _dec2 = menu('UI/PageViewCtrl'), _dec3 = property(Prefab), _dec4 = property(PageView), _dec5 = property(Label), _dec6 = property({
        type: PageView.Direction
      }), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PageViewCtrl, _Component);
        function PageViewCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "curNum", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "curTotal", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "pageTeample", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "target", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "direction", _descriptor6, _assertThisInitialized(_this));
          _this.colorIndex = 0;
          return _this;
        }
        var _proto = PageViewCtrl.prototype;
        _proto._createPage = function _createPage() {
          this.colorIndex = this.curNum % 3;
          var page = instantiate(this.pageTeample);
          page.name = "page_" + this.curNum;
          page.setPosition(new Vec3());
          var color = Color.WHITE;
          if (this.colorIndex === 0) {
            color = Color.RED;
          } else if (this.colorIndex === 1) {
            color = Color.GREEN;
          } else if (this.colorIndex === 2) {
            color = Color.BLUE;
          }
          var comp = page.getComponent(Sprite);
          comp.color = color;
          return page;
        };
        _proto.onLoad = function onLoad() {
          // 设置的当前页面为 1
          this.target.setCurrentPageIndex(0);
        };
        _proto.update = function update() {
          // 当前页面索引
          var extra = this.direction === PageView.Direction.Vertical ? '\n' : '';
          this.label.string = "\u7B2C" + extra + (this.target.getCurrentPageIndex() + 1) + (extra + "\u9875");
        }

        // 返回首页
        ;

        _proto.onJumpHome = function onJumpHome() {
          // 第二个参数为滚动所需时间，默认值为 0.3 秒
          this.target.scrollToPage(0);
        }

        // 添加页面
        ;

        _proto.plusPage = function plusPage(callback) {
          if (this.curNum >= this.curTotal) {
            return;
          }
          this.curNum++;
          if (callback) {
            callback();
          }
        }

        // 减少页面
        ;

        _proto.lessPageNum = function lessPageNum(callback) {
          if (this.curNum <= 0) {
            return;
          }
          this.curNum--;
          if (callback) {
            callback();
          }
        }

        // 添加页面
        ;

        _proto.onAddPage = function onAddPage() {
          var _this2 = this;
          this.plusPage(function () {
            _this2.target.addPage(_this2._createPage());
          });
        }

        // 插入当前页面
        ;

        _proto.onInsertPage = function onInsertPage() {
          var _this3 = this;
          this.plusPage(function () {
            _this3.target.insertPage(_this3._createPage(), _this3.target.getCurrentPageIndex());
          });
        }

        // 移除最后一个页面
        ;

        _proto.onRemovePage = function onRemovePage() {
          var _this4 = this;
          this.lessPageNum(function () {
            var pages = _this4.target.getPages();
            _this4.target.removePage(pages[pages.length - 1]);
            if (_this4.curNum === 0) {
              _this4.onAddPage();
            }
          });
        }

        // 移除当前页面
        ;

        _proto.onRemovePageAtIndex = function onRemovePageAtIndex() {
          var _this5 = this;
          this.lessPageNum(function () {
            _this5.target.removePageAtIndex(_this5.target.getCurrentPageIndex());
            if (_this5.curNum === 0) {
              _this5.onAddPage();
            }
          });
        }

        // 移除所有页面
        ;

        _proto.onRemoveAllPage = function onRemoveAllPage() {
          this.target.removeAllPages();
          this.curNum = 0;
          this.onAddPage();
        }

        // 监听事件
        ;

        _proto.onPageEvent = function onPageEvent(sender, eventType) {
          // // 翻页事件
          // if (eventType !== PageView.EventType.PAGE_TURNING) {
          //     return;
          // }

          console.log("当前所在的页面索引:" + sender.getCurrentPageIndex());
        };
        return PageViewCtrl;
      }(Component), _class3.Direction = PageView.Direction, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "curNum", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "curTotal", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageTeample", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "direction", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PageView.Direction.Horizontal;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/particle-2d-position-type-change.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem2D, Label, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
      Label = module.Label;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "474e8WCjhRB3rgGtrxn5vYe", "particle-2d-position-type-change", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var particle_2d_position_type_change = exports('particle_2d_position_type_change', (_dec = ccclass('particle_2d_position_type_change'), _dec2 = type(ParticleSystem2D), _dec3 = type(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(particle_2d_position_type_change, _Component);
        function particle_2d_position_type_change() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "particle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "info", _descriptor2, _assertThisInitialized(_this));
          _this._currIndex = 0;
          return _this;
        }
        var _proto = particle_2d_position_type_change.prototype;
        _proto.changePositionType = function changePositionType() {
          this._currIndex = ++this._currIndex % 3;
          this.particle.positionType = this._currIndex;
          this.updateInfo();
          this.particle.resetSystem();
        };
        _proto.start = function start() {
          this._currIndex = this.particle.positionType;
          this.updateInfo();
          tween(this.particle.node).to(1.0, {
            position: new Vec3(-200, -200, 0)
          }).to(1.0, {
            position: new Vec3(200, -200, 0)
          }).to(1.0, {
            position: new Vec3(200, 200, 0)
          }).to(1.0, {
            position: new Vec3(-200, 200, 0)
          }).union().repeatForever().start();
        };
        _proto.updateInfo = function updateInfo() {
          if (this.particle.positionType == 0) {
            this.info.string = '当前positionType = FREE';
          } else if (this.particle.positionType == 1) {
            this.info.string = '当前positionType = RELATIVE';
          } else if (this.particle.positionType == 2) {
            this.info.string = '当前positionType = GROUPED';
          }
        };
        return particle_2d_position_type_change;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "particle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "info", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/particle-custom-change.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem2D, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "afc74+MThhNObj4Y7mBV5OT", "particle-custom-change", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var ParticleCustomChange = exports('ParticleCustomChange', (_dec = ccclass('ParticleCustomChange'), _dec2 = type(ParticleSystem2D), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ParticleCustomChange, _Component);
        function ParticleCustomChange() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "particle", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ParticleCustomChange.prototype;
        _proto.changeCustom = function changeCustom() {
          this.particle.custom = !this.particle.custom;
        };
        return ParticleCustomChange;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "particle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/particle-normal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "198732t5gxBkreDnzUqpqKP", "particle-normal", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var ParticleControl = exports('ParticleControl', (_dec = ccclass('ParticleControl'), _dec2 = type(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ParticleControl, _Component);
        function ParticleControl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "spritePrefab", _descriptor, _assertThisInitialized(_this));
          _this.totalNum = 20;
          _this.i = 0.1;
          return _this;
        }
        var _proto = ParticleControl.prototype;
        _proto.start = function start() {
          this.schedule(this.addParticle, 1);
        };
        _proto.addParticle = function addParticle() {
          if (this.totalNum > 0) {
            var particle = instantiate(this.spritePrefab);
            particle.parent = this.node;
            particle.setPosition(this.i * 100, this.i * 100);
            this.i += 0.1;
            this.totalNum--;
          }
        };
        return ParticleControl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spritePrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/particle-sprite-change.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem2D, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "9022dbOFcVDObg+SkEHYofd", "particle-sprite-change", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var ParticleSpriteChange = exports('ParticleSpriteChange', (_dec = ccclass('ParticleSpriteChange'), _dec2 = type(ParticleSystem2D), _dec3 = type(SpriteFrame), _dec4 = type(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ParticleSpriteChange, _Component);
        function ParticleSpriteChange() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "particle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spError", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "add", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ParticleSpriteChange.prototype;
        _proto.changeCustom = function changeCustom() {
          var ps = this.particle;
          if (ps.spriteFrame !== this.spError) {
            ps.spriteFrame = this.spError;
          } else {
            ps.spriteFrame = this.add;
          }
        };
        return ParticleSpriteChange;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "particle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spError", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "add", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pause.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "20eccyukcdKQoxfRMYT7lCm", "pause", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var newScript = exports('newScript', (_dec = ccclass("newScript"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(newScript, _Component);
        function newScript() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.timer = false;
          _this._y = 0;
          return _this;
        }
        var _proto = newScript.prototype;
        _proto.start = function start() {
          this._y = this.node.position.y;
        };
        _proto.update = function update(deltaTime) {
          this.node.position = new Vec3(this.node.position.x, this._y, this.node.position.z);
          if (this._y <= 0) {
            this.timer = true;
          }
          if (this._y >= 2) {
            this.timer = false;
          }
          if (deltaTime > 1) {
            // hack for first frame
            deltaTime = 1;
          }
          if (this.timer) {
            this._y += 1 * deltaTime;
          }
          if (this.timer == false) {
            this._y -= 1 * deltaTime;
          }
        };
        return newScript;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pauseButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "0c9580onAlEC7RVsSoBOlCI", "pauseButton", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var button = exports('button', (_dec = ccclass("button"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(button, _Component);
        function button() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = button.prototype;
        _proto.onPause = function onPause() {
          director.pause();
        };
        _proto.onResume = function onResume() {
          director.resume();
        };
        return button;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/planarReflectionController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Quat, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "b8f6dyVEylIca4YqYqO8Y/H", "planarReflectionController", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var planarReflectionController = exports('planarReflectionController', (_dec = ccclass('cameraController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(planarReflectionController, _Component);
        function planarReflectionController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._quat = new Quat();
          return _this;
        }
        var _proto = planarReflectionController.prototype;
        //爱心旋转
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {
          Quat.fromEuler(this._quat, 0, 60 * deltaTime, 0);
          this.node.rotate(this._quat);
        };
        return planarReflectionController;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlaybackRange.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LabeledSlider.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, _decorator, AnimationClip, Slider, Label, AnimationState, Component, LabeledSlider;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AnimationClip = module.AnimationClip;
      Slider = module.Slider;
      Label = module.Label;
      AnimationState = module.AnimationState;
      Component = module.Component;
    }, function (module) {
      LabeledSlider = module.LabeledSlider;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;
      cclegacy._RF.push({}, "cda2fixBepLN48wqVoNESov", "PlaybackRange", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Mark = (_dec = ccclass('Mark'), _dec(_class = (_class2 = function Mark() {
        _initializerDefineProperty(this, "frame", _descriptor, this);
        _initializerDefineProperty(this, "name", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "frame", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class);
      var PlaybackRange = exports('PlaybackRange', (_dec2 = ccclass('PlaybackRange'), _dec3 = property(AnimationClip), _dec4 = property(Slider), _dec5 = property(Slider), _dec6 = property(LabeledSlider), _dec7 = property(LabeledSlider), _dec8 = property(Label), _dec9 = property([Mark]), _dec2(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlaybackRange, _Component);
        function PlaybackRange() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "clip", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sliderMin", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sliderMax", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labeledSliderMin", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labeledSliderMax", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "totalFramesLabel", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "marks", _descriptor9, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = PlaybackRange.prototype;
        _proto.setRange = function setRange(min, max) {
          if (!this._state) {
            return;
          }
          var factor = 1.0 / this.frameRate;
          this._state.playbackRange = {
            min: factor * min,
            max: factor * max
          };
        };
        _proto.start = function start() {
          this.totalFramesLabel.string = "" + this.totalFrames;
          this.labeledSliderMin.max = this.totalFrames;
          this.labeledSliderMax.max = this.totalFrames;
          this._state = new AnimationState(this.clip);
          this._state.weight = 1.0;
          this._state.initialize(this.node);
          this._state.play();
        };
        _proto.onDestroy = function onDestroy() {
          if (this._state) {
            this._state.destroy();
          }
        };
        _proto.onSliderChanged = function onSliderChanged() {
          var totalFrames = this.totalFrames;
          var minFrames = Math.floor(totalFrames * this.sliderMin.progress);
          var maxFrames = Math.floor(totalFrames * this.sliderMax.progress);
          if (maxFrames <= minFrames) {
            return;
          }
          this.setRange(minFrames, maxFrames);
          // this._state.wrapMode = AnimationClip.WrapMode.Normal;
          this._state.stop();
          this._state.play();
        };
        _createClass(PlaybackRange, [{
          key: "totalFrames",
          get: function get() {
            return Math.floor(this.frameRate * this.clip.duration);
          }
        }, {
          key: "frameRate",
          get: function get() {
            return this.clip.sample || 30;
          }
        }]);
        return PlaybackRange;
      }(Component), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "clip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "sliderMin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "sliderMax", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "labeledSliderMin", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "labeledSliderMax", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "totalFramesLabel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "marks", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class5)) || _class4));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player-box-projection.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, Animation, KeyCode, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Animation = module.Animation;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "e98050St+RPworEZ315xrdY", "Player-box-projection", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Direction = /*#__PURE__*/function (Direction) {
        Direction[Direction["North"] = 0] = "North";
        Direction[Direction["South"] = 1] = "South";
        Direction[Direction["West"] = 2] = "West";
        Direction[Direction["East"] = 3] = "East";
        return Direction;
      }(Direction || {});
      var PlayerBoxProjection = exports('PlayerBoxProjection', (_dec = ccclass("PlayerBoxProjection"), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerBoxProjection, _Component);
        function PlayerBoxProjection() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "player", _descriptor, _assertThisInitialized(_this));
          _this._animation = void 0;
          _this._isWalking = false;
          _this._forward = new Vec3(1, 0, 0);
          _this._eulerAngle = new Vec3(0, 0, 0);
          _this._speed = 0.015;
          _this._followDelta = new Vec3(-15, 8, 0);
          _this._minWalkPos = new Vec3(-100, 0, -50);
          _this._maxWalkPos = new Vec3(1, 30, 45);
          return _this;
        }
        var _proto = PlayerBoxProjection.prototype;
        _proto.start = function start() {
          this.initAnim();
        };
        _proto.initAnim = function initAnim() {
          this._animation = this.player.getComponent(Animation);
        };
        _proto.setPlayerRotation = function setPlayerRotation(dir) {
          switch (dir) {
            case Direction.North:
              this._eulerAngle.set(0, 90, 0);
              break;
            case Direction.South:
              this._eulerAngle.set(0, -90, 0);
              break;
            case Direction.West:
              this._eulerAngle.set(0, 180, 0);
              break;
            case Direction.East:
              this._eulerAngle.set(0, 0, 0);
              break;
          }
          this.player.setRotationFromEuler(this._eulerAngle);
        };
        _proto.setPlayerForward = function setPlayerForward(dir) {
          switch (dir) {
            case Direction.North:
              this._forward.set(1, 0, 0);
              break;
            case Direction.South:
              this._forward.set(-1, 0, 0);
              break;
            case Direction.West:
              this._forward.set(0, 0, -1);
              break;
            case Direction.East:
              this._forward.set(0, 0, 1);
              break;
          }
        };
        _proto.startWalking = function startWalking(dir) {
          this.setPlayerRotation(dir);
          this.setPlayerForward(dir);
          this._animation.crossFade("Take 001", 0.3);
          this._isWalking = true;
        };
        _proto.stopWalking = function stopWalking() {
          this._animation.stop();
          this._isWalking = false;
        };
        _proto.onUpButtonTouchStart = function onUpButtonTouchStart(event) {
          this.startWalking(Direction.North);
        };
        _proto.onUpButtonTouchEnd = function onUpButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onDownButtonTouchStart = function onDownButtonTouchStart(event) {
          this.startWalking(Direction.South);
        };
        _proto.onDownButtonTouchEnd = function onDownButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onLeftButtonTouchStart = function onLeftButtonTouchStart(event) {
          this.startWalking(Direction.West);
        };
        _proto.onLeftButtonTouchEnd = function onLeftButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onRightButtonTouchStart = function onRightButtonTouchStart(event) {
          this.startWalking(Direction.East);
        };
        _proto.onRightButtonTouchEnd = function onRightButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onKeyboardDown = function onKeyboardDown(event) {
          switch (event.keyCode) {
            case KeyCode.KEY_W:
              this.startWalking(Direction.North);
              break;
            case KeyCode.KEY_S:
              this.startWalking(Direction.South);
              break;
            case KeyCode.KEY_A:
              this.startWalking(Direction.West);
              break;
            case KeyCode.KEY_D:
              this.startWalking(Direction.East);
              break;
          }
        };
        _proto.onKeyboardUp = function onKeyboardUp(event) {
          switch (event.keyCode) {
            case KeyCode.KEY_W:
            case KeyCode.KEY_S:
            case KeyCode.KEY_A:
            case KeyCode.KEY_D:
              this.stopWalking();
              break;
          }
        };
        _proto.update = function update(deltaTime) {
          if (!this._isWalking) ;
          this.updatePlayerAndCamera();
        };
        _proto.canWalkTo = function canWalkTo(position) {
          return !(position.x > this._maxWalkPos.x || position.x < this._minWalkPos.x || position.y > this._maxWalkPos.y || position.y < this._minWalkPos.y || position.z > this._maxWalkPos.z || position.z < this._minWalkPos.z);
        };
        _proto.updatePlayerAndCamera = function updatePlayerAndCamera() {
          var position = new Vec3(0, 0, 0);
          Vec3.scaleAndAdd(position, this.player.getPosition(), this._forward, this._speed);
          if (!this.canWalkTo(position)) {
            return;
          }
          this.player.setPosition(position);
          //Vec3.add(position, position, this._followDelta);
          //this.camera.node.setPosition(position);
        };

        return PlayerBoxProjection;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "player", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/player-controller.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, CameraComponent, Node, Vec3, Input, input, Animation, KeyCode, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      CameraComponent = module.CameraComponent;
      Node = module.Node;
      Vec3 = module.Vec3;
      Input = module.Input;
      input = module.input;
      Animation = module.Animation;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
      cclegacy._RF.push({}, "1db89DH1dhOBYhD8uFfkK8K", "player-controller", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Direction = /*#__PURE__*/function (Direction) {
        Direction[Direction["North"] = 0] = "North";
        Direction[Direction["South"] = 1] = "South";
        Direction[Direction["West"] = 2] = "West";
        Direction[Direction["East"] = 3] = "East";
        return Direction;
      }(Direction || {});
      var PlayerController = exports('PlayerController', (_dec = ccclass("PlayerController"), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(CameraComponent), _dec7 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerController, _Component);
        function PlayerController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "upButton", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "downButton", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "leftButton", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rightButton", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "camera", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "player", _descriptor6, _assertThisInitialized(_this));
          _this._animation = void 0;
          _this._isWalking = false;
          _this._forward = new Vec3(1, 0, 0);
          _this._eulerAngle = new Vec3(0, 0, 0);
          _this._speed = 0.1;
          _this._followDelta = new Vec3(-15, 8, 0);
          _this._minWalkPos = new Vec3(-100, 0, -50);
          _this._maxWalkPos = new Vec3(100, 30, 45);
          return _this;
        }
        var _proto = PlayerController.prototype;
        _proto.start = function start() {
          this.initUI();
          this.initAnim();
        };
        _proto.initUI = function initUI() {
          this.upButton.node.on(Input.EventType.TOUCH_START, this.onUpButtonTouchStart, this);
          this.upButton.node.on(Input.EventType.TOUCH_END, this.onUpButtonTouchEnd, this);
          this.downButton.node.on(Input.EventType.TOUCH_START, this.onDownButtonTouchStart, this);
          this.downButton.node.on(Input.EventType.TOUCH_END, this.onDownButtonTouchEnd, this);
          this.leftButton.node.on(Input.EventType.TOUCH_START, this.onLeftButtonTouchStart, this);
          this.leftButton.node.on(Input.EventType.TOUCH_END, this.onLeftButtonTouchEnd, this);
          this.rightButton.node.on(Input.EventType.TOUCH_START, this.onRightButtonTouchStart, this);
          this.rightButton.node.on(Input.EventType.TOUCH_END, this.onRightButtonTouchEnd, this);
          input.on(Input.EventType.KEY_DOWN, this.onKeyboardDown, this);
          input.on(Input.EventType.KEY_UP, this.onKeyboardUp, this);
        };
        _proto.initAnim = function initAnim() {
          this._animation = this.player.getComponent(Animation);
        };
        _proto.setPlayerRotation = function setPlayerRotation(dir) {
          switch (dir) {
            case Direction.North:
              this._eulerAngle.set(0, 90, 0);
              break;
            case Direction.South:
              this._eulerAngle.set(0, -90, 0);
              break;
            case Direction.West:
              this._eulerAngle.set(0, 180, 0);
              break;
            case Direction.East:
              this._eulerAngle.set(0, 0, 0);
              break;
          }
          this.player.setRotationFromEuler(this._eulerAngle);
        };
        _proto.setPlayerForward = function setPlayerForward(dir) {
          switch (dir) {
            case Direction.North:
              this._forward.set(1, 0, 0);
              break;
            case Direction.South:
              this._forward.set(-1, 0, 0);
              break;
            case Direction.West:
              this._forward.set(0, 0, -1);
              break;
            case Direction.East:
              this._forward.set(0, 0, 1);
              break;
          }
        };
        _proto.startWalking = function startWalking(dir) {
          this.setPlayerRotation(dir);
          this.setPlayerForward(dir);
          this._animation.crossFade("Take 001", 0.3);
          this._isWalking = true;
        };
        _proto.stopWalking = function stopWalking() {
          this._animation.stop();
          this._isWalking = false;
        };
        _proto.onUpButtonTouchStart = function onUpButtonTouchStart(event) {
          this.startWalking(Direction.North);
        };
        _proto.onUpButtonTouchEnd = function onUpButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onDownButtonTouchStart = function onDownButtonTouchStart(event) {
          this.startWalking(Direction.South);
        };
        _proto.onDownButtonTouchEnd = function onDownButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onLeftButtonTouchStart = function onLeftButtonTouchStart(event) {
          this.startWalking(Direction.West);
        };
        _proto.onLeftButtonTouchEnd = function onLeftButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onRightButtonTouchStart = function onRightButtonTouchStart(event) {
          this.startWalking(Direction.East);
        };
        _proto.onRightButtonTouchEnd = function onRightButtonTouchEnd(event) {
          this.stopWalking();
        };
        _proto.onKeyboardDown = function onKeyboardDown(event) {
          switch (event.keyCode) {
            case KeyCode.KEY_W:
              this.startWalking(Direction.North);
              break;
            case KeyCode.KEY_S:
              this.startWalking(Direction.South);
              break;
            case KeyCode.KEY_A:
              this.startWalking(Direction.West);
              break;
            case KeyCode.KEY_D:
              this.startWalking(Direction.East);
              break;
          }
        };
        _proto.onKeyboardUp = function onKeyboardUp(event) {
          switch (event.keyCode) {
            case KeyCode.KEY_W:
            case KeyCode.KEY_S:
            case KeyCode.KEY_A:
            case KeyCode.KEY_D:
              this.stopWalking();
              break;
          }
        };
        _proto.update = function update(deltaTime) {
          if (!this._isWalking) {
            return;
          }
          this.updatePlayerAndCamera();
        };
        _proto.canWalkTo = function canWalkTo(position) {
          return !(position.x > this._maxWalkPos.x || position.x < this._minWalkPos.x || position.y > this._maxWalkPos.y || position.y < this._minWalkPos.y || position.z > this._maxWalkPos.z || position.z < this._minWalkPos.z);
        };
        _proto.updatePlayerAndCamera = function updatePlayerAndCamera() {
          var position = new Vec3(0, 0, 0);
          Vec3.scaleAndAdd(position, this.player.getPosition(), this._forward, this._speed);
          if (!this.canWalkTo(position)) {
            return;
          }
          this.player.setPosition(position);
          Vec3.add(position, position, this._followDelta);
          this.camera.node.setPosition(position);
        };
        return PlayerController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "upButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "downButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "leftButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rightButton", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "player", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerBoxProjection.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Vec3, Animation, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "54774cZUe5IJpwwyn4JBB1o", "PlayerBoxProjection", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Direction = /*#__PURE__*/function (Direction) {
        Direction[Direction["North"] = 0] = "North";
        Direction[Direction["South"] = 1] = "South";
        Direction[Direction["West"] = 2] = "West";
        Direction[Direction["East"] = 3] = "East";
        return Direction;
      }(Direction || {});
      var PlayerBoxProjection = exports('PlayerBoxProjection', (_dec = ccclass("PlayerBoxProjection"), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerBoxProjection, _Component);
        function PlayerBoxProjection() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "player", _descriptor, _assertThisInitialized(_this));
          _this._animation = void 0;
          _this._isWalking = false;
          _this._forward = new Vec3(1, 0, 0);
          _this._eulerAngle = new Vec3(0, 0, 0);
          _this._speed = 0.014;
          _this._minWalkPos = new Vec3(-10, 0, 0);
          _this._maxWalkPos = new Vec3(7, 0, 0);
          return _this;
        }
        var _proto = PlayerBoxProjection.prototype;
        _proto.start = function start() {
          this.initAnim();
        };
        _proto.initAnim = function initAnim() {
          this._animation = this.player.getComponentInChildren(Animation);
        };
        _proto.setPlayerRotation = function setPlayerRotation(dir) {
          switch (dir) {
            case Direction.North:
              this._eulerAngle.set(0, 90, 0);
              break;
            case Direction.South:
              this._eulerAngle.set(0, -90, 0);
              break;
            case Direction.West:
              this._eulerAngle.set(0, 180, 0);
              break;
            case Direction.East:
              this._eulerAngle.set(0, 0, 0);
              break;
          }
          this.player.setRotationFromEuler(this._eulerAngle);
        };
        _proto.setPlayerForward = function setPlayerForward(dir) {
          switch (dir) {
            case Direction.North:
              this._forward.set(1, 0, 0);
              break;
            case Direction.South:
              this._forward.set(-1, 0, 0);
              break;
            case Direction.West:
              this._forward.set(0, 0, -1);
              break;
            case Direction.East:
              this._forward.set(0, 0, 1);
              break;
          }
        };
        _proto.startWalking = function startWalking(dir) {
          this.setPlayerRotation(dir);
          this.setPlayerForward(dir);
          this._isWalking = true;
        };
        _proto.stopWalking = function stopWalking() {
          this._animation.stop();
          this._isWalking = false;
        };
        _proto.update = function update(deltaTime) {
          this.updatePlayerAndCamera();
        };
        _proto.canWalkTo = function canWalkTo(position) {
          return !(position.x > this._maxWalkPos.x || position.x < this._minWalkPos.x || position.y > this._maxWalkPos.y || position.y < this._minWalkPos.y || position.z > this._maxWalkPos.z || position.z < this._minWalkPos.z);
        };
        _proto.updatePlayerAndCamera = function updatePlayerAndCamera() {
          var position = new Vec3(0, 0, 0);
          Vec3.scaleAndAdd(position, this.player.getPosition(), this._forward, this._speed);
          if (!this.canWalkTo(position)) {
            if (this._forward.x === -1) {
              this.startWalking(Direction.North);
            } else {
              this.startWalking(Direction.South);
            }
            return;
          }
          this.player.setPosition(position);
        };
        return PlayerBoxProjection;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "player", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pre-filter-envmap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Quat, gfx, EffectAsset, CameraComponent, Material, ModelComponent, utils, primitives, director, TextureCube, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Quat = module.Quat;
      gfx = module.gfx;
      EffectAsset = module.EffectAsset;
      CameraComponent = module.CameraComponent;
      Material = module.Material;
      ModelComponent = module.ModelComponent;
      utils = module.utils;
      primitives = module.primitives;
      director = module.director;
      TextureCube = module.TextureCube;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "41074J7W0lCe40VLTiO+Uxi", "pre-filter-envmap", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var rotations = [Quat.fromEuler(new Quat(), 0, -90, 180),
      // +X
      Quat.fromEuler(new Quat(), 0, 90, 180),
      // -X
      Quat.fromEuler(new Quat(), -90, 180, 180),
      // +Y
      Quat.fromEuler(new Quat(), 90, 180, 180),
      // -Y
      Quat.fromEuler(new Quat(), 0, 180, 180),
      // +Z
      Quat.fromEuler(new Quat(), 0, 0, 180) // -Z
      ];

      var readRegions = [new gfx.BufferTextureCopy()];
      readRegions[0].texExtent.depth = 1;
      var writeRegions = [new gfx.BufferTextureCopy()];
      writeRegions[0].texExtent.depth = 1;
      writeRegions[0].texSubres.layerCount = 6; // 6 faces

      function getMipLevel(size) {
        var level = 0;
        while (size) {
          size >>= 1;
          level++;
        }
        return level;
      }
      var PreFilterEnvmap = exports('PreFilterEnvmap', (_dec = ccclass('PreFilterEnvmap'), _dec2 = property(EffectAsset), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PreFilterEnvmap, _Component);
        function PreFilterEnvmap() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "effect", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "blurriness", _descriptor2, _assertThisInitialized(_this));
          _this._camera = null;
          _this._material = null;
          _this._renderTarget = null;
          return _this;
        }
        var _proto = PreFilterEnvmap.prototype;
        _proto.onLoad = function onLoad() {
          this._camera = this.node.getComponentInChildren(CameraComponent);
          this._renderTarget = this._camera.targetTexture;
          this._material = new Material();
          this._material.initialize({
            effectAsset: this.effect,
            states: {
              rasterizerState: {
                cullMode: gfx.CullMode.FRONT
              },
              depthStencilState: {
                depthTest: false,
                depthWrite: false
              }
            }
          });
          var modelComp = this.node.addComponent(ModelComponent);
          modelComp.mesh = utils.createMesh(primitives.box({
            width: 2,
            height: 2,
            length: 2
          }));
          modelComp.material = this._material;
        };
        _proto.start = function start() {
          {
            var skybox = director.root.pipeline.pipelineSceneData.skybox;
            skybox.envmap = this.filter(skybox.envmap);
            // skybox.isRGBE = false;
          }
        }

        // WebGL doesn't support using custom mipmap level in framebuffer attachments,
        // so we'll have to do this the hard way (read back and upload again)
        ;

        _proto.filter = function filter(envmap) {
          this.node.active = true;
          envmap.setMipFilter(TextureCube.Filter.LINEAR);
          var size = envmap.width; // has to be square
          var camera = this._camera.camera;
          var readRegion = readRegions[0];
          var writeRegion = writeRegions[0];
          var mipLevel = getMipLevel(size);
          var newEnvMap = new TextureCube();
          var pass = this._material.passes[0];
          var handle = pass.getHandle('roughness');
          this.node.setScale(1, director.root.device.capabilities.clipSpaceSignY, 1); // GL-specific: flip both model and camera so front face stays the same
          camera.scene.update(0); // should update scene after flipping
          newEnvMap.reset({
            width: size,
            height: size,
            mipmapLevel: mipLevel
          });
          newEnvMap.isRGBE = true;
          for (var m = 0; m < mipLevel; m++) {
            // need to resize both window and camera
            camera.window.resize(size, size);
            camera.resize(size, size);
            readRegion.texExtent.width = readRegion.texExtent.height = size;
            writeRegion.texExtent.width = writeRegion.texExtent.height = size;
            writeRegion.texSubres.mipLevel = m;
            pass.setUniform(handle, this.blurriness + m / (mipLevel - 1) * (1 - this.blurriness));
            pass.update();
            var length = size * size * 4;
            var buffers = [];
            for (var i = 0; i < 6; i++) {
              buffers[i] = new Uint8Array(length);
              this._camera.node.setRotation(rotations[i]);
              this._camera.camera.update();
              director.root.pipeline.render([camera]);
              director.root.device.copyTextureToBuffers(camera.window.framebuffer.colorTextures[0], [buffers[i]], readRegions);
            }
            director.root.device.copyBuffersToTexture(buffers, newEnvMap.getGFXTexture(), writeRegions);
            size >>= 1;
          }
          this.node.active = false;
          newEnvMap.setMipFilter(TextureCube.Filter.LINEAR);
          return newEnvMap;
        };
        return PreFilterEnvmap;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "effect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "blurriness", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PreloadAssets.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, Label, Prefab, SpriteFrame, Material, resources, director, SpriteAtlas, Font, TextureCube, Texture2D, log, Layers, instantiate, MeshRenderer, UIMeshRenderer, Sprite, AudioSource, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Prefab = module.Prefab;
      SpriteFrame = module.SpriteFrame;
      Material = module.Material;
      resources = module.resources;
      director = module.director;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      TextureCube = module.TextureCube;
      Texture2D = module.Texture2D;
      log = module.log;
      Layers = module.Layers;
      instantiate = module.instantiate;
      MeshRenderer = module.MeshRenderer;
      UIMeshRenderer = module.UIMeshRenderer;
      Sprite = module.Sprite;
      AudioSource = module.AudioSource;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
      cclegacy._RF.push({}, "23363UvMkJDuL3mTFnNcJCg", "PreloadAssets", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var PreloadAssets = exports('PreloadAssets', (_dec = ccclass('PreloadAssets'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: [Node]
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: SpriteFrame
      }), _dec7 = property({
        type: Material
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PreloadAssets, _Component);
        function PreloadAssets() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._lastType = '';
          _this._btnLabel = null;
          _this._audioSources = [];
          _this._isLoading = false;
          _this._urls = {
            Audio: "test_assets/audio",
            Txt: "test_assets/text",
            ImageAsset: "test_assets/PurpleMonster",
            Texture2D: "test_assets/PurpleMonster/texture",
            Font: "test_assets/font",
            SpriteAtlas: "test_assets/atlas",
            SpriteFrame: "test_assets/image/spriteFrame",
            Prefab: "test_assets/prefab",
            Animation: "test_assets/testAnim",
            Scene: "test_assets/test-preload-scene",
            TextureCube: "test_assets/cubemap",
            Material: "test_assets/testMat",
            Mesh: "test_assets/Monster/monster",
            Skeleton: "test_assets/Monster/Armature",
            Dir: 'test_assets'
          };
          _initializerDefineProperty(_this, "showWindow", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadTips", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadList", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadAnimTestPrefab", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadMaterialSpriteFrame", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "standardMaterial", _descriptor6, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = PreloadAssets.prototype;
        // use this for initialization
        _proto.onLoad = function onLoad() {
          // registered event
          this._onRegisteredEvent();
        };
        _proto.onDestroy = function onDestroy() {};
        _proto._onRegisteredEvent = function _onRegisteredEvent() {
          for (var i = 0; i < this.loadList.length; ++i) {
            this.loadList[i].on(Node.EventType.TOUCH_END, this._onClick.bind(this));
          }
        };
        _proto._onClick = /*#__PURE__*/function () {
          var _onClick2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!this._isLoading) {
                    _context.next = 2;
                    break;
                  }
                  return _context.abrupt("return");
                case 2:
                  this._onClear();
                  this._curType = event.target.name.split('_')[1];
                  if (!(this._lastType !== "" && this._curType === this._lastType)) {
                    _context.next = 9;
                    break;
                  }
                  this.loadTips.string = this._curType + " Loading....";
                  _context.next = 8;
                  return this._onShowResClick(event);
                case 8:
                  return _context.abrupt("return");
                case 9:
                  if (this._btnLabel) {
                    this._btnLabel.string = "已加载 " + this._lastType;
                  }
                  this._lastType = this._curType;
                  this._btnLabel = event.target.getChildByName("Label").getComponent(Label);
                  this.loadTips.string = this._curType + " Loading....";
                  this._isLoading = true;
                  this._load();
                case 15:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function _onClick(_x) {
            return _onClick2.apply(this, arguments);
          }
          return _onClick;
        }();
        _proto._load = function _load() {
          var url = this._urls[this._curType];
          var loadCallBack = this._loadCallBack.bind(this);
          switch (this._curType) {
            case 'SpriteFrame':
              // specify the type to load sub asset from texture's url
              resources.preload(url, SpriteFrame, loadCallBack);
              break;
            case 'Texture2D':
              resources.preload(url, Texture2D, loadCallBack);
              break;
            case 'TextureCube':
              resources.preload(url, TextureCube, loadCallBack);
              break;
            case 'Font':
              resources.preload(url, Font, loadCallBack);
              break;
            case 'SpriteAtlas':
              resources.preload(url, SpriteAtlas, loadCallBack);
              break;
            case 'Animation':
            case 'Prefab':
            case 'Skeleton':
            case 'Mesh':
            case 'ImageAsset':
            case 'Txt':
            case 'Audio':
            case 'Material':
            case 'Skeleton':
              resources.preload(url, loadCallBack);
              break;
            case 'Scene':
              director.preloadScene(url, loadCallBack);
              break;
            case 'Dir':
              resources.preloadDir(url, loadCallBack);
              break;
          }
        };
        _proto._loadCallBack = function _loadCallBack(err, data) {
          this._isLoading = false;
          if (err) {
            log('Error url [' + err + ']');
            return;
          }
          if (this._btnLabel) {
            if (this._curType === "Audio") {
              this._btnLabel.string = "播放";
            } else {
              this._btnLabel.string = "创建";
            }
            this._btnLabel.string += this._curType;
          }
          this.loadTips.string = this._curType + " Preloaded Successfully!";
        };
        _proto._onClear = function _onClear() {
          this.showWindow.removeAllChildren();
          this._audioSources.forEach(function (audioSource) {
            audioSource.stop();
          });
          this._audioSources.length = 0;
        };
        _proto._onShowResClick = function _onShowResClick(event) {
          var _this2 = this;
          return new Promise(function (resovle, reject) {
            var url = _this2._urls[_this2._curType];
            switch (_this2._curType) {
              case 'SpriteFrame':
                // specify the type to load sub asset from texture's url
                resources.load(url, SpriteFrame, function (err, asset) {
                  return _this2._createNode(_this2._curType, asset);
                });
                break;
              case 'Texture2D':
                resources.load(url, Texture2D, function (err, asset) {
                  return _this2._createNode(_this2._curType, asset);
                });
                break;
              case 'TextureCube':
                resources.load(url, TextureCube, function (err, asset) {
                  return _this2._createNode(_this2._curType, asset);
                });
                break;
              case 'Font':
                resources.load(url, Font, function (err, asset) {
                  return _this2._createNode(_this2._curType, asset);
                });
                break;
              case 'SpriteAtlas':
                resources.load(url, SpriteAtlas, function (err, asset) {
                  return _this2._createNode(_this2._curType, asset);
                });
                break;
              case 'Animation':
              case 'Prefab':
              case 'Skeleton':
              case 'Mesh':
              case 'ImageAsset':
              case 'Txt':
              case 'Audio':
              case 'Material':
              case 'Skeleton':
                resources.load(url, function (err, asset) {
                  return _this2._createNode(_this2._curType, asset);
                });
                break;
              case 'Scene':
                director.loadScene(url, function (err) {
                  err ? reject(err) : resovle();
                });
                break;
              case 'Dir':
                resources.loadDir(url, function (err, assets) {
                  _this2.loadTips.string = "The asset loaded: ";
                  assets.forEach(function (r) {
                    return _this2.loadTips.string += r.name + ";";
                  });
                });
                break;
            }
          });
        };
        _proto._createNode = function _createNode(type, res) {
          var _model$material;
          this.loadTips.string = "";
          var node = new Node("New " + type);
          node.layer = Layers.Enum.UI_2D;
          node.setPosition(0, 0, 0);
          var component = null;
          switch (this._curType) {
            case "SpriteFrame":
              component = node.addComponent(Sprite);
              component.spriteFrame = res;
              break;
            case "SpriteAtlas":
              component = node.addComponent(Sprite);
              component.spriteFrame = res.getSpriteFrames()[0];
              break;
            case "Texture2D":
              var cube = instantiate(this.loadAnimTestPrefab);
              var model = cube.getComponent(MeshRenderer);
              model == null || (_model$material = model.material) == null || _model$material.setProperty('albedoMap', res);
              cube.setPosition(0, 0, 50);
              cube.setScale(100, 100, 100);
              cube.parent = this.showWindow;
              break;
            case 'ImageAsset':
              component = node.addComponent(Sprite);
              var spriteFrame = new SpriteFrame();
              var tex = new Texture2D();
              tex.image = res;
              spriteFrame.texture = tex;
              component.spriteFrame = spriteFrame;
              break;
            case "Audio":
              component = node.addComponent(AudioSource);
              component.clip = res;
              component.play();
              this._audioSources.push(component);
              this.loadTips.string = "播放音乐。";
              break;
            case "Txt":
              component = node.addComponent(Label);
              component.lineHeight = 40;
              component.string = res.text;
              break;
            case "Material":
              component = node.addComponent(Sprite);
              component.sharedMaterials = res;
              component.spriteFrame = this.loadMaterialSpriteFrame;
              break;
            case "Font":
              component = node.addComponent(Label);
              component.font = res;
              component.lineHeight = 40;
              component.string = "This is BitmapFont!";
              break;
            case 'Mesh':
              component = node.addComponent(MeshRenderer);
              node.addComponent(UIMeshRenderer);
              node.setPosition(0, 0, 50);
              node.setScale(5, 5, 5);
              component.mesh = res;
              component.material = this.standardMaterial;
              break;
            case "Prefab":
              var prefab = instantiate(res);
              prefab.parent = node;
              prefab.setPosition(0, 0, 0);
              break;
            default:
              this.loadTips.string = "此项没有展示效果";
              break;
          }
          this.showWindow.addChild(node);
        };
        return PreloadAssets;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "showWindow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loadTips", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "loadList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "loadAnimTestPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "loadMaterialSpriteFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "standardMaterial", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/progress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "d99e6wmJJRKFLcXIDvt9F5V", "progress", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var progress = exports('progress', (_dec = ccclass("progress"), _dec2 = property({
        type: ProgressBar
      }), _dec3 = property({
        type: ProgressBar
      }), _dec4 = property({
        type: ProgressBar
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(progress, _Component);
        function progress() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sprite", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "ProgressBar", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "reProgressBar", _descriptor3, _assertThisInitialized(_this));
          _this.timer = 0;
          return _this;
        }
        var _proto = progress.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.pro = function pro(num) {
          this.sprite.getComponent(ProgressBar).progress = num;
          this.ProgressBar.getComponent(ProgressBar).progress = num;
          this.reProgressBar.getComponent(ProgressBar).progress = num;
        };
        _proto.update = function update(deltaTime) {
          this.timer += 0.1 * deltaTime;
          if (this.timer > 1) {
            this.timer = 0;
          }
          this.pro(this.timer);
        };
        return progress;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ProgressBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "reProgressBar", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/puzzle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ccenum, Node, Vec2, input, Input, Vec3, KeyCode, view, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ccenum = module.ccenum;
      Node = module.Node;
      Vec2 = module.Vec2;
      input = module.input;
      Input = module.Input;
      Vec3 = module.Vec3;
      KeyCode = module.KeyCode;
      view = module.view;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "fbbb4nzS11HVI7P0lFdPl+g", "puzzle", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MoveDirection = /*#__PURE__*/function (MoveDirection) {
        MoveDirection[MoveDirection["NONE"] = 0] = "NONE";
        MoveDirection[MoveDirection["UP"] = 1] = "UP";
        MoveDirection[MoveDirection["DOWN"] = 2] = "DOWN";
        MoveDirection[MoveDirection["LEFT"] = 3] = "LEFT";
        MoveDirection[MoveDirection["RIGHT"] = 4] = "RIGHT";
        return MoveDirection;
      }(MoveDirection || {});
      var minTilesCount = 2;
      var mapMoveStep = 1;
      var minMoveValue = 50;
      ccenum(MoveDirection);
      var Puzzle = exports('Puzzle', (_dec = ccclass('Puzzle'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Puzzle, _Component);
        function Puzzle() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._touchStartPos = new Vec2();
          _this._isMapLoaded = false;
          _initializerDefineProperty(_this, "floorLayerName", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "barrierLayerName", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "objectGroupName", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "startObjectName", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "successObjectName", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "isBlocked", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "player", _descriptor7, _assertThisInitialized(_this));
          _this._touching = false;
          _this._succeedLayer = null;
          _this._curTile = new Vec2();
          _this._startTile = new Vec2();
          _this._endTile = new Vec2();
          _this._tiledMap = null;
          _this._layerFloor = null;
          _this._layerBarrier = null;
          return _this;
        }
        var _proto = Puzzle.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          if (!this._isMapLoaded) {
            this.player.active = false;
          }
          input.on(Input.EventType.KEY_UP, this._onKeyPressed, this);
          this.node.on(Input.EventType.TOUCH_START, function (touch, event) {
            _this2._touching = true;
            _this2._touchStartPos.set(touch.getLocation());
          });
          this.node.on(Input.EventType.TOUCH_END, function (touch, event) {
            if (!_this2._touching || !_this2._isMapLoaded || _this2._succeedLayer.active) return;
            _this2._touching = false;
            var touchPos = touch.getLocation();
            var movedX = touchPos.x - _this2._touchStartPos.x;
            var movedY = touchPos.y - _this2._touchStartPos.y;
            var movedXValue = Math.abs(movedX);
            var movedYValue = Math.abs(movedY);
            if (movedXValue < minMoveValue && movedYValue < minMoveValue) {
              // touch moved not enough
              return;
            }
            var tp = _this2._curTile;
            var newTile = new Vec2(tp.x, tp.y);
            var mapMoveDir = MoveDirection.NONE;
            if (movedXValue >= movedYValue) {
              // move to right or left
              if (movedX > 0) {
                newTile.x += 1;
                mapMoveDir = MoveDirection.LEFT;
              } else {
                newTile.x -= 1;
                mapMoveDir = MoveDirection.RIGHT;
              }
            } else {
              // move to up or down
              if (movedY > 0) {
                newTile.y -= 1;
                mapMoveDir = MoveDirection.DOWN;
              } else {
                newTile.y += 1;
                mapMoveDir = MoveDirection.UP;
              }
            }
            _this2._tryMoveToNewTile(newTile, mapMoveDir);
          });
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.KEY_UP, this._onKeyPressed, this);
        };
        _proto.restartGame = function restartGame() {
          this._succeedLayer.active = false;
          this._curTile.set(this._startTile);
          this._updatePlayerPos();
          this._initMapPos();
        };
        _proto.start = function start() {
          // init the map position
          this._initMapPos();

          // init the succeed layer
          this._succeedLayer = this.node.getParent().getChildByName('succeedLayer');
          this._succeedLayer.active = false;

          // init the player position
          this._tiledMap = this.node.getComponent('cc.TiledMap');
          var objectGroup = this._tiledMap.getObjectGroup(this.objectGroupName);
          if (!objectGroup) return;
          var startObj = objectGroup.getObject(this.startObjectName);
          var endObj = objectGroup.getObject(this.successObjectName);
          if (!startObj || !endObj) return;
          var startPos = new Vec2(startObj.x, startObj.y);
          var endPos = new Vec2(endObj.x, endObj.y);
          this._layerFloor = this._tiledMap.getLayer(this.floorLayerName);
          this._layerBarrier = this._tiledMap.getLayer(this.barrierLayerName);
          if (!this._layerFloor || !this._layerBarrier) return;
          this._curTile = this._startTile = this._getTilePos(startPos);
          this._endTile = this._getTilePos(endPos);
          if (this.player) {
            this._updatePlayerPos();
            this.player.active = true;
          }
          this._isMapLoaded = true;
        };
        _proto._initMapPos = function _initMapPos() {
          this.node.setPosition(0, 0);
        };
        _proto._updatePlayerPos = function _updatePlayerPos() {
          var pos = this._layerFloor.getPositionAt(this._curTile);
          this.player.setPosition(new Vec3(pos.x, pos.y, 0));
        };
        _proto._getTilePos = function _getTilePos(posInPixel) {
          var mapSize = this.node._uiProps.uiTransformComp.contentSize;
          var tileSize = this._tiledMap.getTileSize();
          var x = Math.floor(posInPixel.x / tileSize.width);
          var y = Math.floor((mapSize.height - posInPixel.y) / tileSize.height);
          return new Vec2(x, y);
        };
        _proto._onKeyPressed = function _onKeyPressed(event) {
          if (!this._isMapLoaded || this._succeedLayer.active) return;
          var newTile = new Vec2(this._curTile.x, this._curTile.y);
          var mapMoveDir = MoveDirection.NONE;
          switch (event.keyCode) {
            case KeyCode.ARROW_UP:
              newTile.y -= 1;
              mapMoveDir = MoveDirection.DOWN;
              break;
            case KeyCode.ARROW_DOWN:
              newTile.y += 1;
              mapMoveDir = MoveDirection.UP;
              break;
            case KeyCode.ARROW_LEFT:
              newTile.x -= 1;
              mapMoveDir = MoveDirection.RIGHT;
              break;
            case KeyCode.ARROW_RIGHT:
              newTile.x += 1;
              mapMoveDir = MoveDirection.LEFT;
              break;
            default:
              return;
          }
          this._tryMoveToNewTile(newTile, mapMoveDir);
        };
        _proto._tryMoveToNewTile = function _tryMoveToNewTile(newTile, mapMoveDir) {
          var mapSize = this._tiledMap.getMapSize();
          if (newTile.x < 0 || newTile.x >= mapSize.width) return;
          if (newTile.y < 0 || newTile.y >= mapSize.height) return;
          if (this._layerBarrier.getTileGIDAt(newTile.x, newTile.y)) {
            console.log('This way is blocked!');
            this.isBlocked = true;
            return false;
          } else {
            this.isBlocked = false;
          }

          // update the player position
          this._curTile = newTile;
          this._updatePlayerPos();

          // move the map if necessary
          this._tryMoveMap(mapMoveDir);

          // check the player is success or not
          if (this._curTile.equals(this._endTile)) {
            console.log('succeed');
            this._succeedLayer.active = true;
          }
        };
        _proto._tryMoveMap = function _tryMoveMap(moveDir) {
          // get necessary data
          var mapContentSize = this.node._uiProps.uiTransformComp.contentSize;
          var mapPos = this.node.getPosition();
          var playerPos = this.player.getPosition();
          var viewSize = view.getVisibleSize();
          var tileSize = this._tiledMap.getTileSize();
          var minDisX = minTilesCount * tileSize.width;
          var minDisY = minTilesCount * tileSize.height;
          var disX = playerPos.x + mapPos.x;
          var disY = playerPos.y + mapPos.y;
          var newPos;
          switch (moveDir) {
            case MoveDirection.UP:
              if (disY < minDisY) {
                newPos = new Vec2(mapPos.x, mapPos.y + tileSize.height * mapMoveStep);
              }
              break;
            case MoveDirection.DOWN:
              if (viewSize.height - disY - tileSize.height < minDisY) {
                newPos = new Vec2(mapPos.x, mapPos.y - tileSize.height * mapMoveStep);
              }
              break;
            case MoveDirection.LEFT:
              if (viewSize.width - disX - tileSize.width < minDisX) {
                newPos = new Vec2(mapPos.x - tileSize.width * mapMoveStep, mapPos.y);
              }
              break;
            case MoveDirection.RIGHT:
              if (disX < minDisX) {
                newPos = new Vec2(mapPos.x + tileSize.width * mapMoveStep, mapPos.y);
              }
              break;
            default:
              return;
          }
          var vsize = view.getVisibleSize();
          var voffset = view.getVisibleOrigin();
          if (newPos) {
            // calculate the position range of map
            var minX = viewSize.width - mapContentSize.width - voffset.x;
            var maxX = voffset.x;
            var minY = viewSize.height - mapContentSize.height - voffset.y;
            var maxY = voffset.y;
            if (newPos.x < minX) newPos.x = minX;
            if (newPos.x > maxX) newPos.x = maxX;
            if (newPos.y < minY) newPos.y = minY;
            if (newPos.y > maxY) newPos.y = maxY;
            if (newPos.x != mapPos.x || newPos.y != mapPos.y) {
              console.log('Move the map to new position: ', newPos);
              this.node.setPosition(newPos.x, newPos.y);
            }
          }
        };
        return Puzzle;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "floorLayerName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'floor';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "barrierLayerName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'barrier';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "objectGroupName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'players';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "startObjectName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'SpawnPoint';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "successObjectName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'SuccessPoint';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isBlocked", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "player", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RaycastCanvasTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Canvas, Label, geometry, input, Input, UITransform, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Canvas = module.Canvas;
      Label = module.Label;
      geometry = module.geometry;
      input = module.input;
      Input = module.Input;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "ef1feyKBBBGoLo0Surp/QQK", "RaycastCanvasTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RaycastCanvasTest = exports('RaycastCanvasTest', (_dec = ccclass("RaycastCanvasTest"), _dec2 = property({
        type: Canvas
      }), _dec3 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RaycastCanvasTest, _Component);
        function RaycastCanvasTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "canvas", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          _this._ray = new geometry.Ray();
          _this._aabb = new geometry.AABB();
          return _this;
        }
        var _proto = RaycastCanvasTest.prototype;
        _proto.onEnable = function onEnable() {
          this.label.string = '点击文字测试射线检测';
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onDisable = function onDisable() {
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          var touch = event.touch;
          this.label.string = '点击文字测试射线检测';
          var uiCamera = this.canvas.camera;
          var point = touch.getLocation();
          uiCamera.screenPointToRay(this._ray, point.x, point.y);
          var uiTrans = this.label.getComponent(UITransform);
          uiTrans.getComputeAABB(this._aabb);
          if (geometry.intersect.rayAABB(this._ray, this._aabb)) {
            this.label.string = '检测成功';
          }
        };
        return RaycastCanvasTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RaycastColliderTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Material, Camera, MeshRenderer, geometry, input, Input, PhysicsSystem, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      Camera = module.Camera;
      MeshRenderer = module.MeshRenderer;
      geometry = module.geometry;
      input = module.input;
      Input = module.Input;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "37034s9FztAjYJasirfUmAr", "RaycastColliderTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RaycastColliderTest = exports('RaycastColliderTest', (_dec = ccclass("RaycastColliderTest"), _dec2 = property({
        type: Material
      }), _dec3 = property({
        type: Material
      }), _dec4 = property({
        type: Camera
      }), _dec5 = property({
        type: MeshRenderer
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RaycastColliderTest, _Component);
        function RaycastColliderTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "defaultMaterial", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rayMaterial", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cameraCom", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "modelCom", _descriptor4, _assertThisInitialized(_this));
          _this._ray = new geometry.Ray();
          return _this;
        }
        var _proto = RaycastColliderTest.prototype;
        _proto.onEnable = function onEnable() {
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onDisable = function onDisable() {
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          var touch = event.touch;
          this.cameraCom.screenPointToRay(touch.getLocationX(), touch.getLocationY(), this._ray);
          if (PhysicsSystem.instance.raycast(this._ray)) {
            var r = PhysicsSystem.instance.raycastResults;
            for (var i = 0; i < r.length; i++) {
              var item = r[i];
              if (item.collider.node.uuid == this.modelCom.node.uuid) {
                this.modelCom.material = this.rayMaterial;
              }
            }
          } else {
            this.modelCom.material = this.defaultMaterial;
          }
        };
        return RaycastColliderTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "defaultMaterial", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rayMaterial", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cameraCom", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "modelCom", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RaycastModelTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Material, Camera, MeshRenderer, geometry, input, Input, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      Camera = module.Camera;
      MeshRenderer = module.MeshRenderer;
      geometry = module.geometry;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "2b0a2MPT3xIFJHQ0fZRqYF2", "RaycastModelTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RaycastModelTest = exports('RaycastModelTest', (_dec = ccclass("RaycastModelTest"), _dec2 = property({
        type: Material
      }), _dec3 = property({
        type: Material
      }), _dec4 = property({
        type: Camera
      }), _dec5 = property({
        type: MeshRenderer
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RaycastModelTest, _Component);
        function RaycastModelTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "defaultMaterial", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rayMaterial", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cameraCom", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "modelCom", _descriptor4, _assertThisInitialized(_this));
          _this._ray = new geometry.Ray();
          return _this;
        }
        var _proto = RaycastModelTest.prototype;
        _proto.onEnable = function onEnable() {
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onDisable = function onDisable() {
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          var touch = event.touch;
          var point = touch.getLocation();
          this.cameraCom.screenPointToRay(point.x, point.y, this._ray);
          if (geometry.intersect.rayModel(this._ray, this.modelCom.model)) {
            this.modelCom.material = this.rayMaterial;
          } else {
            this.modelCom.material = this.defaultMaterial;
          }
        };
        return RaycastModelTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "defaultMaterial", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rayMaterial", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "cameraCom", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "modelCom", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/release-depend-asset.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, loader, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      loader = module.loader;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "66f91i0DbtJxrxCWvnTAzUa", "release-depend-asset", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var releaseDependAsset = exports('releaseDependAsset', (_dec = ccclass('releaseDependAsset'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(releaseDependAsset, _Component);
        function releaseDependAsset() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "prefabAsset", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "prefabNode", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = releaseDependAsset.prototype;
        _proto.releaseAsset = function releaseAsset() {
          if (!this.prefabNode) {
            return;
          }
          if (!this.prefabNode.active) {
            return;
          }
          this.prefabNode.active = false;
          this.prefabNode.parent = null;
          var deps = loader.getDependsRecursively(this.prefabAsset);
          loader.release(deps);
        };
        return releaseDependAsset;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabAsset", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefabNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-camera-to-model.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, MeshRenderer, RenderTexture, Camera, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      RenderTexture = module.RenderTexture;
      Camera = module.Camera;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "8ed22sN8h5F/Yqo7TkUBfq+", "render-camera-to-model", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var RenderCameraToModel = exports('RenderCameraToModel', (_dec = ccclass('RenderCameraToModel'), _dec2 = menu('RenderTexture/RenderCameraToModel'), _dec3 = property(MeshRenderer), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RenderCameraToModel, _Component);
        function RenderCameraToModel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "model", _descriptor, _assertThisInitialized(_this));
          _this._renderTex = null;
          return _this;
        }
        var _proto = RenderCameraToModel.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          var renderTex = this._renderTex = new RenderTexture();
          renderTex.reset({
            width: 256,
            height: 256
          });
          var cameraComp = this.getComponent(Camera);
          cameraComp.targetTexture = renderTex;
          var pass = this.model.material.passes[0];
          var binding = pass.getBinding('mainTexture');
          pass.bindTexture(binding, renderTex.getGFXTexture());
        };
        _proto.onDestroy = function onDestroy() {
          if (this._renderTex) {
            this._renderTex.destroy();
            this._renderTex = null;
          }
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return RenderCameraToModel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-texture-sample.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, RenderTexture, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RenderTexture = module.RenderTexture;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "1e122FIcbpHJqcxfbNqM2IS", "render-texture-sample", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = RenderTextureSample
       * DateTime = Fri Sep 17 2021 17:52:49 GMT+0800 (中国标准时间)
       * Author = EndEvil
       * FileBasename = render-texture-sample.ts
       * FileBasenameNoExtension = render-texture-sample
       * URL = db://assets/cases/render-texture-sample/render-texture-sample.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var RenderTextureSample = exports('RenderTextureSample', (_dec = ccclass('RenderTextureSample'), _dec2 = property(RenderTexture), _dec3 = property(RenderTexture), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RenderTextureSample, _Component);
        function RenderTextureSample() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "renderTexture1", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "renderTexture2", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = RenderTextureSample.prototype;
        _proto.start = function start() {
          // this.renderTexture1!.setWrapMode(RenderTexture.WrapMode.CLAMP_TO_EDGE, RenderTexture.WrapMode.CLAMP_TO_EDGE);
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        return RenderTextureSample;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "renderTexture1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "renderTexture2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-ui-to-model.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, MeshRenderer, Canvas, RenderTexture, view, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      Canvas = module.Canvas;
      RenderTexture = module.RenderTexture;
      view = module.view;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "39d78FLjklEWZX29QTsFrlf", "render-ui-to-model", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var RenderUIToModel = exports('RenderUIToModel', (_dec = ccclass('RenderUIToModel'), _dec2 = menu('RenderTexture/RenderUIToModel'), _dec3 = property(MeshRenderer), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RenderUIToModel, _Component);
        function RenderUIToModel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "model", _descriptor, _assertThisInitialized(_this));
          _this.renderTexture = null;
          return _this;
        }
        var _proto = RenderUIToModel.prototype;
        _proto.start = function start() {
          var canvas = this.getComponent(Canvas);
          var tex = new RenderTexture();
          tex.name = 'render-ui-to-model';
          var size = view.getVisibleSize();
          tex.reset({
            width: size.width,
            height: size.height
          });
          this.renderTexture = tex;
          canvas.targetTexture = tex;
          var mat = this.model.material;
          mat.setProperty('mainTexture', tex);
        };
        _proto.onDestroy = function onDestroy() {
          if (this.renderTexture) {
            this.renderTexture.destroy();
            this.renderTexture = null;
          }
        };
        return RenderUIToModel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-ui-to-spriteframe.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, SpriteFrame, RenderTexture, view, Canvas, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      RenderTexture = module.RenderTexture;
      view = module.view;
      Canvas = module.Canvas;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "d5a0eQxO1FNObBKLceL0sgB", "render-ui-to-spriteframe", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var RenderUIToSpriteFrame = exports('RenderUIToSpriteFrame', (_dec = ccclass('RenderUIToSpriteFrame'), _dec2 = menu('RenderTexture/RenderUIToSpriteFrame'), _dec3 = property(Sprite), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RenderUIToSpriteFrame, _Component);
        function RenderUIToSpriteFrame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "content", _descriptor, _assertThisInitialized(_this));
          _this._renderTex = null;
          return _this;
        }
        var _proto = RenderUIToSpriteFrame.prototype;
        _proto.start = function start() {
          var spriteFrame = this.content.spriteFrame;
          var sp = new SpriteFrame();
          sp.reset({
            originalSize: spriteFrame.originalSize,
            rect: spriteFrame.rect,
            offset: spriteFrame.offset,
            isRotate: spriteFrame.rotated,
            borderTop: spriteFrame.insetTop,
            borderLeft: spriteFrame.insetLeft,
            borderBottom: spriteFrame.insetBottom,
            borderRight: spriteFrame.insetRight
          });
          var renderTex = this._renderTex = new RenderTexture();
          var size = view.getVisibleSize();
          renderTex.reset({
            width: size.width,
            height: size.height
          });
          var cameraComp = this.getComponent(Canvas);
          cameraComp.targetTexture = renderTex;
          sp.texture = renderTex;
          this.content.spriteFrame = sp;
          this.content.updateMaterial();
        };
        _proto.onDestroy = function onDestroy() {
          if (this._renderTex) {
            this._renderTex.destroy();
            this._renderTex = null;
          }
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return RenderUIToSpriteFrame;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ReplaceSlotDisplay.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, dragonBones, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dragonBones = module.dragonBones;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "8c143MTiytPEpW1sihXhDt7", "ReplaceSlotDisplay", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ReplaceSlotDisplay = exports('ReplaceSlotDisplay', (_dec = ccclass('ReplaceSlotDisplay'), _dec2 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec3 = property({
        type: dragonBones.ArmatureDisplay
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ReplaceSlotDisplay, _Component);
        function ReplaceSlotDisplay() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "armatureDisplay", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "replaceArmatureDisplay", _descriptor2, _assertThisInitialized(_this));
          _this._leftWeaponIndex = 0;
          _this._rightDisplayIndex = 0;
          _this._rightDisplayNames = [];
          _this._rightDisplayOffset = [];
          return _this;
        }
        var _proto = ReplaceSlotDisplay.prototype;
        _proto.start = function start() {
          this.replaceArmatureDisplay.node.active = false;
          this._leftWeaponIndex = 0;
          this._rightDisplayIndex = 0;
          this._rightDisplayNames = ["weapon_1004_r", "weapon_1004d_r"];
          this._rightDisplayOffset = [{
            x: 0,
            y: 0
          }, {
            x: -60,
            y: 100
          }];
        };
        _proto.left = function left() {
          var armature = this.armatureDisplay.armature();
          var slot = armature.getSlot("weapon_hand_l");
          slot.displayIndex = slot.displayIndex == 0 ? 4 : 0;
        };
        _proto.right = function right() {
          this._rightDisplayIndex++;
          this._rightDisplayIndex %= this._rightDisplayNames.length;
          var armature = this.armatureDisplay.armature();
          var slot = armature.getSlot("weapon_hand_r");
          var replaceArmatureName = this.replaceArmatureDisplay.armatureName;
          var displayName = this._rightDisplayNames[this._rightDisplayIndex];
          var factory = dragonBones.CCFactory.getInstance();
          factory.replaceSlotDisplay(this.replaceArmatureDisplay.getArmatureKey(), replaceArmatureName, "weapon_r", displayName, slot);
          var offset = this._rightDisplayOffset[this._rightDisplayIndex];
          slot.parent.offset.x = offset.x;
          slot.parent.offset.y = offset.y;
          armature.invalidUpdate();
        };
        return ReplaceSlotDisplay;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "armatureDisplay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "replaceArmatureDisplay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/resource-data-manager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './localization-global.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, settings, Settings, assetManager, resourceListPath, pluginName, resourceBundlePath, mainName, runtimeBundleName;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      settings = module.settings;
      Settings = module.Settings;
      assetManager = module.assetManager;
    }, function (module) {
      resourceListPath = module.resourceListPath;
      pluginName = module.pluginName;
      resourceBundlePath = module.resourceBundlePath;
      mainName = module.mainName;
      runtimeBundleName = module.runtimeBundleName;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0a95a0kirtJnJnMnZWSRaFn", "resource-data-manager", undefined);
      var ResourceDataManager = exports('default', /*#__PURE__*/function () {
        function ResourceDataManager() {}
        var _proto = ResourceDataManager.prototype;
        _proto.readResourceList = /*#__PURE__*/function () {
          var _readResourceList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  {
                    _context.next = 4;
                    break;
                  }
                case 4:
                  console.log("[" + pluginName + "] this is build env");
                  return _context.abrupt("return", this.runtimeLoad(resourceListPath));
                case 9:
                  return _context.abrupt("return", this.previewLoad(resourceListPath));
                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function readResourceList() {
            return _readResourceList.apply(this, arguments);
          }
          return readResourceList;
        }();
        _proto.readResourceBundle = /*#__PURE__*/function () {
          var _readResourceBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tags) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  {
                    _context2.next = 4;
                    break;
                  }
                case 4:
                  return _context2.abrupt("return", this.runtimeLoad(resourceBundlePath));
                case 8:
                  return _context2.abrupt("return", this.previewLoad(resourceBundlePath));
                case 9:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function readResourceBundle(_x) {
            return _readResourceBundle.apply(this, arguments);
          }
          return readResourceBundle;
        }()
        /**
         * 编辑器模式下使用
         * @param locales
         */;

        _proto.editorLoad = /*#__PURE__*/
        function () {
          var _editorLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(locales) {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", Editor.Message.request(mainName, 'get-resource-bundle', locales));
                case 1:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));
          function editorLoad(_x2) {
            return _editorLoad.apply(this, arguments);
          }
          return editorLoad;
        }()
        /**
         * 构建后运行时使用
         * @param fileName
         */;

        _proto.runtimeLoad = /*#__PURE__*/
        function () {
          var _runtimeLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(fileName) {
            var bundle, jsonAsset;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.getBundle(runtimeBundleName);
                case 2:
                  bundle = _context4.sent;
                  if (bundle) {
                    _context4.next = 5;
                    break;
                  }
                  return _context4.abrupt("return", undefined);
                case 5:
                  _context4.next = 7;
                  return this.getResource(bundle, fileName);
                case 7:
                  jsonAsset = _context4.sent;
                  if (!(!jsonAsset || !jsonAsset.json)) {
                    _context4.next = 10;
                    break;
                  }
                  return _context4.abrupt("return", undefined);
                case 10:
                  return _context4.abrupt("return", jsonAsset.json);
                case 11:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));
          function runtimeLoad(_x3) {
            return _runtimeLoad.apply(this, arguments);
          }
          return runtimeLoad;
        }()
        /**
         * 浏览器预览使用
         * @param urlPath
         */;

        _proto.previewLoad = /*#__PURE__*/
        function () {
          var _previewLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(urlPath) {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.prev = 0;
                  _context5.next = 3;
                  return fetch(mainName + "/" + urlPath);
                case 3:
                  _context5.next = 5;
                  return _context5.sent.json();
                case 5:
                  return _context5.abrupt("return", _context5.sent);
                case 8:
                  _context5.prev = 8;
                  _context5.t0 = _context5["catch"](0);
                  return _context5.abrupt("return", undefined);
                case 11:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, null, [[0, 8]]);
          }));
          function previewLoad(_x4) {
            return _previewLoad.apply(this, arguments);
          }
          return previewLoad;
        }();
        _proto.checkBundle = /*#__PURE__*/function () {
          var _checkBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(bundleName) {
            var queryResult, bundle;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  queryResult = settings.querySettings(Settings.Category.ASSETS, 'preloadBundles');
                  bundle = queryResult == null ? void 0 : queryResult.find(function (it) {
                    return it.bundle === bundleName;
                  });
                  return _context6.abrupt("return", !!bundle);
                case 3:
                case "end":
                  return _context6.stop();
              }
            }, _callee6);
          }));
          function checkBundle(_x5) {
            return _checkBundle.apply(this, arguments);
          }
          return checkBundle;
        }();
        _proto.getBundle = /*#__PURE__*/function () {
          var _getBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bundleName) {
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  return _context7.abrupt("return", new Promise(function (resolve) {
                    assetManager.loadBundle(bundleName, function (error, bundle) {
                      if (error) {
                        resolve(undefined);
                      } else {
                        resolve(bundle);
                      }
                    });
                  }));
                case 1:
                case "end":
                  return _context7.stop();
              }
            }, _callee7);
          }));
          function getBundle(_x6) {
            return _getBundle.apply(this, arguments);
          }
          return getBundle;
        }();
        _proto.getResource = /*#__PURE__*/function () {
          var _getResource = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(bundle, resourceName) {
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  return _context8.abrupt("return", new Promise(function (resolve) {
                    bundle.load(resourceName, function (error, asset) {
                      if (error) {
                        resolve(undefined);
                      } else {
                        resolve(asset);
                      }
                    });
                  }));
                case 1:
                case "end":
                  return _context8.stop();
              }
            }, _callee8);
          }));
          function getResource(_x7, _x8) {
            return _getResource.apply(this, arguments);
          }
          return getResource;
        }();
        return ResourceDataManager;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/restart.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, game, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "81256DPUK1LjY/2G7hd84DJ", "restart", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Restart = exports('Restart', (_dec = ccclass('Restart'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Restart, _Component);
        function Restart() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = Restart.prototype;
        _proto.start = function start() {};
        _proto.restart = function restart() {
          console.log("restart the game");
          game.restart();
        };
        return Restart;
      }(Component)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.3/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.3/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.3/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/rich-text-child-state.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, RichText, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RichText = module.RichText;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "9b4e3CUnDlEaqIC7RDyDBWh", "rich-text-child-state", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RichTextChildState = exports('RichTextChildState', (_dec = ccclass('RichTextChildState'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RichTextChildState, _Component);
        function RichTextChildState() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._richText = null;
          return _this;
        }
        var _proto = RichTextChildState.prototype;
        _proto.start = function start() {
          var _this$node$getChildBy;
          this._richText = (_this$node$getChildBy = this.node.getChildByName('RichText')) == null ? void 0 : _this$node$getChildBy.getComponent(RichText);
        };
        _proto.update = function update(deltaTime) {};
        _proto.onSetActive = function onSetActive() {
          this._richText.node.active = true;
        };
        _proto.onSetInactive = function onSetInactive() {
          this._richText.node.active = false;
        };
        _proto.onUpdateContent = function onUpdateContent(event, content) {
          this._richText.string = content || Math.random().toString();
        };
        return RichTextChildState;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/rich-text-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Vec3, instantiate, find, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Vec3 = module.Vec3;
      instantiate = module.instantiate;
      find = module.find;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "dd8a3yRmjdPM68OsJes8h4E", "rich-text-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RichTextEvent = exports('RichTextEvent', (_dec = ccclass('RichTextEvent'), _dec2 = property(Prefab), _dec3 = property(Vec3), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RichTextEvent, _Component);
        function RichTextEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "templateTips", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "position", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = RichTextEvent.prototype;
        _proto.onClick = function onClick(event, param) {
          var node = instantiate(this.templateTips);
          node.position = this.position;
          node.parent = find('Canvas');
          var label = node.getComponent(Label);
          label.string = 'Duang Duang';
        };
        return RichTextEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "templateTips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "position", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/rich-text-font-color.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, RichText, Color, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RichText = module.RichText;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "84fd4jiI21LQp50t5Gf/Nm6", "rich-text-font-color", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var rich_text_font_color = exports('rich_text_font_color', (_dec = ccclass('rich_text_font_color'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(rich_text_font_color, _Component);
        function rich_text_font_color() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.richText = null;
          return _this;
        }
        var _proto = rich_text_font_color.prototype;
        _proto.onLoad = function onLoad() {
          this.richText = this.getComponent(RichText);
        };
        _proto.start = function start() {
          this.scheduleOnce(this.changeFontColor, 1);
          this.scheduleOnce(this.changeString, 2);
          this.scheduleOnce(this.changeFontColorToOrange, 3);
        };
        _proto.changeFontColor = function changeFontColor() {
          this.richText.fontColor = Color.CYAN.clone();
        };
        _proto.changeString = function changeString() {
          this.richText.string = "<color=#ff0000>\u5988\u5988</c>\u518D\u4E5F<size=20>\u4E0D\u7528\u62C5\u5FC3</size>\u6211\u5728 <size=56><color=#cc00ff>Creator</c></s> \u91CC\u9762\u4F7F\u7528<color=#ff0000>\u4E94</c><color=#00ff00>\u5F69</c><color=#00e0ff>\u7F24</c><color=#ffff00>\u7EB7</>\uFF0C<size=20>\u5927\u5C0F</s><size=60>\u4E0D\u4E00</s>\u7684<size=33>\u6587\u5B57</s>\u4E86";
        };
        _proto.changeFontColorToOrange = function changeFontColorToOrange() {
          this.richText.fontColor = new Color(255, 112, 0);
        };
        return rich_text_font_color;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/rotate-around-axis.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Quat, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "6ebf6h60j5MUKTFQSGSfF39", "rotate-around-axis", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var _v3_0 = new Vec3();
      var _quat_0 = new Quat();
      var RotateAroundAxis = exports('RotateAroundAxis', (_dec = ccclass("RotateAroundAxis"), _dec2 = menu("UI/RotateAroundAxis"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RotateAroundAxis, _Component);
        function RotateAroundAxis() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = RotateAroundAxis.prototype;
        _proto.update = function update(deltaTime) {
          _v3_0.set(-1, 1, 0);
          _v3_0.normalize();
          Quat.rotateAround(_quat_0, this.node.rotation, _v3_0, Math.PI * 0.01);
          this.node.setRotation(_quat_0);
        };
        return RotateAroundAxis;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/rotate.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, math, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "28769dseGxNyq/PV1QPTk17", "rotate", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var rotate = exports('rotate', (_dec = ccclass("rotate"), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(rotate, _Component);
        function rotate() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "xAxis", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "xTo", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "yAxis", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "yTo", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "zAxis", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "zTo", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "time", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loop", _descriptor8, _assertThisInitialized(_this));
          _this.originEuler = new Vec3();
          _this.currT = 0;
          return _this;
        }
        var _proto = rotate.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this.originEuler.set(this.node.eulerAngles);
        };
        _proto.update = function update(dt) {
          // Your update function goes here.
          if (this.loop && this.currT + dt > this.time) {
            return;
          }
          this.currT = math.repeat(this.currT + dt, this.time);
          var x = this.xAxis ? math.lerp(this.originEuler.x, this.xTo, this.currT / this.time) : this.node.eulerAngles.x;
          var y = this.yAxis ? math.lerp(this.originEuler.y, this.yTo, this.currT / this.time) : this.node.eulerAngles.y;
          var z = this.zAxis ? math.lerp(this.originEuler.z, this.zTo, this.currT / this.time) : this.node.eulerAngles.z;
          this.node.setRotationFromEuler(x, y, z);
        };
        return rotate;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "xAxis", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "xTo", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "yAxis", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "yTo", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "zAxis", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "zTo", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "loop", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RTCapture.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Camera, SpriteFrame, RenderTexture, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Camera = module.Camera;
      SpriteFrame = module.SpriteFrame;
      RenderTexture = module.RenderTexture;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _class3;
      cclegacy._RF.push({}, "f9feeneaxxL/JBwJb0h6fKm", "RTCapture", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var RTCapture = exports('RTCapture', (_dec = ccclass('RTCapture'), _dec2 = menu('RenderTexture/RTCapture'), _dec3 = property(Sprite), _dec4 = property(Camera), _dec(_class = _dec2(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RTCapture, _Component);
        function RTCapture() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sprite", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "camera", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = RTCapture.prototype;
        _proto.start = function start() {
          var spriteFrame = this.sprite.spriteFrame;
          var sp = new SpriteFrame();
          sp.reset({
            originalSize: spriteFrame.originalSize,
            rect: spriteFrame.rect,
            offset: spriteFrame.offset,
            isRotate: spriteFrame.rotated,
            borderTop: spriteFrame.insetTop,
            borderLeft: spriteFrame.insetLeft,
            borderBottom: spriteFrame.insetBottom,
            borderRight: spriteFrame.insetRight
          });
          var renderTex = RTCapture._renderTex = new RenderTexture();
          renderTex.reset({
            width: 256,
            height: 256
          });
          this.camera.targetTexture = renderTex;
          sp.texture = renderTex;
          this.sprite.spriteFrame = sp;
          this.sprite.updateMaterial();
        };
        _proto.onDestroy = function onDestroy() {
          if (RTCapture._renderTex) {
            RTCapture._renderTex.destroy();
            RTCapture._renderTex = null;
          }
        };
        return RTCapture;
      }(Component), _class3._renderTex = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RTPixel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './RTCapture.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, SpriteFrame, Texture2D, director, Component, RTCapture;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      RTCapture = module.RTCapture;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "2a91bm9/a5GNYHSxEA3GSF8", "RTPixel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /**
       * Predefined variables
       * Name = RTPixel
       * DateTime = Mon Sep 06 2021 11:31:06 GMT+0800 (中国标准时间)
       * Author = zhakesi
       * FileBasename = RTPixel.ts
       * FileBasenameNoExtension = RTPixel
       * URL = db://assets/RTPixel.ts
       * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/
       *
       */

      var RTPixel = exports('RTPixel', (_dec = ccclass('RTPixel'), _dec2 = menu('RenderTexture/RTPixel'), _dec3 = property(Sprite), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RTPixel, _Component);
        function RTPixel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sprite", _descriptor, _assertThisInitialized(_this));
          _this.dstTexture = void 0;
          _this.sp = void 0;
          return _this;
        }
        var _proto = RTPixel.prototype;
        _proto.start = function start() {
          var spriteframe = this.sprite.spriteFrame;
          this.sp = new SpriteFrame();
          this.sp.reset({
            originalSize: spriteframe.getOriginalSize(),
            rect: spriteframe.getRect(),
            offset: spriteframe.getOffset(),
            isRotate: spriteframe.isRotated(),
            borderTop: spriteframe.insetTop,
            borderLeft: spriteframe.insetLeft,
            borderBottom: spriteframe.insetBottom,
            borderRight: spriteframe.insetRight
          });
          this.dstTexture = new Texture2D();
          this.dstTexture.reset({
            width: 256,
            height: 256,
            format: director.root.device.swapchainFormat,
            mipmapLevel: 0
          });
        };
        _proto.update = function update(deltaTime) {
          var src = RTCapture._renderTex;
          if (src) {
            var pbuffer = src.readPixels();
            this.dstTexture.uploadData(pbuffer);
          }
          this.sp.texture = this.dstTexture;
          this.sprite.spriteFrame = this.sp;
          this.sprite.updateMaterial();
        };
        _proto.onDestroy = function onDestroy() {
          if (this.dstTexture) {
            this.dstTexture.destroy();
            this.dstTexture = null;
          }
        };
        return RTPixel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.3/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.3/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.3/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/scenelist.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './listitem.ts', './backbutton.ts', './common.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Prefab, ScrollView, UITransform, instantiate, input, Input, Node, Sprite, Button, Vec2, Component, ItemType, ListItem, BackButton, SceneList;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Prefab = module.Prefab;
      ScrollView = module.ScrollView;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      input = module.input;
      Input = module.Input;
      Node = module.Node;
      Sprite = module.Sprite;
      Button = module.Button;
      Vec2 = module.Vec2;
      Component = module.Component;
    }, function (module) {
      ItemType = module.ItemType;
      ListItem = module.ListItem;
    }, function (module) {
      BackButton = module.BackButton;
    }, function (module) {
      SceneList = module.SceneList;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class2, _class3, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "687185yW5hKPJX0ATIa74GL", "scenelist", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var DisplayItems = function DisplayItems() {
        this.index = -1;
        this.type = -1;
      };
      var _temp_vec3 = new Vec3();
      var SceneManager = exports('SceneManager', (_dec = ccclass("scenemanager"), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: ScrollView
      }), _dec(_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SceneManager, _Component);
        function SceneManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "itemPrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "foldPrefab", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "scrollView", _descriptor3, _assertThisInitialized(_this));
          _this._items = [];
          _this._updateTimer = 0;
          _this._updateInterval = 0.2;
          _this._lastContentPosY = 0;
          _this._itemTemplateUITrans = void 0;
          _this._contentUITrans = void 0;
          _this._spacing = 10;
          // item vertical spacing
          _this._spawnCount = 10;
          // Initialize item number
          _this._reserveSize = 16;
          _this._displayHeight = 0;
          _this._displayItems = [];
          _this.lastFocusIndex = -1;
          return _this;
        }
        var _proto = SceneManager.prototype;
        _proto.onLoad = function onLoad() {
          this._itemTemplateUITrans = this.itemPrefab.data.getComponent(UITransform);
          this._contentUITrans = this.scrollView.content.getComponent(UITransform);
          this.makeSceneItems();
        };
        _proto.makeSceneItems = function makeSceneItems() {
          SceneList.foldCount = 0;
          if (!this.itemPrefab) {
            return;
          }
          this._displayItems.length = 0;
          this._items.length = 0;
          this.node.removeAllChildren();
          var sceneFlod = new DisplayItems();
          sceneFlod.index = 0;
          sceneFlod.type = ItemType.SCENSE_FOLD;
          this._displayItems.push(sceneFlod);
          // Recombine item and fold for sliding the entire queue
          for (var i = 0; i < SceneList.sceneArray.length; i++) {
            var scenseItem = new DisplayItems();
            scenseItem.index = i;
            scenseItem.type = ItemType.SCENSE_ITEM;
            this._displayItems.push(scenseItem);
            if (i + 1 < SceneList.sceneFold.length && SceneList.sceneFold[i] !== SceneList.sceneFold[i + 1]) {
              var _sceneFlod = new DisplayItems();
              _sceneFlod.index = i + 1;
              _sceneFlod.type = ItemType.SCENSE_FOLD;
              this._displayItems.push(_sceneFlod);
            }
          }
          this._contentUITrans.height = this._displayItems.length * (this._itemTemplateUITrans.height + this._spacing) + this._spacing; // get total content height
          this._displayHeight = this.node.parent.getComponent(UITransform).height;
          this._spawnCount = Math.ceil(this._displayHeight / (this._itemTemplateUITrans.height + this._spacing)) + this._reserveSize;
          if (this._spawnCount > this._displayItems.length) {
            this._spawnCount = this._displayItems.length;
          }
          for (var j = 0; j < this._spawnCount; j++) {
            var item = instantiate(this.itemPrefab);
            var type = this._displayItems[j].type;
            var index = this._displayItems[j].index;
            var name = this.getItemName(this._displayItems[j]);
            item.getComponent(ListItem).updateItem(type, index, name);
            this.node.addChild(item);
            var itemUITrans = item.getComponent(UITransform);
            item.setPosition(0, -itemUITrans.height * (0.1 + j) - this._spacing * (j + 1), 0);
            this._items.push(item);
          }
          input.on(Input.EventType.GAMEPAD_INPUT, this.onGamepadInput, this);
          this.scrollView.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.update(this._updateInterval);
        };
        _proto.getPositionInView = function getPositionInView(item) {
          // get item position in scrollview's node space
          var worldPos = item.parent.getComponent(UITransform).convertToWorldSpaceAR(item.position);
          var viewPos = this.scrollView.node.getComponent(UITransform).convertToNodeSpaceAR(worldPos);
          return viewPos;
        };
        _proto.getItemName = function getItemName(item) {
          if (item.type == ItemType.SCENSE_ITEM) {
            return SceneList.sceneArray[item.index];
          }
          return SceneList.sceneFold[item.index];
        };
        _proto.update = function update(dt) {
          this._updateTimer += dt;
          if (this._updateTimer < this._updateInterval) return; // we don't need to do the math every frame
          this._updateTimer = 0;
          var items = this._items;
          var isDown = this.scrollView.content.position.y < this._lastContentPosY; // scrolling direction
          var offset = (this._itemTemplateUITrans.height + this._spacing) * this._spawnCount;
          for (var i = 0; i < this._spawnCount; ++i) {
            var viewPos = this.getPositionInView(items[i]);
            items[i].getPosition(_temp_vec3);
            var isChange = false;
            if (isDown) {
              // if away from buffer zone and not reaching top of content
              if (viewPos.y < -this._displayHeight && _temp_vec3.y + offset <= 0) {
                _temp_vec3.y += offset;
                items[i].setPosition(_temp_vec3);
                isChange = true;
              }
            } else {
              // if away from buffer zone and not reaching bottom of content
              if (viewPos.y > this._displayHeight && _temp_vec3.y - offset > -this._contentUITrans.height) {
                var n = Math.floor((viewPos.y - this._displayHeight) / offset);
                _temp_vec3.y -= offset * (n + 1);
                items[i].setPosition(_temp_vec3);
                isChange = true;
              }
            }
            var yPos = _temp_vec3.y > 0 ? _temp_vec3.y : -1 * _temp_vec3.y;
            // Does not need to be refreshed every frame, only calculated when it changes
            if (isChange || yPos < offset) {
              // Quickly locate the corresponding index for returning from a specific scene
              var idx = Math.floor(yPos / offset) * this._spawnCount + i;
              if (idx >= 0 && idx < this._displayItems.length) {
                var _items$i$getComponent;
                var type = this._displayItems[idx].type;
                var index = this._displayItems[idx].index;
                var name = this.getItemName(this._displayItems[idx]);
                (_items$i$getComponent = items[i].getComponent(ListItem)) == null || _items$i$getComponent.updateItem(type, index, name);
              }
            }
          }
          // update lastContentPosY
          this._lastContentPosY = this.scrollView.content.position.y;
          if (BackButton.isControllerMode) {
            this.highlightFocusNode();
          }
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.GAMEPAD_INPUT, this.onGamepadInput, this);
        };
        _proto.addFocusIndex = function addFocusIndex() {
          BackButton.focusButtonIndex++;
          if (BackButton.focusButtonIndex >= this.node.children.length) {
            BackButton.focusButtonIndex = 0;
          }
        };
        _proto.decFocusIndex = function decFocusIndex() {
          BackButton.focusButtonIndex--;
          if (BackButton.focusButtonIndex < 0) {
            BackButton.focusButtonIndex = this.node.children.length - 1;
          }
        };
        _proto.highlightFocusNode = function highlightFocusNode() {
          if (this.lastFocusIndex >= 0) {
            this.node.children[this.lastFocusIndex].getComponent(Sprite).color = this.node.children[this.lastFocusIndex].getComponent(Button).normalColor;
          }
          if (!this.isCurrentFocusNodeFold()) {
            this.getCurrentFoucusNode().getComponent(Sprite).color = this.getCurrentFoucusNode().getComponent(Button).hoverColor;
            this.lastFocusIndex = BackButton.focusButtonIndex;
          }
        };
        _proto.getCurrentFoucusNode = function getCurrentFoucusNode() {
          return this.node.children[BackButton.focusButtonIndex];
        };
        _proto.isCurrentFocusNodeFold = function isCurrentFocusNodeFold() {
          var _this$getCurrentFoucu;
          return !!(((_this$getCurrentFoucu = this.getCurrentFoucusNode().getComponent(ListItem)) == null ? void 0 : _this$getCurrentFoucu.type) == ItemType.SCENSE_FOLD);
        };
        _proto.isControllerButtonPress = function isControllerButtonPress(val) {
          var ret = !!(val > 0);
          return ret;
        };
        _proto.isCurrentFocusOnEnd = function isCurrentFocusOnEnd() {
          var _this$getCurrentFoucu2;
          return ((_this$getCurrentFoucu2 = this.getCurrentFoucusNode().getComponent(ListItem)) == null ? void 0 : _this$getCurrentFoucu2.index) == SceneList.sceneArray.length - 1;
        };
        _proto.isCurrentFocusOnBegin = function isCurrentFocusOnBegin() {
          var _this$getCurrentFoucu3;
          return ((_this$getCurrentFoucu3 = this.getCurrentFoucusNode().getComponent(ListItem)) == null ? void 0 : _this$getCurrentFoucu3.index) == 0;
        };
        _proto.onTouchStart = function onTouchStart(event) {
          if (!this.scrollView.verticalScrollBar.node.active) this.scrollView.verticalScrollBar.node.active = true;
        };
        _proto.onGamepadInput = function onGamepadInput(event) {
          if (this.scrollView.verticalScrollBar.node.active) this.scrollView.verticalScrollBar.node.active = false;
          var gp = event.gamepad;
          var axisPrecision = 0.03;
          BackButton.isControllerMode = true;
          var ls = gp.leftStick.getValue();
          var isUp = this.isControllerButtonPress(gp.dpad.up.getValue()) || ls.y > axisPrecision;
          var isDown = this.isControllerButtonPress(gp.dpad.down.getValue()) || ls.y < -axisPrecision;
          var isEnter = this.isControllerButtonPress(gp.buttonSouth.getValue());
          if (isEnter) {
            if (!this.isCurrentFocusNodeFold()) {
              var _this$getCurrentFoucu4;
              (_this$getCurrentFoucu4 = this.getCurrentFoucusNode().getComponent(ListItem)) == null || _this$getCurrentFoucu4.loadScene();
            }
            return;
          }

          //reached top or bottom
          if (isUp) {
            if (this.isCurrentFocusOnBegin()) {
              return;
            }
          } else {
            if (this.isCurrentFocusOnEnd()) {
              return;
            }
          }
          if (isUp) {
            this.decFocusIndex();
          } else if (isDown) {
            this.addFocusIndex();
          } else {
            return;
          }

          //skip fold
          while (this.isCurrentFocusNodeFold()) {
            if (isUp) {
              this.decFocusIndex();
            } else {
              this.addFocusIndex();
            }
          }

          //hight light
          this.highlightFocusNode();
          var viewHeightCenter = (this.scrollView.view.getComponent(UITransform).height - this.getCurrentFoucusNode().getComponent(UITransform).height) / 2;
          //let viewCenter = this.scrollView.getComponent(UITransform)._contentSize.height / 2;

          this.scrollView.scrollToOffset(new Vec2(0, -this.getCurrentFoucusNode().getPosition().y - viewHeightCenter), 0.4);
        };
        return SceneManager;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class3.prototype, "itemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class3.prototype, "foldPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "scrollView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class3)) || _class2));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/screen-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, screen, macro, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      screen = module.screen;
      macro = module.macro;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "8c3d3xb97VFt4v2ammoXtw1", "screen-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var screen_event = exports('screen_event', (_dec = ccclass('screen_event'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(screen_event, _Component);
        function screen_event() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "labelWindow", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "labelOrientation", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = screen_event.prototype;
        _proto.onStart = function onStart() {
          this.labelOrientation.string = "";
        };
        _proto.onLoad = function onLoad() {
          screen.on('window-resize', this.onWindowResize, this);
          screen.on('orientation-change', this.onOrientationChange, this);
          this.labelWindow.string = "Window width: " + window.innerWidth + ", height: " + window.innerHeight;
        };
        _proto.onDestroy = function onDestroy() {
          screen.off('window-resize', this.onWindowResize, this);
          screen.off('orientation-change', this.onOrientationChange, this);
        };
        _proto.onOrientationChange = function onOrientationChange(orientation) {
          if (orientation === macro.ORIENTATION_PORTRAIT) {
            this.labelOrientation.string = 'Screen orientation: portrait';
          } else if (orientation === macro.ORIENTATION_LANDSCAPE_LEFT) {
            this.labelOrientation.string = 'Screen orientation: landscape left';
          } else if (orientation === macro.ORIENTATION_LANDSCAPE_RIGHT) {
            this.labelOrientation.string = 'Screen orientation: landscape right';
          } else if (orientation === macro.ORIENTATION_LANDSCAPE) {
            this.labelOrientation.string = 'Screen orientation: landscape';
          } else {
            this.labelOrientation.string = 'Screen orientation: portrait upside down';
          }
        };
        _proto.onWindowResize = function onWindowResize(width, height) {
          this.labelWindow.string = "Window width: " + width + ", height: " + height;
        };
        return screen_event;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelWindow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelOrientation", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/screenTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, screen, log, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      screen = module.screen;
      log = module.log;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "86f76DTNzNJ9KDHIfkPV8lE", "screenTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ScreenTest = exports('ScreenTest', (_dec = ccclass('ScreenTest'), _dec2 = property(Node), _dec3 = property(Toggle), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScreenTest, _Component);
        function ScreenTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "nonSupportTop", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "toggleFullscreen", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ScreenTest.prototype;
        _proto.start = function start() {
          if (!screen.supportsFullScreen) {
            this.nonSupportTop.active = true;
            return;
          }
          this.toggleFullscreen.isChecked = screen.fullScreen();
          this.toggleFullscreen.node.on(Toggle.EventType.TOGGLE, this.onToggle, this);

          // if (screen.supportsFullScreen) {
          //     this.toggleFullscreen.isChecked = screen.fullScreen();
          //     this.toggleFullscreen.node.on(Toggle.EventType.TOGGLE, this.onToggle, this);
          // } else {
          //     this.toggleFullscreen.node.active = false;
          // }
        };

        _proto.onToggle = function onToggle(toggle) {
          if (toggle.isChecked) {
            screen.requestFullScreen().then(function () {
              log('on enter fullscreen');
            })["catch"](function (e) {});
          } else {
            screen.exitFullScreen().then(function () {
              log('on exit fullscreen');
            })["catch"](function (e) {});
          }
        };
        _proto.scaleTo_0_1_X = function scaleTo_0_1_X() {
          screen.resolutionScale = 0.1;
        };
        _proto.scaleTo_0_5_X = function scaleTo_0_5_X() {
          screen.resolutionScale = 0.5;
        };
        _proto.scaleTo_1_0_X = function scaleTo_1_0_X() {
          screen.resolutionScale = 1;
        };
        _proto.scaleTo_2_0_X = function scaleTo_2_0_X() {
          screen.resolutionScale = 2;
        };
        return ScreenTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nonSupportTop", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toggleFullscreen", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/scroll-view-bounce-back.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, ScrollView, find, Label, Node, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
      find = module.find;
      Label = module.Label;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "e547924xTdEQ4HoDbeclAO/", "scroll-view-bounce-back", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = ScrollViewBounceBack
       * DateTime = Sat Oct 30 2021 16:20:55 GMT+0800 (中国标准时间)
       * Author = zmzczy
       * FileBasename = scroll-view-bounce-back.ts
       * FileBasenameNoExtension = scroll-view-bounce-back
       * URL = db://assets/cases/ui/06.scrollview/scroll-view-bounce-back.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var ScrollViewBounceBack = exports('ScrollViewBounceBack', (_dec = ccclass('ScrollViewBounceBack'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollViewBounceBack, _Component);
        function ScrollViewBounceBack() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _this.logLabel = null;
          _this.scrollingCounter = 0;
          return _this;
        }
        var _proto = ScrollViewBounceBack.prototype;
        _proto.start = function start() {
          var _find;
          // [3]
          var com = this.node.getComponent(ScrollView);
          this.logLabel = (_find = find('Canvas/LogLabel')) == null ? void 0 : _find.getComponent(Label);
          this.logLabel.string = '拖动以查看log打印次数';
          com == null || com.node.on('scrolling', this.onScrollingCallback, this);
          com == null || com.node.on(Node.EventType.TOUCH_START, this.onTouchStartCallback, this, true);
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto.onScrollingCallback = function onScrollingCallback() {
          console.log('scrolling');
          this.scrollingCounter++;
          this.logLabel.string = "scrolling * " + this.scrollingCounter;
        };
        _proto.onTouchStartCallback = function onTouchStartCallback() {
          this.scrollingCounter = 0;
          this.logLabel.string = '';
        };
        return ScrollViewBounceBack;
      }(Component)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/scroll-view-events.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, ScrollBar, ScrollView, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      ScrollBar = module.ScrollBar;
      ScrollView = module.ScrollView;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "59084rPhUpND6Eu0YGtvknr", "scroll-view-events", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ScrollViewEvents = exports('ScrollViewEvents', (_dec = ccclass("ScrollViewEvents"), _dec2 = property(Label), _dec3 = property({
        type: ScrollBar.Direction
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollViewEvents, _Component);
        function ScrollViewEvents() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "eventLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "direction", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ScrollViewEvents.prototype;
        _proto.start = function start() {
          if (this.direction === ScrollBar.Direction.VERTICAL) {
            this.node.on(ScrollView.EventType.SCROLL_TO_BOTTOM, this.eventScrollToBottom, this);
            this.node.on(ScrollView.EventType.SCROLL_TO_TOP, this.eventScrollToTop, this);
            this.node.on(ScrollView.EventType.BOUNCE_BOTTOM, this.bounceBottom, this);
            this.node.on(ScrollView.EventType.BOUNCE_TOP, this.bounceTop, this);
          } else {
            this.node.on(ScrollView.EventType.SCROLL_TO_LEFT, this.eventScrollToLeft, this);
            this.node.on(ScrollView.EventType.SCROLL_TO_RIGHT, this.eventScrollToRight, this);
            this.node.on(ScrollView.EventType.BOUNCE_LEFT, this.bounceLeft, this);
            this.node.on(ScrollView.EventType.BOUNCE_RIGHT, this.bounceRight, this);
          }
        };
        _proto.eventScrollToLeft = function eventScrollToLeft(scroll) {
          this.eventLabel.string = 'ScrollToLeft';
        };
        _proto.eventScrollToBottom = function eventScrollToBottom(scroll) {
          this.eventLabel.string = 'ScrollToBottom';
        };
        _proto.eventScrollToRight = function eventScrollToRight(scroll) {
          this.eventLabel.string = 'ScrollToRight';
        };
        _proto.eventScrollToTop = function eventScrollToTop(scroll) {
          this.eventLabel.string = 'ScrollToTop';
        };
        _proto.bounceLeft = function bounceLeft(scroll) {
          this.eventLabel.string = 'BounceLeft';
        };
        _proto.bounceBottom = function bounceBottom(scroll) {
          this.eventLabel.string = 'BounceBottom';
        };
        _proto.bounceRight = function bounceRight(scroll) {
          this.eventLabel.string = 'BounceRight';
        };
        _proto.bounceTop = function bounceTop(scroll) {
          this.eventLabel.string = 'BounceTop';
        };
        return ScrollViewEvents;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "direction", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ScrollBar.Direction.HORIZONTAL;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/scroll-view-scroll-to-offset.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, find, ScrollView, Label, Button, Vec2, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      find = module.find;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Button = module.Button;
      Vec2 = module.Vec2;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "a5bb1gNI1JAyYQr2ILoXIrJ", "scroll-view-scroll-to-offset", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = ScrollViewScrollToOffset
       * DateTime = Sat Oct 30 2021 16:33:29 GMT+0800 (中国标准时间)
       * Author = zmzczy
       * FileBasename = scroll-view-scroll-to-offset.ts
       * FileBasenameNoExtension = scroll-view-scroll-to-offset
       * URL = db://assets/cases/ui/06.scrollview/scroll-view-scroll-to-offset.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var ScrollViewScrollToOffset = exports('ScrollViewScrollToOffset', (_dec = ccclass('ScrollViewScrollToOffset'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollViewScrollToOffset, _Component);
        function ScrollViewScrollToOffset() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _this.scroll = null;
          _this.offsetLabel = null;
          _this.curOffsetLabel = null;
          _this.randomButton = null;
          return _this;
        }
        var _proto = ScrollViewScrollToOffset.prototype;
        _proto.start = function start() {
          var _find,
            _find2,
            _find3,
            _find4,
            _this2 = this;
          // [3]
          this.scroll = (_find = find('Canvas/ScrollView')) == null ? void 0 : _find.getComponent(ScrollView);
          this.offsetLabel = (_find2 = find('Canvas/Label')) == null ? void 0 : _find2.getComponent(Label);
          this.curOffsetLabel = (_find3 = find('Canvas/curOffsetLabel')) == null ? void 0 : _find3.getComponent(Label);
          this.randomButton = (_find4 = find('Canvas/Button')) == null ? void 0 : _find4.getComponent(Button);
          this.randomButton.node.on('click', this.randomScrollOffset, this);
          this.scroll.node.on('scrolling', function () {
            var curScrollOffset = _this2.scroll.getScrollOffset();
            _this2.showCurOffsetLog(curScrollOffset);
          }, this);
          var curScrollOffset = this.scroll.getScrollOffset();
          this.showCurOffsetLog(curScrollOffset);
          this.offsetLabel.string = '点击随机滚动查看偏移数据';
        };
        _proto.randomScrollOffset = function randomScrollOffset() {
          var offsetAnchor = Math.random();
          var maxOffsetVec = this.scroll.getMaxScrollOffset();
          var thisOffsetVec = new Vec2(offsetAnchor * maxOffsetVec.x, offsetAnchor * maxOffsetVec.y);
          this.scroll.scrollToOffset(thisOffsetVec);
          var afterScrollOffset = this.scroll.getScrollOffset();
          this.showRandomOffsetLog(thisOffsetVec, afterScrollOffset);
          this.showCurOffsetLog(afterScrollOffset);
        };
        _proto.showCurOffsetLog = function showCurOffsetLog(offset) {
          var curOffsetLog = "\u5F53\u524DOffset = " + offset;
          this.curOffsetLabel.string = curOffsetLog;
        };
        _proto.showRandomOffsetLog = function showRandomOffsetLog(paramOffset, afterOffset) {
          var offsetLog = "ScrollToOffset\uFF0C\u53C2\u6570Offset = " + paramOffset + "\nGetScrollOffset\uFF0C\u7ED3\u679COffset = " + afterOffset;
          this.offsetLabel.string = offsetLog;
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        return ScrollViewScrollToOffset;
      }(Component)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/setMipRange-cube.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ImageAsset, Material, TextureCube, macro, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ImageAsset = module.ImageAsset;
      Material = module.Material;
      TextureCube = module.TextureCube;
      macro = module.macro;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "be664cmXzpJv6ziQUDtJ43E", "setMipRange-cube", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = NewComponent
       * DateTime = Wed Nov 03 2021 17:08:13 GMT+0800 (中国标准时间)
       * Author = undefined
       * FileBasename = NewComponent.ts
       * FileBasenameNoExtension = NewComponent
       * URL = db://assets/cases/terrain/NewComponent.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var setMipRange_cubemap = exports('setMipRange_cubemap', (_dec = ccclass('setMipRange_cubemap'), _dec2 = property(ImageAsset), _dec3 = property(Material), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(setMipRange_cubemap, _Component);
        function setMipRange_cubemap() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "mipmaps", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "cubeMat", _descriptor2, _assertThisInitialized(_this));
          _this.cubeTexture = null;
          _this.ready = false;
          return _this;
        }
        var _proto = setMipRange_cubemap.prototype;
        _proto.start = function start() {
          var _this2 = this;
          var mipCount = this.mipmaps.length;
          this.cubeTexture = new TextureCube();
          var images = [];
          for (var i = 0; i < mipCount; i++) {
            images.push({
              front: this.mipmaps[i],
              back: this.mipmaps[i],
              left: this.mipmaps[i],
              right: this.mipmaps[i],
              top: this.mipmaps[i],
              bottom: this.mipmaps[i]
            });
          }
          this.cubeTexture.mipmaps = images;
          this.cubeTexture.setMipFilter(2);
          this.cubeTexture.setMipRange(0, mipCount);
          this.cubeMat.setProperty('cubeMap', this.cubeTexture);
          this.schedule(function () {
            _this2.cubeTexture.setMipRange(0, mipCount);
            _this2.cubeMat.setProperty('cubeMap', _this2.cubeTexture);
          }, 6, macro.REPEAT_FOREVER, 0);
          this.schedule(function () {
            _this2.cubeTexture.setMipRange(1, mipCount);
            _this2.cubeMat.setProperty('cubeMap', _this2.cubeTexture);
          }, 6, macro.REPEAT_FOREVER, 3);
          this.ready = true;
        };
        return setMipRange_cubemap;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mipmaps", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cubeMat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/setMipRange-quad.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ImageAsset, Material, Texture2D, macro, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ImageAsset = module.ImageAsset;
      Material = module.Material;
      Texture2D = module.Texture2D;
      macro = module.macro;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "09182R98blBDqUzvitPb91P", "setMipRange-quad", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var setMipRange_quad = exports('setMipRange_quad', (_dec = ccclass('setMipRange_quad'), _dec2 = property({
        type: ImageAsset
      }), _dec3 = property({
        type: Material
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(setMipRange_quad, _Component);
        function setMipRange_quad() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "mipMaps", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mat", _descriptor2, _assertThisInitialized(_this));
          _this.textureUsed = null;
          _this.ready = false;
          return _this;
        }
        var _proto = setMipRange_quad.prototype;
        _proto.start = function start() {
          var _this2 = this;
          this.textureUsed = new Texture2D();
          this.textureUsed.mipmaps = this.mipMaps;
          this.textureUsed.setMipFilter(2);
          this.textureUsed.setMipRange(0, this.mipMaps.length);
          this.mat.setProperty('albedoMap', this.textureUsed);
          this.schedule(function () {
            _this2.textureUsed.setMipRange(0, _this2.mipMaps.length);
            _this2.mat.setProperty('albedoMap', _this2.textureUsed);
          }, 6, macro.REPEAT_FOREVER, 0);
          this.schedule(function () {
            _this2.textureUsed.setMipRange(1, _this2.mipMaps.length);
            _this2.mat.setProperty('albedoMap', _this2.textureUsed);
          }, 6, macro.REPEAT_FOREVER, 3);
          this.ready = true;
        };
        return setMipRange_quad;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mipMaps", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/setPriority.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ModelRenderer, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ModelRenderer = module.ModelRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "18808RAM+pL7bKJRE7gl87S", "setPriority", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var setPriority = exports('setPriority', (_dec = ccclass('setPriority'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(setPriority, _Component);
        function setPriority() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "priority", _descriptor, _assertThisInitialized(_this));
          _this.model = null;
          return _this;
        }
        var _proto = setPriority.prototype;
        _proto.start = function start() {
          this.model = this.node.getComponent(ModelRenderer);
          this.model.priority = this.priority;
        };
        return setPriority;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "priority", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/shield-node.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, TiledLayer, Prefab, v2, Vec3, Node, Component, instantiate;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      TiledLayer = module.TiledLayer;
      Prefab = module.Prefab;
      v2 = module.v2;
      Vec3 = module.Vec3;
      Node = module.Node;
      Component = module.Component;
      instantiate = module.instantiate;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "39257srVZlHmqGvdeIRPFlt", "shield-node", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ShieldNode = exports('ShieldNode', (_dec = ccclass('ShieldNode'), _dec2 = property({
        type: TiledLayer
      }), _dec3 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShieldNode, _Component);
        function ShieldNode() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tiledLayer", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "nodePrefab", _descriptor2, _assertThisInitialized(_this));
          _this.shieldNodeMap = new Map();
          return _this;
        }
        var _proto = ShieldNode.prototype;
        _proto.start = function start() {
          this.initScene(this.nodePrefab);
        };
        _proto.initScene = function initScene(prefab) {
          var _this2 = this;
          var posArr = [v2(-249, 96), v2(-150, 76), v2(-60, 54), v2(-248, -144), v2(-89, -34)];
          var tmpP = new Vec3();
          var _loop = function _loop() {
            var shieldNode = instantiate(prefab);
            shieldNode.setPosition(posArr[i].x, posArr[i].y);
            _this2.tiledLayer.addUserNode(shieldNode);
            _this2.shieldNodeMap.set(i, shieldNode);
            shieldNode.on(Node.EventType.TOUCH_MOVE, function (event) {
              var deltaMove = event.getUIDelta();
              shieldNode.getPosition(tmpP);
              tmpP.x += deltaMove.x;
              tmpP.y += deltaMove.y;
              shieldNode.setPosition(tmpP);
            });
          };
          for (var i = 0; i < posArr.length; i++) {
            _loop();
          }
        };
        _proto.setShieldNodePosition = function setShieldNodePosition(index, vec) {
          var node = this.shieldNodeMap.get(index);
          node.setPosition(vec);
        };
        _proto.onDestroy = function onDestroy() {
          this.shieldNodeMap.forEach(function (shieldNode) {
            if (shieldNode && shieldNode.isValid) {
              shieldNode.off(Node.EventType.TOUCH_MOVE);
            }
          });
          this.shieldNodeMap.clear();
        };
        return ShieldNode;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tiledLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodePrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/show-hide-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, game, Game, instantiate, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      game = module.game;
      Game = module.Game;
      instantiate = module.instantiate;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "608b97wsvpKdZEREVfnWtiV", "show-hide-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ShowHideEvent = exports('ShowHideEvent', (_dec = ccclass('ShowHideEvent'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShowHideEvent, _Component);
        function ShowHideEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "contentView", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "timeLabelPrefab", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ShowHideEvent.prototype;
        _proto.onLoad = function onLoad() {
          game.on(Game.EVENT_HIDE, this.onHide, this);
          game.on(Game.EVENT_SHOW, this.onShow, this);
        };
        _proto.onDestroy = function onDestroy() {
          game.off(Game.EVENT_HIDE, this.onHide, this);
          game.off(Game.EVENT_SHOW, this.onShow, this);
        };
        _proto.onHide = function onHide() {
          var timeLabelNode = instantiate(this.timeLabelPrefab);
          var label = timeLabelNode.getComponent(Label);
          label.string = this.getTime() + " hide event";
          this.contentView.addChild(timeLabelNode);
        };
        _proto.onShow = function onShow() {
          var timeLabelNode = instantiate(this.timeLabelPrefab);
          var label = timeLabelNode.getComponent(Label);
          label.string = this.getTime() + " show event";
          this.contentView.addChild(timeLabelNode);
        };
        _proto.getTime = function getTime() {
          var date = new Date();
          return date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        return ShowHideEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "contentView", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "timeLabelPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShowTips.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "c161aJHiblOroMdOeGczlfU", "ShowTips", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ShowTips = exports('ShowTips', (_dec = ccclass("ShowTips"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShowTips, _Component);
        function ShowTips() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tips = null;
          _this.ifShow = true;
          return _this;
        }
        var _proto = ShowTips.prototype;
        _proto.showTip = function showTip() {
          if (this.ifShow == false) {
            this.tips.setPosition(0, 1000, 0);
          }
          if (this.ifShow) {
            this.tips.setPosition(0, 0, 0);
          }
          this.ifShow = !this.ifShow;
        };
        _proto.start = function start() {
          // Your initialization goes here.
          this.tips = this.node.getChildByName('tips');
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return ShowTips;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/single-compress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, Label, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "6e288hf6LJGkJGvzRV7IDdK", "single-compress", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SingleCompress = exports('SingleCompress', (_dec = ccclass('SingleCompress'), _dec2 = property({
        type: [Node]
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SingleCompress, _Component);
        function SingleCompress() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "sprites", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SingleCompress.prototype;
        _proto.start = function start() {
          this.sprites.forEach(function (spriteRoot) {
            var sprite = spriteRoot.children[0];
            var texture = sprite.getComponent(Sprite).spriteFrame.texture;
            var name = sprite.name;
            var label = spriteRoot.children[1].getComponent(Label);
            if (texture.isCompressed) {
              label.color = new Color(255, 176, 36);
              // @ts-ignore
            } else if (texture._mipmaps[0]._native === "." + name) {
              label.color = new Color(84, 103, 241);
            }
          });
        };
        return SingleCompress;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprites", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkewTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "62df8Ga7x1KXLHF6z6hUlfa", "SkewTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SkewTest = exports('SkewTest', (_dec = ccclass('SkewTest'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkewTest, _Component);
        function SkewTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._childBlock = null;
          _this._parentBlock = null;
          _this._rootBlock = null;
          return _this;
        }
        var _proto = SkewTest.prototype;
        _proto.start = function start() {
          this._rootBlock = this.node.getChildByPath('root');
          this._parentBlock = this.node.getChildByPath('root/parent');
          this._childBlock = this.node.getChildByPath('root/parent/child');
          var btnOnRoot = this.node.getChildByName('btn-on-root');
          btnOnRoot.setWorldPosition(this._rootBlock.worldPosition);
          btnOnRoot.setScale(this._rootBlock.scale);
          var btnOnParent = this.node.getChildByName('btn-on-parent');
          btnOnParent.setWorldPosition(this._parentBlock.worldPosition);
          btnOnParent.setScale(this._parentBlock.scale);
          var btnOnChild = this.node.getChildByName('btn-on-child');
          btnOnChild.setWorldPosition(this._childBlock.worldPosition);
          btnOnChild.setScale(this._childBlock.scale);
        };
        return SkewTest;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/slider-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Color, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "0dc81FpNV1Gu7PzuHGs1FyN", "slider-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        menu = _decorator.menu;
      var SliderCtrl = exports('SliderCtrl', (_dec = ccclass("SliderCtrl"), _dec2 = menu('UI/SliderCtrl'), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SliderCtrl, _Component);
        function SliderCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._color = new Color();
          return _this;
        }
        var _proto = SliderCtrl.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.changeAlpha = function changeAlpha(slider) {
          var spriteComp = this.getComponent(Sprite);
          this._color.set(spriteComp.color);
          this._color.a = slider.progress * 255;
          spriteComp.color = this._color;
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return SliderCtrl;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sphere_light.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "a2018D8J3dIiYOJf8RTv9VA", "sphere_light", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var typescript = exports('typescript', (_dec = ccclass('typescript'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(typescript, _Component);
        function typescript() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._nowP = new Vec3(0.0, 0.0, 0.0);
          _this._startP = 0.0;
          _this._low = 2.0;
          _this._height = 3.51;
          _this._time = 0;
          return _this;
        }
        var _proto = typescript.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this._nowP = this.node.position.clone();
          this._startP = Math.asin((this._nowP.y - this._low) / (this._height - this._low));
        };
        _proto.update = function update(deltaTime) {
          this._time += 0.01;
          this._nowP.y = (Math.sin(this._time - this._startP) + 1.0) * 2.0 * (this._height - this._low) + this._low;
          this.node.setPosition(this._nowP);
        };
        return typescript;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineApiTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, resources, Texture2D, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      resources = module.resources;
      Texture2D = module.Texture2D;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "f4fb8ozDSJPlLUGlA2VYjmq", "SpineApiTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineApiTest = exports('SpineApiTest', (_dec = ccclass('SpineApiTest'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineApiTest, _Component);
        function SpineApiTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeleton", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SpineApiTest.prototype;
        _proto.start = function start() {
          this._testApi();
        };
        _proto.update = function update(deltaTime) {};
        _proto._testApi = function _testApi() {
          this._testSkeletonData();
          this._testSlotData();
          this._testSlot();
          this._testSkin();
        };
        _proto._testSkeletonData = function _testSkeletonData() {
          var _this$skeleton, _this$skeleton2;
          console.log('start skeleton data.');
          var data = (_this$skeleton = this.skeleton) == null || (_this$skeleton = _this$skeleton.skeletonData) == null ? void 0 : _this$skeleton.getRuntimeData();
          var bones = data == null ? void 0 : data.bones;
          console.log('bone_0:', bones[0]);
          console.log('name:', data == null ? void 0 : data.name);
          console.log('bones:', data == null ? void 0 : data.bones);
          console.log('slots:', data == null ? void 0 : data.slots);
          console.log('skins:', data == null ? void 0 : data.skins);
          console.log('defaultSkin:', data == null ? void 0 : data.defaultSkin);
          console.log('events:', data == null ? void 0 : data.events);
          console.log('animations:', data == null ? void 0 : data.animations);
          console.log('ikConstraints:', data == null ? void 0 : data.ikConstraints);
          console.log('transformConstraints:', data == null ? void 0 : data.transformConstraints);
          console.log('pathConstraints:', data == null ? void 0 : data.pathConstraints);
          console.log('x:', data == null ? void 0 : data.x);
          console.log('y:', data == null ? void 0 : data.y);
          console.log('width:', data == null ? void 0 : data.width);
          console.log('height:', data == null ? void 0 : data.height);
          console.log('version:', data == null ? void 0 : data.version);
          console.log('hash:', data == null ? void 0 : data.hash);
          console.log('fps:', data == null ? void 0 : data.fps);
          console.log('imagesPath:', data == null ? void 0 : data.imagesPath);
          console.log('audioPath:', data == null ? void 0 : data.audioPath);
          console.log('findBone:', data == null ? void 0 : data.findBone('neck'));
          if (sp.SPINE_VERSION !== '4.2') {
            console.log('findBoneIndex:', data == null ? void 0 : data.findBoneIndex('neck'));
          }
          console.log('findSlot:', data == null ? void 0 : data.findSlot('back-hand'));
          console.log('findAnimation:', data == null ? void 0 : data.findAnimation('walk'));
          console.log('findEvent:', data == null ? void 0 : data.findEvent('none'));
          console.log('findIkConstraint', data == null ? void 0 : data.findIkConstraint('back-leg-ik'));
          var slot = (_this$skeleton2 = this.skeleton) == null ? void 0 : _this$skeleton2.findSlot('back-hand');
          console.log('slot->getAttachment:', slot == null ? void 0 : slot.getAttachment());
          console.log('end skeleton data.');
        };
        _proto._testSlot = function _testSlot() {
          var _this$skeleton3;
          console.log('start test Slot.');
          var slot = (_this$skeleton3 = this.skeleton) == null ? void 0 : _this$skeleton3.findSlot('back-hand');
          if (sp.SPINE_VERSION !== '4.2') {
            console.log('slot?.getAttachmentTime:', slot == null ? void 0 : slot.getAttachmentTime());
          }
          console.log('slot?.getSkeleton:', slot == null ? void 0 : slot.getSkeleton());
          console.log('slot?.getAttachment:', slot == null ? void 0 : slot.getAttachment());
          console.log('slot?.setAttachment:', slot == null ? void 0 : slot.setAttachment);
          console.log('slot?.setAttachmentTime:', slot == null ? void 0 : slot.setAttachmentTime);
          console.log('slot?.setToSetupPose:', slot == null ? void 0 : slot.setToSetupPose);
          console.log('slot?.data:', slot == null ? void 0 : slot.data);
          console.log('slot?.color:', slot == null ? void 0 : slot.color);
          console.log('slot?.darkColor:', slot == null ? void 0 : slot.darkColor);
          console.log('slot?.attachment:', slot == null ? void 0 : slot.attachment);
          console.log('slot?.attachmentState:', slot == null ? void 0 : slot.attachmentState);
          console.log('slot?.deform:', slot == null ? void 0 : slot.deform);
          console.log('end test Slot.');
        };
        _proto._testSlotData = function _testSlotData() {
          var _this$skeleton4;
          console.log('start test SlotData.');
          var slot = (_this$skeleton4 = this.skeleton) == null ? void 0 : _this$skeleton4.findSlot('back-hand');
          var slotData = slot == null ? void 0 : slot.data;
          console.log('slotData?.index:', slotData == null ? void 0 : slotData.index);
          console.log('slotData?.name:', slotData == null ? void 0 : slotData.name);
          console.log('slotData?.boneData:', slotData == null ? void 0 : slotData.boneData);
          console.log('slotData?.color:', slotData == null ? void 0 : slotData.color);
          console.log('slotData?.darkColor:', slotData == null ? void 0 : slotData.darkColor);
          console.log('slotData?.attachmentName:', slotData == null ? void 0 : slotData.attachmentName);
          console.log('slotData?.blendMode:', slotData == null ? void 0 : slotData.blendMode);
          console.log('slot?.attachmentState:', slot == null ? void 0 : slot.attachmentState);
          console.log('slot?.deform:', slot == null ? void 0 : slot.deform);
          console.log('end test SlotData.');
        };
        _proto._testSkeleton = function _testSkeleton() {
          var skeleton = this.skeleton;
          skeleton.addAnimation(1, 'jump', false);
          skeleton.setAnimation(0, 'gun-grab', true);
          resources.load("test_assets/image/texture", Texture2D, function (err, texture) {
            if (err) {
              console.error("\u8DEF\u5F84\u4E3A test_assets/image/texture \u8D44\u6E90\u4E0D\u5B58\u5728");
              return;
            }
            skeleton.setSlotTexture("gun", texture, true);
          });
        };
        _proto._testSkin = function _testSkin() {
          var _this$skeleton5;
          console.log('start test Skin.');
          var data = (_this$skeleton5 = this.skeleton) == null || (_this$skeleton5 = _this$skeleton5.skeletonData) == null ? void 0 : _this$skeleton5.getRuntimeData();
          var skin = data == null ? void 0 : data.defaultSkin;
          var skins = data == null ? void 0 : data.skins;
          console.log('skin:', skin);
          console.log('skin?.name:', skin == null ? void 0 : skin.name);
          console.log('skin?.attachments:', skin == null ? void 0 : skin.attachments);
          console.log('skin?.bones:', skin == null ? void 0 : skin.bones);
          console.log('skin?.constraints:', skin == null ? void 0 : skin.constraints);
          console.log('skin?.setAttachment:', skin == null ? void 0 : skin.setAttachment);
          console.log('skin?.addSkin:', skin == null ? void 0 : skin.addSkin);
          console.log('skin?.copySkin:', skin == null ? void 0 : skin.copySkin);
          console.log('skin?.findNamesForSlot:', skin == null ? void 0 : skin.findNamesForSlot);
          console.log('skin?.getBones:', skin == null ? void 0 : skin.getBones);
          console.log('skin?.getConstraints:', skin == null ? void 0 : skin.getConstraints);
          console.log('skin?.getAttachment:', skin == null ? void 0 : skin.getAttachment);
          console.log('skin?.removeAttachment:', skin == null ? void 0 : skin.removeAttachment);
          console.log('skin?.getAttachments:', skin == null ? void 0 : skin.getAttachments);
          console.log('skin?.getAttachmentsForSlot:', skin == null ? void 0 : skin.getAttachmentsForSlot);
          var skinEntries = skin == null ? void 0 : skin.getAttachments();
          var skinEntry = skinEntries ? skinEntries[0] : null;
          if (skinEntry !== null) {
            console.log('SkinEntry?.slotIndex:', skinEntry.slotIndex);
            console.log('SkinEntry?.name:', skinEntry.name);
            console.log('SkinEntry?.slotIndex:', skinEntry.attachment);
          }
          console.log('end test Slot.');
        };
        _proto.onRealTimeMode = function onRealTimeMode() {
          this.skeleton.setAnimationCacheMode(sp.AnimationCacheMode.REALTIME);
          this._testSkeleton();
        };
        _proto.onCacheMode = function onCacheMode() {
          this.skeleton.setAnimationCacheMode(sp.AnimationCacheMode.PRIVATE_CACHE);
          this._testSkeleton();
        };
        return SpineApiTest;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineAttach.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Node, Label, Button, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class2, _class3, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "1f4fb/2fX9O26fHciliNUu8", "SpineAttach", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var _class = exports('default', (_dec = ccclass('SpineAttach'), _dec2 = property({
        type: sp.Skeleton
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Label
      }), _dec5 = property({
        type: Button
      }), _dec(_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(_class3, _Component);
        function _class3() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeleton", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "attachNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "modeLabel", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "attachBtn", _descriptor4, _assertThisInitialized(_this));
          _this.backSockets = null;
          return _this;
        }
        var _proto = _class3.prototype;
        _proto.onLoad = function onLoad() {
          var socket = new sp.SpineSocket("root/hip/tail1/tail2/tail3/tail4/tail5/tail6/tail7/tail8/tail9/tail10", this.attachNode);
          this.skeleton.sockets.push(socket);
          this.skeleton.sockets = this.skeleton.sockets;
        };
        _proto.changeAttach = function changeAttach() {
          if (!this.backSockets) {
            this.backSockets = this.skeleton.sockets;
            this.skeleton.sockets = [];
          } else {
            this.skeleton.sockets = this.backSockets;
            this.backSockets = null;
          }
        };
        _proto.changeMode = function changeMode() {
          var isCached = this.skeleton.isAnimationCached();
          if (isCached) {
            this.skeleton.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
            this.modeLabel.string = "realtime";
            this.attachBtn.interactable = true;
          } else {
            this.skeleton.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.SHARED_CACHE);
            this.modeLabel.string = "cache";
            this.attachBtn.interactable = false;
          }
        };
        return _class3;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class3.prototype, "skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class3.prototype, "attachNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "modeLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, "attachBtn", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class3)) || _class2));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineAttachment.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "b58aeW4wOJMGaX+5fSZydRh", "SpineAttachment", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineAttachment = exports('SpineAttachment', (_dec = ccclass('SpineAttachment'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineAttachment, _Component);
        function SpineAttachment() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeletonComponent", _descriptor, _assertThisInitialized(_this));
          _this._oldAttachment = null;
          _this._newAttachment = null;
          _this._slot = null;
          _this._index = 0;
          return _this;
        }
        var _proto = SpineAttachment.prototype;
        _proto.start = function start() {
          var asset = this.skeletonComponent.skeletonData;
          var spineData = asset == null ? void 0 : asset.getRuntimeData();
          if (!spineData) return;
          var skin = spineData.findSkin('default');
          var gunSlotIndex = -1;
          if (sp.SPINE_VERSION === '4.2') {
            var slotData = spineData.findSlot('gun');
            if (slotData) {
              gunSlotIndex = slotData.index;
            }
          } else {
            gunSlotIndex = spineData.findSlotIndex('gun');
          }
          this._newAttachment = skin.getAttachment(gunSlotIndex, 'gun-nohand');
          var handSlot = this.skeletonComponent.findSlot('front-hand');
          if (handSlot) {
            this._oldAttachment = handSlot.getAttachment();
            // handSlot.setAttachment(gunAttachment);
            this._slot = handSlot;
          }
        };
        _proto.update = function update(deltaTime) {};
        _proto.onChange = function onChange() {
          if (!this._slot) return;
          this._index += 1;
          if (this._index % 2 === 1) {
            this._slot.setAttachment(this._newAttachment);
          } else {
            this._slot.setAttachment(this._oldAttachment);
          }
        };
        return SpineAttachment;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "skeletonComponent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineBoyCtrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "63fd6NWWQxCt6fDTJtglY8d", "SpineBoyCtrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineBoyCtrl = exports('default', (_dec = ccclass('SpineBoyCtrl'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineBoyCtrl, _Component);
        function SpineBoyCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.mixTime = 0.2;
          _this.spine = void 0;
          _this._hasStop = true;
          return _this;
        }
        var _proto = SpineBoyCtrl.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          var spine = this.spine = this.getComponent('sp.Skeleton');
          this._setMix('walk', 'run');
          this._setMix('run', 'jump');
          this._setMix('walk', 'jump');
          spine.setStartListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            console.log("[track %s][animation %s] start.", trackEntry.trackIndex, animationName);
          });
          spine.setInterruptListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            console.log("[track %s][animation %s] interrupt.", trackEntry.trackIndex, animationName);
          });
          spine.setEndListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            console.log("[track %s][animation %s] end.", trackEntry.trackIndex, animationName);
          });
          spine.setDisposeListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            console.log("[track %s][animation %s] will be disposed.", trackEntry.trackIndex, animationName);
          });
          spine.setCompleteListener(function (trackEntry) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            if (animationName === 'shoot') {
              _this2.spine.clearTrack(1);
            }
            var loopCount = Math.floor(trackEntry.trackTime / trackEntry.animationEnd);
            console.log("[track %s][animation %s] complete: %s", trackEntry.trackIndex, animationName, loopCount);
          });
          spine.setEventListener(function (trackEntry, event) {
            var animationName = trackEntry.animation ? trackEntry.animation.name : "";
            console.log("[track %s][animation %s] event: %s, %s, %s, %s", trackEntry.trackIndex, animationName, event.data.name, event.intValue, event.floatValue, event.stringValue);
          });
          this._hasStop = false;
        }

        // OPTIONS
        ;

        _proto.toggleDebugSlots = function toggleDebugSlots() {
          var _this$spine;
          this.spine.debugSlots = !((_this$spine = this.spine) != null && _this$spine.debugSlots);
        };
        _proto.toggleDebugBones = function toggleDebugBones() {
          var _this$spine2;
          this.spine.debugBones = !((_this$spine2 = this.spine) != null && _this$spine2.debugBones);
        };
        _proto.toggleDebugMesh = function toggleDebugMesh() {
          var _this$spine3;
          this.spine.debugMesh = !((_this$spine3 = this.spine) != null && _this$spine3.debugMesh);
        };
        _proto.toggleUseTint = function toggleUseTint() {
          var _this$spine4;
          this.spine.useTint = !((_this$spine4 = this.spine) != null && _this$spine4.useTint);
        };
        _proto.toggleTimeScale = function toggleTimeScale() {
          if (this.spine.timeScale === 1.0) {
            this.spine.timeScale = 0.3;
          } else {
            this.spine.timeScale = 1.0;
          }
        }

        // ANIMATIONS
        ;

        _proto.stop = function stop() {
          var _this$spine5;
          (_this$spine5 = this.spine) == null || _this$spine5.clearTrack(0);
          this._hasStop = true;
        };
        _proto.walk = function walk() {
          var _this$spine7;
          if (this._hasStop) {
            var _this$spine6;
            (_this$spine6 = this.spine) == null || _this$spine6.setToSetupPose();
          }
          (_this$spine7 = this.spine) == null || _this$spine7.setAnimation(0, 'walk', true);
          this._hasStop = false;
        };
        _proto.run = function run() {
          var _this$spine9;
          if (this._hasStop) {
            var _this$spine8;
            (_this$spine8 = this.spine) == null || _this$spine8.setToSetupPose();
          }
          (_this$spine9 = this.spine) == null || _this$spine9.setAnimation(0, 'run', true);
          this._hasStop = false;
        };
        _proto.jump = function jump() {
          var _this$spine11;
          if (this._hasStop) {
            var _this$spine10;
            (_this$spine10 = this.spine) == null || _this$spine10.setToSetupPose();
          }
          (_this$spine11 = this.spine) == null || _this$spine11.setAnimation(0, 'jump', true);
          this._hasStop = false;
        };
        _proto.shoot = function shoot() {
          var _this$spine12;
          (_this$spine12 = this.spine) == null || _this$spine12.setAnimation(1, 'shoot', false);
        };
        _proto.idle = function idle() {
          var _this$spine13, _this$spine14;
          (_this$spine13 = this.spine) == null || _this$spine13.setToSetupPose();
          (_this$spine14 = this.spine) == null || _this$spine14.setAnimation(0, 'idle', true);
        };
        _proto.portal = function portal() {
          var _this$spine15, _this$spine16;
          (_this$spine15 = this.spine) == null || _this$spine15.setToSetupPose();
          (_this$spine16 = this.spine) == null || _this$spine16.setAnimation(0, 'portal', false);
        }

        //
        ;

        _proto._setMix = function _setMix(anim1, anim2) {
          var _this$spine17, _this$spine18;
          (_this$spine17 = this.spine) == null || _this$spine17.setMix(anim1, anim2, this.mixTime);
          (_this$spine18 = this.spine) == null || _this$spine18.setMix(anim2, anim1, this.mixTime);
        };
        return SpineBoyCtrl;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineCollider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, PhysicsSystem2D, Contact2DType, EPhysics2DDrawFlags, Sprite, Color, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      PhysicsSystem2D = module.PhysicsSystem2D;
      Contact2DType = module.Contact2DType;
      EPhysics2DDrawFlags = module.EPhysics2DDrawFlags;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "dc74fi10upIPZ9ydQe0eazG", "SpineCollider", undefined);
      var ccclass = _decorator.ccclass;
      var SpineCollider = exports('SpineCollider', (_dec = ccclass('SpineCollider'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineCollider, _Component);
        function SpineCollider() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.touchingCountMap = new Map();
          _this.debugDrawFlags = 0;
          return _this;
        }
        var _proto = SpineCollider.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          PhysicsSystem2D.instance.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);
          PhysicsSystem2D.instance.on(Contact2DType.END_CONTACT, this.onEndContact, this);
          this.debugDrawFlags = PhysicsSystem2D.instance.debugDrawFlags;
        };
        _proto.onEnable = function onEnable() {
          PhysicsSystem2D.instance.debugDrawFlags = this.debugDrawFlags | EPhysics2DDrawFlags.Shape;
        };
        _proto.onDisable = function onDisable() {
          PhysicsSystem2D.instance.debugDrawFlags = this.debugDrawFlags;
        };
        _proto.addContact = function addContact(c) {
          var count = this.touchingCountMap.get(c.node) || 0;
          this.touchingCountMap.set(c.node, ++count);
          var sprite = c.getComponent(Sprite);
          if (sprite) {
            sprite.color = Color.RED;
          }
        };
        _proto.removeContact = function removeContact(c) {
          var count = this.touchingCountMap.get(c.node) || 0;
          --count;
          if (count <= 0) {
            this.touchingCountMap["delete"](c.node);
            var sprite = c.getComponent(Sprite);
            if (sprite) {
              sprite.color = Color.WHITE;
            }
          } else {
            this.touchingCountMap.set(c.node, count);
          }
        };
        _proto.onBeginContact = function onBeginContact(a, b) {
          this.addContact(a);
          this.addContact(b);
        };
        _proto.onEndContact = function onEndContact(a, b) {
          this.removeContact(a);
          this.removeContact(b);
        };
        return SpineCollider;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineMeshEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Size, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Size = module.Size;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class2, _class3, _descriptor;
      cclegacy._RF.push({}, "57b56AV9fFA5brJJCNWOURt", "SpineMeshEffect", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var _class = exports('default', (_dec = ccclass('SpineMeshEffect'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(_class3, _Component);
        function _class3() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeleton", _descriptor, _assertThisInitialized(_this));
          _this._swirlTime = 0;
          _this._maxEffect = 0;
          _this._index = 0;
          _this._bound = void 0;
          _this._swirlEffect = void 0;
          _this._jitterEffect = void 0;
          return _this;
        }
        var _proto = _class3.prototype;
        _proto.start = function start() {
          this._swirlTime = 0;
          this._maxEffect = 2;
          this._index = 0;
          var skeletonNodeUIProps = this.skeleton.node._uiProps.uiTransformComp;
          this._bound = new Size(skeletonNodeUIProps.width, skeletonNodeUIProps.height);
          if (sp.SPINE_VERSION === '3.8') {
            this._swirlEffect = new sp.VertexEffectDelegate();
            this._swirlEffect.initSwirlWithPowOut(0, 2);
          }
        };
        _proto.switchEffect = function switchEffect() {
          this._index++;
          if (this._index >= this._maxEffect) {
            this._index = 0;
          }
          switch (this._index) {
            case 0:
              this.skeleton.setVertexEffectDelegate(null);
              break;
            case 1:
              this.skeleton.setVertexEffectDelegate(this._swirlEffect);
              break;
          }
        };
        _proto.update = function update(dt) {
          if (this._index == 1) {
            this._swirlTime += dt;
            var percent = this._swirlTime % 2;
            if (percent > 1) percent = 1 - (percent - 1);
            var bound = this._bound;
            if (this._swirlEffect) {
              var swirlEffect = this._swirlEffect.getSwirlVertexEffect();
              swirlEffect.angle = 360 * percent;
              swirlEffect.centerX = bound.width * 0.5;
              swirlEffect.centerY = bound.height * 0.5;
              swirlEffect.radius = percent * Math.sqrt(bound.width * bound.width + bound.height * bound.height);
            }
          }
        };
        return _class3;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class3.prototype, "skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class3)) || _class2));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineMeshJitterEffect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "18f14RYHo9D8KrLPFIsMK0t", "SpineMeshJitterEffect", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineMeshJitterEffect = exports('SpineMeshJitterEffect', (_dec = ccclass('SpineMeshJitterEffect'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineMeshJitterEffect, _Component);
        function SpineMeshJitterEffect() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeleton", _descriptor, _assertThisInitialized(_this));
          _this._maxEffect = 0;
          _this._index = 0;
          _this._jitterEffect = void 0;
          return _this;
        }
        var _proto = SpineMeshJitterEffect.prototype;
        _proto.start = function start() {
          this._maxEffect = 2;
          this._index = 0;
          if (sp.SPINE_VERSION === '3.8') {
            this._jitterEffect = new sp.VertexEffectDelegate();
            this._jitterEffect.initJitter(20, 20);
          }
        };
        _proto.switchEffect = function switchEffect() {
          this._index++;
          if (this._index >= this._maxEffect) {
            this._index = 0;
          }
          switch (this._index) {
            case 0:
              this.skeleton.setVertexEffectDelegate(null);
              break;
            case 1:
              this.skeleton.setVertexEffectDelegate(this._jitterEffect);
              break;
          }
        };
        _proto.update = function update(dt) {
          // 
        };
        return SpineMeshJitterEffect;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "skeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpinePhysics.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "02305t92yxOT42nztTCLOgC", "SpinePhysics", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpinePhysics = exports('SpinePhysics', (_dec = ccclass('SpinePhysics'), _dec2 = property({
        type: sp.SkeletonData
      }), _dec3 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpinePhysics, _Component);
        function SpinePhysics() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeletonData", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "skeleton", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SpinePhysics.prototype;
        _proto.start = function start() {};
        _proto.onLoad = function onLoad() {
          if (sp.SPINE_VERSION === '4.2') {
            this.node.parent.getChildByName("Unsupported_Tip").active = false;
            this.skeleton.skeletonData = this.skeletonData;
            this.skeleton.setAnimation(0, 'swing', true);
          }
        };
        return SpinePhysics;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "skeletonData", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skeleton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineSharedTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, Prefab, assetManager, instantiate, sp, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      assetManager = module.assetManager;
      instantiate = module.instantiate;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "b8076+1dahCnr0BtfM/sWnp", "SpineSharedTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineSharedTest = exports('SpineSharedTest', (_dec = ccclass('SpineSharedTest'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineSharedTest, _Component);
        function SpineSharedTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._childCount = 0;
          _initializerDefineProperty(_this, "prefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "prefab_4_2", _descriptor2, _assertThisInitialized(_this));
          _this._nodeArr = [];
          return _this;
        }
        var _proto = SpineSharedTest.prototype;
        _proto.start = function start() {
          this._childCount = this.node.children.length;
        };
        _proto.update = function update(deltaTime) {};
        _proto.onClick = function onClick() {
          var _this2 = this;
          // The texture shared with multi instances at shared-cache mode, after close the bundle UI, the texture will be released. If instantiate multi instance, After bundle UI close, other instances still use the texture.
          // Here we prevent instantiate multi times.
          var children = this.node.children;
          var count = children.length;
          var bundleName = this.isVersion4_2() ? "SharedCacheBundle_4_2" : "SharedCacheBundle";
          if (children[count - 1].name === bundleName) return;
          assetManager.loadBundle("SpineSharedTest", function (err, bundle) {
            if (err) {
              console.error(err);
              return;
            }
            bundle.load(bundleName, Prefab, function (err, res) {
              if (err) {
                console.error(err);
                return;
              }
              var node = instantiate(res);
              _this2.node.addChild(node);
            });
          });
        };
        _proto.onAdd = function onAdd() {
          var prefab = this.isVersion4_2() ? this.prefab_4_2 : this.prefab;
          var node = instantiate(prefab);
          this.node.addChild(node);
          this._nodeArr.push(node);
        };
        _proto.onRemove = function onRemove() {
          for (var _iterator = _createForOfIteratorHelperLoose(this._nodeArr), _step; !(_step = _iterator()).done;) {
            var node = _step.value;
            node.destroy();
          }
          this._nodeArr.length = 0;
        };
        _proto.isVersion4_2 = function isVersion4_2() {
          return sp.SPINE_VERSION === '4.2';
        };
        return SpineSharedTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefab_4_2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineSkin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "3f265FzgzJO6pzW2KvpATcO", "SpineSkin", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineSkin = exports('SpineSkin', (_dec = ccclass('SpineSkin'), _dec2 = property({
        type: sp.Skeleton
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineSkin, _Component);
        function SpineSkin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "spine", _descriptor, _assertThisInitialized(_this));
          _this.skinId = 0;
          return _this;
        }
        var _proto = SpineSkin.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        };
        _proto.change = function change() {
          var skins = ['girl', 'boy', 'girl-blue-cape', 'girl-spring-dress'].map(function (x) {
            return "full-skins/" + x;
          });
          this.skinId = (this.skinId + 1) % skins.length;
          this.spine.setSkin(skins[this.skinId]);
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return SpineSkin;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineTestCrash.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Prefab, instantiate, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "0ddaeSvO39Lro6nJCjx18Tv", "SpineTestCrash", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineTestCrash = exports('SpineTestCrash', (_dec = ccclass('SpineTestCrash'), _dec2 = property({
        type: sp.Skeleton
      }), _dec3 = property({
        type: sp.Skeleton
      }), _dec4 = property({
        type: sp.Skeleton
      }), _dec5 = property({
        type: Prefab
      }), _dec6 = property({
        type: Prefab
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineTestCrash, _Component);
        function SpineTestCrash() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "firstSpine", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "secondSpine", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "thirdSpine", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spineBoyPrefab", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "spineBoyPrefab_4_2", _descriptor5, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SpineTestCrash.prototype;
        _proto.start = function start() {
          var _this2 = this;
          var prefab = sp.SPINE_VERSION === '3.8' ? this.spineBoyPrefab : this.spineBoyPrefab_4_2;
          this.firstSpine.setCompleteListener(function (trackEntry) {
            var node = instantiate(prefab);
            _this2.node.addChild(node);
          });
        };
        _proto.update = function update(deltaTime) {};
        return SpineTestCrash;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "firstSpine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "secondSpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "thirdSpine", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spineBoyPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spineBoyPrefab_4_2", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineVersionBind.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, CCString, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      CCString = module.CCString;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "d5ef8pHhpBBQrPeP2UK753Q", "SpineVersionBind", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineVersionBind = exports('SpineVersionBind', (_dec = ccclass('SpineVersionBind'), _dec2 = property({
        type: sp.SkeletonData
      }), _dec3 = property({
        type: sp.SkeletonData
      }), _dec4 = property({
        type: sp.Skeleton
      }), _dec5 = property({
        type: CCString
      }), _dec6 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineVersionBind, _Component);
        function SpineVersionBind() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "skeletonData_3_8", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "skeletonData_4_2", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "skeleton", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "skinName", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "animationName", _descriptor5, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SpineVersionBind.prototype;
        _proto.onLoad = function onLoad() {
          var version = sp.SPINE_VERSION;
          if (version === undefined || version === '3.8') {
            this.skeleton.skeletonData = this.skeletonData_3_8;
          } else if (version === '4.2') {
            this.skeleton.skeletonData = this.skeletonData_4_2;
          }
          if (this.skinName !== '' && this.skinName !== undefined) {
            this.skeleton.setSkin(this.skinName);
          }
          if (this.animationName !== '' && this.skinName !== undefined) {
            this.skeleton.animation = this.animationName;
          }
        };
        return SpineVersionBind;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "skeletonData_3_8", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skeletonData_4_2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "skeleton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "skinName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "animationName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sport_light_1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "7c371gYlBVOU5uHz9LbkNjm", "sport_light_1", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var sport_light_1 = exports('sport_light_1', (_dec = ccclass('sport_light_1'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(sport_light_1, _Component);
        function sport_light_1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._nowA = new Vec3();
          _this._time = 0;
          return _this;
        }
        var _proto = sport_light_1.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this._nowA = this.node.eulerAngles.clone();
        };
        _proto.update = function update(deltaTime) {
          // Your update function goes here.
          this._time += 0.01;
          this._nowA.x = (Math.sin(this._time) + 1.0) * 0.5 * -90.0;
          this.node.setRotationFromEuler(this._nowA.x, this._nowA.y, this._nowA.z);
        };
        return sport_light_1;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sport_light_2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "4078agfjjFO0bRMuakuCcmd", "sport_light_2", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var sport_light_1 = exports('sport_light_1', (_dec = ccclass('sport_light_2'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(sport_light_1, _Component);
        function sport_light_1() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._nowA = new Vec3();
          _this._time = 0;
          return _this;
        }
        var _proto = sport_light_1.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
          this._nowA = this.node.eulerAngles.clone();
        };
        _proto.update = function update(deltaTime) {
          // Your update function goes here.
          this._time += 0.01;
          this._nowA.x = (Math.cos(this._time) + 1.0) * 0.5 * -90.0 - 90.0;
          this.node.setRotationFromEuler(this._nowA.x, this._nowA.y, this._nowA.z);
        };
        return sport_light_1;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpriteAttributeSwitch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Size, Color, Sprite, Label, UITransform, Vec2, math, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Size = module.Size;
      Color = module.Color;
      Sprite = module.Sprite;
      Label = module.Label;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "79ffahpuLpOz63H9+hYLzKV", "SpriteAttributeSwitch", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var spriteTypeList = ['SIMPLE', 'SLICED', 'TILED', 'FILLED'];
      var fillTypeList = ['HORIZONTAL', 'VERTICAL', 'RADIAL'];
      var SpriteAttributeSwitch = exports('SpriteAttributeSwitch', (_dec = ccclass('SpriteAttributeSwitch'), _dec2 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpriteAttributeSwitch, _Component);
        function SpriteAttributeSwitch() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.sprite = null;
          _this.stateLabel = null;
          _this.transform = null;
          _this.oriSize = new Size(200, 200);
          _this.oriColor = new Color(255, 255, 255, 255);
          _this.oriFrame = null;
          _this.curSpriteTypeIndex = 0;
          _this.curFillTypeIndex = 0;
          _initializerDefineProperty(_this, "frame", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SpriteAttributeSwitch.prototype;
        _proto.start = function start() {
          var _this$node$getChildBy, _this$node$getChildBy2;
          this.sprite = (_this$node$getChildBy = this.node.getChildByName('Sprite')) == null ? void 0 : _this$node$getChildBy.getComponent(Sprite);
          this.stateLabel = (_this$node$getChildBy2 = this.node.getChildByName('state')) == null ? void 0 : _this$node$getChildBy2.getComponent(Label);
          this.transform = this.sprite.getComponent(UITransform);
          this.oriFrame = this.sprite.spriteFrame;
          this.sprite.type = this.curSpriteTypeIndex;
          this.sprite.fillType = this.curFillTypeIndex;
          this.sprite.fillCenter = new Vec2(0.5, 0.5);
          this.updateState();
        };
        _proto.update = function update(deltaTime) {};
        _proto.switchActive = function switchActive() {
          this.sprite.node.active = !this.sprite.node.active;
          this.updateState();
        };
        _proto.switchEnabled = function switchEnabled() {
          this.sprite.enabled = !this.sprite.enabled;
          this.updateState();
        };
        _proto.switchContentSize = function switchContentSize() {
          var randX = math.random();
          var randY = math.random();
          this.transform.contentSize = new Size(this.oriSize.x * 2 * randX, this.oriSize.y * 2 * randY);
          this.updateState();
        };
        _proto.switchAnchorX = function switchAnchorX() {
          var randX = math.random();
          this.transform.anchorX = randX;
          this.updateState();
        };
        _proto.switchAnchorY = function switchAnchorY() {
          var randY = math.random();
          this.transform.anchorY = randY;
          this.updateState();
        };
        _proto.switchColor = function switchColor() {
          var randR = math.random();
          var randG = math.random();
          var randB = math.random();
          var randA = math.random();
          this.sprite.color = new Color(this.oriColor.r * randR, this.oriColor.g * randG, this.oriColor.b * randB, this.oriColor.a * randA);
          this.updateState();
        };
        _proto.switchSpriteFrame = function switchSpriteFrame() {
          var isOriFrame = this.sprite.spriteFrame === this.oriFrame;
          this.sprite.spriteFrame = isOriFrame ? this.frame : this.oriFrame;
          this.updateState();
        };
        _proto.switchSpriteType = function switchSpriteType() {
          this.curSpriteTypeIndex = ++this.curSpriteTypeIndex % spriteTypeList.length;
          this.sprite.type = this.curSpriteTypeIndex;
          this.updateState();
        };
        _proto.switchFillType = function switchFillType() {
          this.curFillTypeIndex = ++this.curFillTypeIndex % fillTypeList.length;
          this.sprite.fillType = this.curFillTypeIndex;
          this.sprite.fillRange = math.random();
          this.updateState();
        };
        _proto.reset = function reset() {
          this.sprite.node.active = true;
          this.sprite.enabled = true;
          this.transform.contentSize = this.oriSize;
          this.transform.anchorX = 0.5;
          this.transform.anchorY = 0.5;
          this.sprite.color = this.oriColor;
          this.sprite.spriteFrame = this.oriFrame;
          this.sprite.type = 0;
          this.curSpriteTypeIndex = 0;
          this.sprite.fillType = 0;
          this.curFillTypeIndex = 0;
          this.updateState();
        };
        _proto.updateState = function updateState() {
          var state = "active = " + this.sprite.node.active + "\nenabled = " + this.sprite.enabled + "\ncontentSize = " + this.transform.contentSize + "\nanchor = " + this.transform.anchorPoint + "\ncolor = " + this.sprite.color + "\nspriteFrame = " + this.sprite.spriteFrame.name + "\nspriteType = " + spriteTypeList[this.curSpriteTypeIndex] + "\nfillType = " + fillTypeList[this.curFillTypeIndex];
          this.stateLabel.string = state;
        };
        return SpriteAttributeSwitch;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "frame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-batcher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Label, Node, profiler, director, instantiate, BatchingUtility, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Label = module.Label;
      Node = module.Node;
      profiler = module.profiler;
      director = module.director;
      instantiate = module.instantiate;
      BatchingUtility = module.BatchingUtility;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;
      cclegacy._RF.push({}, "0dbb7y1BqdBcpQru04GUrg1", "static-batcher", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var StaticBatcher = exports('StaticBatcher', (_dec = ccclass('StaticBatcher'), _dec2 = property(Prefab), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticBatcher, _Component);
        function StaticBatcher() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "prefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "static_box", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "root", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "profile", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "count", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "xinterval", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "zinterval", _descriptor8, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "hoverSpeed", _descriptor9, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "maxCount", _descriptor10, _assertThisInitialized(_this));
          _this._nodes = [];
          _this._delays = [];
          _this._batchState = false;
          _this._recoveryProfiler = false;
          return _this;
        }
        var _proto = StaticBatcher.prototype;
        _proto.onLoad = function onLoad() {
          this._recoveryProfiler = profiler.isShowingStats();
        };
        _proto.start = function start() {
          for (var i = 0; i < this.count; i++) {
            for (var j = 0; j < 10; j++) {
              this._createBatch(i, j);
            }
          }
          if (this._batchState) {
            this._changeBatchState(true);
          }
          this.label.string = 'Boxes: ' + this.count * 100;
          // this.slider.progress = this.count / this.maxCount;
        };

        _proto.onEnable = function onEnable() {
          if (!this._recoveryProfiler) {
            profiler.showStats();
          }
        };
        _proto.onDisable = function onDisable() {
          if (!this._recoveryProfiler) {
            profiler.hideStats();
          }
        };
        _proto.update = function update() {
          var _director$root2;
          // @ts-ignore
          var state = profiler._stats;
          if (!state) {
            var _director$root;
            this.profile.string = "DrawCall: " + ((_director$root = director.root) == null ? void 0 : _director$root.device.numDrawCalls);
            return;
          }
          this.profile.string = "\n        FPS: " + state.fps.counter.human() + "\n        DrawCall: " + ((_director$root2 = director.root) == null ? void 0 : _director$root2.device.numDrawCalls) + "\n        ";
        };
        _proto.setCount = function setCount(e, state) {
          if (this._batchState && this.count > 0) {
            this._changeBatchState(false);
          }
          var count = state === 'add' ? this.count + 1 > this.maxCount ? this.maxCount : this.count + 1 : this.count - 1 <= 0 ? 1 : this.count - 1;
          if (count > this.count) {
            for (var i = this.count; i < count; i++) {
              for (var j = 0; j < 10; j++) {
                this._createBatch(i, j);
              }
            }
          } else {
            if (this._nodes.length > 0) {
              for (var _i = count; _i < this.count; _i++) {
                for (var _j = 0; _j < 10; _j++) {
                  var _this$_nodes$splice$;
                  var idx = count * 100;
                  (_this$_nodes$splice$ = this._nodes.splice(idx, 10)[0].parent) == null || _this$_nodes$splice$.setParent(null);
                  this._delays.splice(idx, 10);
                }
              }
            }
          }
          this.count = count;
          this.label.string = 'Boxes: ' + this.count * 100;
          if (this._batchState && count > 0) {
            this._changeBatchState(true);
          }
        };
        _proto._createBatch = function _createBatch(i, j) {
          var node = instantiate(this.prefab);
          node.setPosition(j * this.xinterval, 0, i * this.zinterval);
          node.name = '' + (i * 10 + j) * 10;
          node.setParent(this.root);
          Array.prototype.push.apply(this._nodes, node.children);
          Array.prototype.push.apply(this._delays, node.children.map(function () {
            return Math.random() * Math.PI * 2;
          }));
        };
        _proto.useBatch = function useBatch(t) {
          this._batchState = t.isChecked;
          this._changeBatchState(this._batchState);
        };
        _proto._changeBatchState = function _changeBatchState(batch) {
          if (batch) {
            BatchingUtility.batchStaticModel(this.root, this.static_box);
          } else {
            BatchingUtility.unbatchStaticModel(this.root, this.static_box);
          }
        };
        return StaticBatcher;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "static_box", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "profile", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "count", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "xinterval", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "zinterval", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "hoverSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.01;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "maxCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-scene-list.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9ecadIFuoxLYabcPMJFe7Xo", "static-scene-list", undefined);
      var delayTime = exports('delayTime', 0);
      var sceneNameList = exports('sceneNameList', ["atlas-compress", "audio", "dependAsset", "deprecated", "planar-shadow", "sort", "static-batching", "capture_to_web", "render-camera-to-model", "render-ui-to-model", "render-ui-to-spriteframe", "cameraUseRenderTex", "use-render-texture-asset", "BuildTimeConstantsTest", "CoreJsTest", "single-compress", "terrain", "altas", "load-atlas-texture", "test-js-list", "Hexa", "object-group-image", "puzzle", "shield-node", "filter", "simple", "sliced-sprite", "sprite-Altas", "sprite-grayscale", "trimmed", "bmfont", "label-align", "label-cacheMode", "system-font", "ttf-font", "advance-widget", "align-mode", "widget-percentage", "layout-basic-grid", "layout-basic-horizontal", "layout-basic-verticle", "layout-change-sibling", "layout-grid-contraint", "layout-grid-expand", "layout-scrollview", "layout-size-changed", "list-view", "scroll-view-events", "scroll-view-rotation", "rich-text-align", "rich-text-wrap", "rich-text", "graphics-mask", "mask-inverted-event", "mask-inverted", "mask-nesting", "mask", "graphics-draw-before-init", "multi-canvas", "camera-layout", "opacity", "priority", "opacity-multi-canvas", "material-upgrade", "shadowMap", "shadowCulling", "render-texture-sample", "label-spacing-x", "compressWithGray", "cailbration"]);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-ui.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, UIStaticBatch, sys, director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UIStaticBatch = module.UIStaticBatch;
      sys = module.sys;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "408fcDtyplHQJTZZxumfuDE", "static-ui", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var StaticUI = exports('StaticUI', (_dec = ccclass("StaticUI"), _dec2 = menu('UI/StaticUI'), _dec3 = property(Label), _dec4 = property({
        type: [UIStaticBatch]
      }), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticUI, _Component);
        function StaticUI() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tipLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "newSceneName", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "uiStaticBatchCompList", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = StaticUI.prototype;
        _proto.start = function start() {
          this.scheduleOnce(this.func, 1.5);
          var local = sys.localStorage;
          var item = local.getItem('ui-static-level');
          if (item) {
            this.tipLabel.string = "\u7B2C " + parseInt(item) + " \u6B21\u5207\u56DE";
          } else {
            this.tipLabel.string = "\u7B2C 0 \u6B21\u5207\u56DE";
          }
          for (var i = 0; i < this.uiStaticBatchCompList.length; i++) {
            var element = this.uiStaticBatchCompList[i];
            element.markAsDirty();
          }
        };
        _proto.func = function func() {
          var _this2 = this;
          return new Promise(function (resovle, reject) {
            var local = sys.localStorage;
            var item = local.getItem('ui-static-level');
            if (item) {
              var level = parseInt(item);
              if (level > 5) {
                local.removeItem('ui-static-level');
                return;
              }
              level++;
              if (_this2.newSceneName === 'static-ui') {
                local.setItem('ui-static-level', "" + level);
              }
            } else if (_this2.newSceneName === 'static-ui') {
              local.setItem('ui-static-level', '1');
            }
            director.loadScene(_this2.newSceneName, function (error) {
              error ? reject(error) : resovle();
            });
          });
        };
        return StaticUI;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tipLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "newSceneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "uiStaticBatchCompList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/stringChange.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "2e8d3jQzlNN5YzO9AwDESmT", "stringChange", undefined);
      var ccclass = _decorator.ccclass;
      var StringChange = exports('StringChange', (_dec = ccclass('StringChange'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StringChange, _Component);
        function StringChange() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = StringChange.prototype;
        _proto.start = function start() {
          this.getComponent(Label).string = 'changed';
        };
        return StringChange;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwitchAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "857abdgcIpHIZ2oM4/tfffa", "SwitchAnimation", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SwitchAnimation = exports('SwitchAnimation', (_dec = ccclass("SwitchAnimation"), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SwitchAnimation, _Component);
        function SwitchAnimation() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.num = 0;
          _this.animationComponent = void 0;
          _this._duration = 0.3;
          _initializerDefineProperty(_this, "minDuration", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "maxDuration", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SwitchAnimation.prototype;
        _proto["switch"] = function _switch() {
          if (this.num == 0) {
            this.animationComponent.crossFade("Walk", this._duration);
          }
          if (this.num == 1) {
            this.animationComponent.crossFade("Run", this._duration);
          }
          if (this.num == 2) {
            this.animationComponent.crossFade("Idle", this._duration);
            this.num = -1;
          }
          this.num++;
        };
        _proto.onDurationEditBoxChange = function onDurationEditBoxChange(slider) {
          this._duration = (this.maxDuration - this.minDuration) * slider.progress;
        };
        _proto.start = function start() {
          this.animationComponent = this.node.getComponent(Animation);
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return SwitchAnimation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "minDuration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "maxDuration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.0;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwitchHDR.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Label, director, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "9fc26Ofl11JA5k+LpT9bBJR", "SwitchHDR", undefined);
      //import { _decorator, Component, Node, Scene, renderer, CameraComponent, director } from 'cc';
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = SwitchHDR
       * DateTime = Mon Dec 06 2021 14:32:13 GMT+0800 (GMT+08:00)
       * Author = xu58895777
       * FileBasename = SwitchHDR.ts
       * FileBasenameNoExtension = SwitchHDR
       * URL = db://assets/scripts/hdr-ldr/SwitchHDR.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/zh/
       *
       */

      var SwitchHDR = exports('SwitchHDR', (_dec = ccclass('SwitchHDR'), _dec2 = property(Button), _dec3 = property(Label), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SwitchHDR, _Component);
        function SwitchHDR() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _initializerDefineProperty(_this, "button", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label_hdr", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label_switch", _descriptor3, _assertThisInitialized(_this));
          _this._skyBox = null;
          return _this;
        }
        var _proto = SwitchHDR.prototype;
        _proto.start = function start() {
          var pipeline = director.root.pipeline;
          this._skyBox = pipeline.pipelineSceneData.skybox;
          this.setLabelContent();
        };
        _proto.onLoad = function onLoad() {
          if (this.button != null) this.button.node.on(Button.EventType.CLICK, this.callback, this);
        };
        _proto.callback = function callback(button) {
          this._skyBox.useHDR = !this._skyBox.useHDR;
          this.setLabelContent();
        };
        _proto.setLabelContent = function setLabelContent() {
          if (this._skyBox.useHDR == true) {
            if (this.label_hdr != null) {
              this.label_hdr.string = "当前:HDR";
            }
            if (this.label_switch != null) {
              this.label_switch.string = "切换至LDR";
            }
          } else {
            if (this.label_hdr != null) {
              this.label_hdr.string = "当前:LDR";
            }
            if (this.label_switch != null) {
              this.label_switch.string = "切换至HDR";
            }
          }
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        return SwitchHDR;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label_hdr", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "label_switch", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/zh/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/zh/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/zh/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/tangent-visualizer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, ModelComponent, Material, GFXPrimitiveMode, GFXAttributeName, Color, utils, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      ModelComponent = module.ModelComponent;
      Material = module.Material;
      GFXPrimitiveMode = module.GFXPrimitiveMode;
      GFXAttributeName = module.GFXAttributeName;
      Color = module.Color;
      utils = module.utils;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "e318flB6JhFT5zHRmxMuBHD", "tangent-visualizer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        requireComponent = _decorator.requireComponent;
      var v3_1 = new Vec3();
      var v3_2 = new Vec3();
      var TangentVisualizer = exports('TangentVisualizer', (_dec = ccclass('TangentVisualizer'), _dec2 = requireComponent(ModelComponent), _dec3 = property(ModelComponent), _dec(_class = _dec2(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TangentVisualizer, _Component);
        function TangentVisualizer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "target", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "scale", _descriptor2, _assertThisInitialized(_this));
          _this._material = new Material();
          return _this;
        }
        var _proto = TangentVisualizer.prototype;
        _proto.start = function start() {
          this._material.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_VERTEX_COLOR: true
            },
            states: {
              primitive: GFXPrimitiveMode.LINE_LIST
            }
          });
          this.refresh();
        };
        _proto.refresh = function refresh() {
          if (!this.target) {
            return;
          }
          var comps = this.node.getComponents(ModelComponent);
          if (comps.length < 3) {
            console.warn('three model component on this node is needed');
            return;
          }
          var position = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_POSITION);
          var normal = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_NORMAL);
          var tangent = this.target.mesh.readAttribute(0, GFXAttributeName.ATTR_TANGENT);
          var bitangent = this._generateBitangent(normal, tangent);
          this._updateModel(comps[0], position, normal, Color.MAGENTA);
          this._updateModel(comps[1], position, tangent, Color.CYAN, 4);
          this._updateModel(comps[2], position, bitangent, Color.YELLOW);
        };
        _proto._updateModel = function _updateModel(comp, pos, data, color, stride) {
          var _this2 = this;
          if (stride === void 0) {
            stride = 3;
          }
          comp.material = this._material;
          comp.mesh = utils.createMesh({
            positions: Array(pos.length / 3 * 2).fill(0).map(function (_, i) {
              var ofs = Math.floor(i / 2);
              Vec3.fromArray(v3_1, pos, ofs * 3);
              if (i % 2) {
                Vec3.scaleAndAdd(v3_1, v3_1, Vec3.fromArray(v3_2, data, ofs * stride), _this2.scale);
              }
              return Vec3.toArray([], v3_1);
            }).reduce(function (acc, cur) {
              return cur.forEach(function (c) {
                return acc.push(c);
              }), acc;
            }, []),
            colors: Array(pos.length / 3 * 2).fill(0).map(function (_, i) {
              return Color.toArray([], i % 2 ? color : Color.WHITE);
            }).reduce(function (acc, cur) {
              return cur.forEach(function (c) {
                return acc.push(c);
              }), acc;
            }, []),
            primitiveMode: GFXPrimitiveMode.LINE_LIST,
            minPos: new Vec3(-Infinity, -Infinity, -Infinity),
            maxPos: new Vec3(Infinity, Infinity, Infinity)
          });
        };
        _proto._generateBitangent = function _generateBitangent(normal, tangent) {
          var bitangent = normal.slice();
          var vCount = normal.length / 3;
          for (var i = 0; i < vCount; i++) {
            Vec3.fromArray(v3_1, normal, i * 3);
            Vec3.fromArray(v3_2, tangent, i * 4);
            Vec3.multiplyScalar(v3_1, Vec3.cross(v3_1, v3_1, v3_2), tangent[i * 4 + 3]);
            Vec3.toArray(bitangent, v3_1, i * 3);
          }
          return bitangent;
        };
        _createClass(TangentVisualizer, [{
          key: "apply",
          get: function get() {
            return false;
          },
          set: function set(val) {
            this.refresh();
          }
        }]);
        return TangentVisualizer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "apply", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "apply"), _class2.prototype)), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/terrain123.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, Label, Node, Terrain, gfx, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      Label = module.Label;
      Node = module.Node;
      Terrain = module.Terrain;
      gfx = module.gfx;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "6c168ZBthxBepG+vKu+u/n8", "terrain123", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Terrain123 = exports('Terrain123', (_dec = ccclass('Terrain123'), _dec2 = property(Toggle), _dec3 = property(Label), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Terrain123, _Component);
        function Terrain123() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _initializerDefineProperty(_this, "toggle", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "terrainNode", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = Terrain123.prototype;
        _proto.onEnable = function onEnable() {
          this.toggle.node.on(Toggle.EventType.TOGGLE, this.onToggle, this);
        };
        _proto.onDisable = function onDisable() {
          this.toggle.node.off(Toggle.EventType.TOGGLE, this.onToggle, this);
        };
        _proto.onToggle = function onToggle(toggle) {
          var terrain = this.terrainNode.getComponent(Terrain);
          if (terrain != null) {
            terrain.lodEnable = toggle.isChecked;
          }
        };
        _proto.update = function update(deltaTime) {
          var terrain = this.terrainNode.getComponent(Terrain);
          if (terrain == null) {
            return;
          }
          var numTris = gfx.deviceManager.gfxDevice.numTris;
          this.label.string = "" + numTris;
        };
        return Terrain123;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "terrainNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-atlas-config.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, assetManager, Texture2D, ImageAsset, SpriteAtlas, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      ImageAsset = module.ImageAsset;
      SpriteAtlas = module.SpriteAtlas;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "1374d3rqdpHTp5bobdKEj/U", "test-atlas-config", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Typescript = exports('Typescript', (_dec = ccclass('Typescript'), _dec2 = property({
        type: [Label]
      }), _dec3 = property({
        type: [Label]
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Typescript, _Component);
        function Typescript() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          _initializerDefineProperty(_this, "normal", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "config", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loadBundleLabel", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = Typescript.prototype;
        // [2]
        // @property
        // serializableDummy = 0;
        _proto.start = function start() {
          // [3]
          this.loadBundle();
        };
        _proto.loadBundle = function loadBundle() {
          var _this2 = this;
          assetManager.loadBundle('test-atlas-build', function (err, bundle) {
            if (err) {
              _this2.loadBundleLabel.string = 'load bundle test-atlas-build failed!';
              return;
            }
            _this2.loadBundleLabel.string = 'load bundle success!';
            _this2.loadAssetTest('normal', bundle);
            _this2.loadAssetTest('config', bundle);
          });
        };
        _proto.loadAssetTest = function loadAssetTest(folder, bundle) {
          var loadTexture = this[folder][0];
          var loadImage = this[folder][1];
          var loadSpriteAtlas = this[folder][2];
          bundle.load(folder + "/1/texture", Texture2D, function (err, asset) {
            if (err) {
              loadTexture.string = folder + ' load texture failed!';
              return;
            }
            loadTexture.string = folder + ' load texture sucess!';
          });
          bundle.load(folder + "/2", ImageAsset, function (err, asset) {
            if (err) {
              loadImage.string = folder + ' load image failed!√';
              return;
            }
            loadImage.string = folder + ' load image sucess!';
          });
          bundle.load(folder + "/auto-atlas", SpriteAtlas, function (err, asset) {
            if (err) {
              loadSpriteAtlas.string = folder + ' load spriteAtlas failed!';
              return;
            }
            loadSpriteAtlas.string = folder + ' load spriteAtlas sucess!';
          });
        }
        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        return Typescript;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "normal", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "config", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "loadBundleLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, SpriteFrame, find, Label, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      SpriteFrame = module.SpriteFrame;
      find = module.find;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "acb91WgF7FLwbelgCmr78H7", "Test", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Test = exports('Test', (_dec = ccclass("Test"), _dec2 = property({
        type: EditBox
      }), _dec3 = property({
        type: SpriteFrame
      }), _dec4 = property({
        type: SpriteFrame
      }), _dec5 = property({
        type: SpriteFrame
      }), _dec6 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Test, _Component);
        function Test() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "editbox", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sf", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "sea", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "lake", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mountain", _descriptor5, _assertThisInitialized(_this));
          _this.tipLabel = null;
          _this.showLabel = null;
          _this._sprite = null;
          _this._label = '替换成功';
          return _this;
        }
        var _proto = Test.prototype;
        _proto.start = function start() {
          var _canvas$getChildByNam, _canvas$getChildByNam2;
          var canvas = find('Canvas');
          this.tipLabel = canvas == null || (_canvas$getChildByNam = canvas.getChildByName('Label-1')) == null ? void 0 : _canvas$getChildByNam.getComponent(Label);
          this.showLabel = canvas == null || (_canvas$getChildByNam2 = canvas.getChildByName('Label-2')) == null ? void 0 : _canvas$getChildByNam2.getComponent(Label);
          this._sprite = this.node.getComponent(Sprite);
        };
        _proto.test = function test(name) {
          this._sprite.changeSpriteFrameFromAtlas(name);
        };
        _proto.button = function button() {
          this.tipLabel.node.active = !this.tipLabel.node.active;
        };
        _proto.button1 = function button1() {
          this.test(this.editbox.string);
          if (this._sprite.spriteFrame !== null) {
            this.showLabel.string = this._label + ' ' + this.editbox.string;
          }
          if (this._sprite.spriteAtlas === null) {
            this.showLabel.string = "替换失败" + this.editbox.string;
          }
          if (this._sprite.spriteAtlas != null && this._sprite.spriteFrame == null) {
            this.showLabel.string = "请输入正确的名字";
          }
          this.tipLabel.node.active = false;
        };
        _proto.button2 = function button2() {
          this._sprite.spriteAtlas = null;
          this.showLabel.string = '清除图集';
          this._label = '替换失败';
        };
        _proto.button3 = function button3(name) {
          this.name = this.editbox.string;
          if (this.name == 'tree') {
            this._sprite.spriteFrame = this.sf;
            this.showLabel.string = '更换图片 tree';
          }
          if (this.name == 'sea') {
            this._sprite.spriteFrame = this.sea;
            this.showLabel.string = '更换图片 sea';
          }
          if (this.name == 'lake') {
            this._sprite.spriteFrame = this.lake;
            this.showLabel.string = '更换图片 lake';
          }
          if (this.name == 'mountain') {
            this._sprite.spriteFrame = this.mountain;
            this.showLabel.string = '更换图片 mountain';
          }
          if (this.name != 'mountain' && this.name != 'lake' && this.name != 'sea' && this.name != 'tree') {
            this.showLabel.string = '请输入正确的名字';
          }
        };
        _proto.button4 = function button4() {
          this.tipLabel.node.active = !this.tipLabel.node.active;
        };
        return Test;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "editbox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sf", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sea", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lake", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "mountain", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TestBufferAsset.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, BufferAsset, Node, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      BufferAsset = module.BufferAsset;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "3478fDZC6RLhrMbgGWr+Nyg", "TestBufferAsset", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var asciiCodes = new Uint8Array(Array.prototype.map.call('0123456789abcdef', function (_char) {
        return _char.charCodeAt();
      }));
      function arrayBufferToHexString(arrayBuffer) {
        var buff = new Uint8Array(arrayBuffer);
        var charCodes = new Uint8Array(buff.length * 2);
        for (var i = 0; i < buff.length; ++i) {
          charCodes[i * 2] = asciiCodes[buff[i] >>> 4];
          charCodes[i * 2 + 1] = asciiCodes[buff[i] & 0xf];
        }
        return String.fromCharCode.apply(String, charCodes);
      }
      var TestBufferAsset = exports('TestBufferAsset', (_dec = ccclass('TestBufferAsset'), _dec2 = property(BufferAsset), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestBufferAsset, _Component);
        function TestBufferAsset() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bufferAsset", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "promptNode", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = TestBufferAsset.prototype;
        _proto.start = function start() {
          var _this$promptNode, _this$bufferAsset;
          var labelComp = (_this$promptNode = this.promptNode) == null ? void 0 : _this$promptNode.getComponent(Label);
          var buffer = (_this$bufferAsset = this.bufferAsset) == null ? void 0 : _this$bufferAsset.buffer();
          if (buffer && buffer.byteLength > 0) {
            if (labelComp) {
              var hexStr = arrayBufferToHexString(buffer);
              console.log('TestBufferAsset scene, BufferAsset is: ' + hexStr);
              labelComp.string = '加载成功，内容为：' + hexStr;
            }
          } else {
            if (labelComp) {
              labelComp.string = '加载失败';
            }
          }
        };
        return TestBufferAsset;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bufferAsset", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "promptNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/testJsList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "cfb87ZSolxPPaNTWpnTT9v5", "testJsList", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TestJsList = exports('TestJsList', (_dec = ccclass("TestJsList"), _dec2 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestJsList, _Component);
        function TestJsList() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = TestJsList.prototype;
        _proto.start = function start() {
          var str = globalThis['JS_LIST_TIPS'];
          if (str.length) {
            this.label.string = str;
          }
        };
        return TestJsList;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/tiled.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, UITransform, view, Size, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      view = module.view;
      Size = module.Size;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "2b357qH4X1IbY1T5THVmIyE", "tiled", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var Tiled = exports('Tiled', (_dec = ccclass("Tiled"), _dec2 = menu('UI/Tiled'), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Tiled, _Component);
        function Tiled() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._startSize = new Size();
          return _this;
        }
        var _proto = Tiled.prototype;
        _proto.start = function start() {
          var uiTrans = this.getComponent(UITransform);
          this._startSize.set(uiTrans.contentSize);
        };
        _proto.update = function update(dt) {
          var size = view.getVisibleSize();
          var limit = size.width * 0.7;
          var uiTrans = this.getComponent(UITransform);
          var content = uiTrans.contentSize;
          var width = content.width;
          if (width > limit) {
            this.enabled = false;
          }
          uiTrans.setContentSize(width + 5, content.height);
        };
        return Tiled;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/tips-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "f0d55ZA5HNAO4T4xzVj2DVW", "tips-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TipsCtrl = exports('TipsCtrl', (_dec = ccclass('TipsCtrl'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TipsCtrl, _Component);
        function TipsCtrl() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = TipsCtrl.prototype;
        _proto.onFinish = function onFinish() {
          this.node.destroy();
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return TipsCtrl;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/toggle-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ToggleContainer, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ToggleContainer = module.ToggleContainer;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "bb72epOWF9CCrIWL9vgq1Ge", "toggle-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ToggleCtrl = exports('ToggleCtrl', (_dec = ccclass('ToggleCtrl'), _dec2 = property(ToggleContainer), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ToggleCtrl, _Component);
        function ToggleCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "group", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ToggleCtrl.prototype;
        _proto.start = function start() {
          var node = this.group.node.getChildByName('Label');
          var label = node.getComponent(Label);
          label.string += "\n toggleItems length : " + this.group.toggleItems.length;
        };
        return ToggleCtrl;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "group", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/toggle-event-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "c22adkyonxMMq+dz11Rnh0V", "toggle-event-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ToggleEvent = exports('ToggleEvent', (_dec = ccclass('ToggleEvent'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ToggleEvent, _Component);
        function ToggleEvent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "tips", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = ToggleEvent.prototype;
        _proto.onToggleClick = function onToggleClick(toggle) {
          this.tips.string = "\u89E6\u53D1\u4E86 toggle \u4E8B\u4EF6\uFF0C\u5F53\u524D Toggle \u72B6\u6001\u4E3A\uFF1A" + toggle.isChecked;
        };
        _proto.onToggleContainerClick = function onToggleContainerClick(toggle) {
          this.tips.string = "\u89E6\u53D1\u4E86 ToggleContainer \u4E8B\u4EF6\uFF0C\u70B9\u4E86" + toggle.node.name + "\u7684 Toggle";
        };
        return ToggleEvent;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/toggler.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "32abfv2Y8dPZK9pOrJO0y5M", "toggler", undefined);
      var ccclass = _decorator.ccclass;
      var Toggler = exports('Toggler', (_dec = ccclass('Toggler'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Toggler, _Component);
        function Toggler() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = Toggler.prototype;
        _proto.toggleActive = function toggleActive() {
          this.node.active = !this.node.active;
        };
        return Toggler;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/touch-event.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, view, input, Input, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      view = module.view;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "a1f49jKDlBFO4sao4R7Z9g2", "touch-event", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var SystemEventTest = exports('SystemEventTest', (_dec = ccclass("SystemEventTest"), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SystemEventTest, _Component);
        function SystemEventTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "labelShow", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "tip", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "notSupported", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = SystemEventTest.prototype;
        _proto.onLoad = function onLoad() {
          // NOTE: we've simulated touch event on PC end for now
          // if (!sys.isMobile) {
          //     this.notSupported.active = true;
          //     return;
          // }
          var canvasSize = view.getCanvasSize();
          this.tip.string = this.tip.string.replace('{{width}}', canvasSize.width.toString());
          this.tip.string = this.tip.string.replace('{{height}}', canvasSize.height.toString());
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };
        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.off(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          this.labelShow.string = "TouchStart: " + event.getLocation();
        };
        _proto.onTouchMove = function onTouchMove(event) {
          this.labelShow.string = "TouchMove: " + event.getLocation();
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          this.labelShow.string = "TouchEnd: " + event.getLocation();
        };
        _proto.onTouchCancel = function onTouchCancel(event) {
          this.labelShow.string = "TouchCancel";
        };
        return SystemEventTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelShow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "notSupported", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TransformController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "31227RC6XlF3qraA74BrA9+", "TransformController", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var _temp_num = 0;
      var TransformController = exports('TransformController', (_dec = ccclass("TransformController"), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Node
      }), _dec6 = property({
        type: Toggle
      }), _dec7 = property({
        type: Toggle
      }), _dec8 = property({
        type: Toggle
      }), _dec9 = property({
        type: Toggle
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TransformController, _Component);
        function TransformController() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "particle1", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "particle2", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "particle3", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "particle4", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "check1", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "check2", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "check3", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "check4", _descriptor8, _assertThisInitialized(_this));
          _this._translate = new Vec3();
          _this._rotate = new Vec3();
          return _this;
        }
        var _proto = TransformController.prototype;
        _proto.start = function start() {
          // Your initialization goes here.
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        _proto.onTranslateChanged = function onTranslateChanged(slider, data) {
          this._translate.set(0, 0, slider.progress * 10 - _temp_num);
          _temp_num = slider.progress * 10;
          if (this.check1.isChecked) {
            this.particle1.translate(this._translate);
          }
          if (this.check2.isChecked) {
            this.particle2.translate(this._translate);
          }
          if (this.check3.isChecked) {
            this.particle3.translate(this._translate);
          }
          if (this.check4.isChecked) {
            this.particle4.translate(this._translate);
          }
        };
        _proto.onRotateChanged = function onRotateChanged(slider, data) {
          this._rotate.set(slider.progress * 90, 0, 0);
          if (this.check1.isChecked) {
            this.particle1.setRotationFromEuler(this.particle1.eulerAngles.x, this._rotate.x, this.particle1.eulerAngles.z);
          }
          if (this.check2.isChecked) {
            this.particle2.setRotationFromEuler(this.particle2.eulerAngles.x, this._rotate.x, this.particle2.eulerAngles.z);
          }
          if (this.check3.isChecked) {
            this.particle3.setRotationFromEuler(this.particle3.eulerAngles.x, this._rotate.x, this.particle3.eulerAngles.z);
          }
          if (this.check4.isChecked) {
            this.particle4.setRotationFromEuler(this.particle4.eulerAngles.x, this._rotate.x, this.particle4.eulerAngles.z);
          }
        };
        return TransformController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "particle1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "particle2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particle3", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "particle4", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "check1", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "check2", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "check3", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "check4", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/trimmed.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Graphics, UITransform, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Graphics = module.Graphics;
      UITransform = module.UITransform;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "59e15ttAZ5Ku5epzgIxZVbi", "trimmed", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        executeInEditMode = _decorator.executeInEditMode,
        menu = _decorator.menu;
      var Trimmed = exports('Trimmed', (_dec = ccclass("Trimmed"), _dec2 = menu('UI/Trimmed'), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec(_class = _dec2(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Trimmed, _Component);
        function Trimmed() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "trimmed", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "noTrimmed", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = Trimmed.prototype;
        _proto.start = function start() {
          var g = this.node.getComponent(Graphics);
          var trimmedContentSize = this.trimmed.getComponent(UITransform).contentSize;
          var noTrimmedContentSize = this.noTrimmed.getComponent(UITransform).contentSize;
          g.clear();
          g.lineWidth = 2;
          g.strokeColor = Color.RED;
          g.moveTo(this.trimmed.position.x - trimmedContentSize.width / 2 + 1, trimmedContentSize.height / 2 - 1);
          g.lineTo(this.trimmed.position.x + trimmedContentSize.width / 2 - 1, trimmedContentSize.height / 2 - 1);
          g.lineTo(this.trimmed.position.x + trimmedContentSize.width / 2 - 1, -trimmedContentSize.height / 2 + 1);
          g.lineTo(this.trimmed.position.x - trimmedContentSize.width / 2 + 1, -trimmedContentSize.height / 2 + 1);
          g.lineTo(this.trimmed.position.x - trimmedContentSize.width / 2 + 1, trimmedContentSize.height / 2 - 1);
          g.moveTo(this.noTrimmed.position.x - noTrimmedContentSize.width / 2 + 1, noTrimmedContentSize.height / 2 - 1);
          g.lineTo(this.noTrimmed.position.x + noTrimmedContentSize.width / 2 - 1, noTrimmedContentSize.height / 2 - 1);
          g.lineTo(this.noTrimmed.position.x + noTrimmedContentSize.width / 2 - 1, -noTrimmedContentSize.height / 2 + 1);
          g.lineTo(this.noTrimmed.position.x - noTrimmedContentSize.width / 2 + 1, -noTrimmedContentSize.height / 2 + 1);
          g.lineTo(this.noTrimmed.position.x - noTrimmedContentSize.width / 2 + 1, noTrimmedContentSize.height / 2 - 1);
          g.stroke();
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return Trimmed;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "trimmed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "noTrimmed", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/tween-test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, tween, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "7681ePAf7VHKpuKOshcVeC7", "tween-test", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;

      /**
       * 老示例的兼容性测试
       *
       * 如果是想要缓动 node 的属性，可以参考其它脚本
       */

      var TweenTest = exports('TweenTest', (_dec = ccclass("tween-test"), _dec2 = menu("tween/tween-test"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenTest, _Component);
        function TweenTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._wPos = new Vec3(0, 0, 0);
          _this._wScale = new Vec3(1, 1, 1);
          _this._lEuler = new Vec3(0, 0, 0);
          _this.tweenPos = void 0;
          _this.tweenScale = void 0;
          _this.tweenEuler = void 0;
          return _this;
        }
        var _proto = TweenTest.prototype;
        _proto.onLoad = function onLoad() {
          Vec3.copy(this._wPos, this.node.worldPosition);

          /**
           * 注意，这里的 easing 的值类型在 V1.1 已经变动了，为了测试旧版本的兼容性，这里没有将其改成正确的值
           */
          this.tweenPos = tween(this._wPos).to(3, new Vec3(10, 10, 10), {
            easing: 'bounceInOut'
          }).to(3, new Vec3(0, 0, 0), {
            easing: 'elasticOut'
          }).union().repeat(Infinity);
          Vec3.copy(this._wScale, this.node.worldScale);

          /**
           * 下面 Tween 中的 easing 是正确的
           */
          this.tweenScale = tween(this._wScale).to(0.5, new Vec3(3, 3, 3), {
            easing: 'bounceInOut'
          }).to(0.5, new Vec3(1, 1, 1), {
            easing: 'elasticOut'
          }).union().repeat(Infinity);
          Vec3.copy(this._lEuler, this.node.eulerAngles);
          this.tweenEuler = tween(this._lEuler).to(4.5, new Vec3(360, 360, 360), {
            easing: 'bounceInOut'
          }).to(4.5, new Vec3(0, 0, 0), {
            easing: 'elasticOut'
          }).union().repeat(Infinity);
        };
        _proto.onEnable = function onEnable() {
          this.tweenPos.start();
          this.tweenScale.start();
          this.tweenEuler.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenPos.stop();
          this.tweenScale.stop();
          this.tweenEuler.stop();
        };
        _proto.update = function update() {
          this.node.worldPosition = this._wPos;
          this.node.worldScale = this._wScale;
          this.node.eulerAngles = this._lEuler;
        };
        return TweenTest;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenActionCallBack.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Quat, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "c674fT0YG9Jo6W4Cp5LYcqA", "TweenActionCallBack", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TweenActionCallBack = exports('TweenActionCallBack', (_dec = ccclass("TweenActionCallBack"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenActionCallBack, _Component);
        function TweenActionCallBack() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tween = void 0;
          _this._scale = new Vec3(1, 1, 1);
          return _this;
        }
        var _proto = TweenActionCallBack.prototype;
        _proto.onLoad = function onLoad() {
          var that = this;
          var times = 0;
          this.tween = tween(this._scale)
          // 延迟 1s
          .delay(1).by(1, new Vec3(1, 1, 1), {
            'onStart': function onStart() {
              // 第二遍开始的时候，移动node
              if (times == 1) that.node.translate(new Vec3(0, 10, 0));
            },
            'onUpdate': function onUpdate() {
              that.node.scale = that._scale;
            },
            'onComplete': function onComplete() {
              // 第三遍完成的时候, 旋转Node
              if (times == 2) that.node.rotate(Quat.fromEuler(new Quat(), 0, 45, 0));
              times++;
            }
          }).repeat(3);
        };
        _proto.onEnable = function onEnable() {
          this.tween.start();
        };
        _proto.onDisable = function onDisable() {
          this.tween.stop();
        };
        return TweenActionCallBack;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenClone.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, find, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      find = module.find;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "2a301uexdZCzKvVP44F+yc2", "TweenClone", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenClone = exports('TweenClone', (_dec = ccclass("TweenClone"), _dec2 = menu("tween/TweenClone"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenClone, _Component);
        function TweenClone() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenClone0 = void 0;
          _this.tweenClone1 = void 0;
          return _this;
        }
        var _proto = TweenClone.prototype;
        _proto.onLoad = function onLoad() {
          // 先创建一个缓动作为模板
          var tweenTemplate = tween({}).to(4, {
            scale: new Vec3(3, 3, 3)
          });

          // 复制 tween，并使用节点 cocos 作为 target
          this.tweenClone0 = tweenTemplate.clone(find('TweenClone/cocos'));

          // 复制 tween，并使用节点 cocos2 作为 target
          this.tweenClone1 = tweenTemplate.clone(find('TweenClone/cocos2'));
        };
        _proto.onEnable = function onEnable() {
          this.tweenClone0.start();
          this.tweenClone1.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenClone0.stop();
          this.tweenClone1.stop();
        };
        return TweenClone;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenCustomProgress.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "838c8pQgaNIO7KFfZzgLtHR", "TweenCustomProgress", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenCustomProgress = exports('TweenCustomProgress', (_dec = ccclass("TweenCustomProgress"), _dec2 = menu("tween/TweenCustomProgress"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenCustomProgress, _Component);
        function TweenCustomProgress() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenCP = void 0;
          return _this;
        }
        var _proto = TweenCustomProgress.prototype;
        _proto.onLoad = function onLoad() {
          // 对所有属性自定义 progress
          var scaleTween = tween(this.node).to(2, {
            scale: new Vec3(3, 2, 1)
          }, {
            progress: function progress(start, end, current, ratio) {
              return start + (end - start) * ratio;
            }
          });

          // 对单个属性自定义 progress
          this.tweenCP = tween(this.node).to(2, {
            position: new Vec3(2, 2, -2)
          }, {
            progress: function progress(start, end, current, ratio) {
              return start + (end - start) * ratio * ratio * ratio;
            }
          }).reverseTime(scaleTween);
        };
        _proto.onEnable = function onEnable() {
          this.tweenCP.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenCP.stop();
        };
        return TweenCustomProgress;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenDelay.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "d6bdf6xbXNOfayKGwLKR4B9", "TweenDelay", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenDelay = exports('TweenDelay', (_dec = ccclass("TweenDelay"), _dec2 = menu("tween/TweenDelay"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenDelay, _Component);
        function TweenDelay() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenDelay = void 0;
          return _this;
        }
        var _proto = TweenDelay.prototype;
        _proto.onLoad = function onLoad() {
          this.tweenDelay = tween(this.node)
          // 延迟 1s
          .delay(1).to(1, {
            scale: new Vec3(2, 2, 2)
          })
          // 再延迟 1s
          .delay(1).to(1, {
            scale: new Vec3(3, 3, 3)
          });
        };
        _proto.onEnable = function onEnable() {
          this.tweenDelay.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenDelay.stop();
        };
        return TweenDelay;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenParallel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "6e30eSvH65K7a4saHr5Vhy9", "TweenParallel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenParallel = exports('TweenParallel', (_dec = ccclass("TweenParallel"), _dec2 = menu("tween/TweenParallel"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenParallel, _Component);
        function TweenParallel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenParallel = void 0;
          return _this;
        }
        var _proto = TweenParallel.prototype;
        _proto.onLoad = function onLoad() {
          this.tweenParallel = tween(this.node)
          // 同时执行两个 Tween
          .parallel(tween().to(2, {
            scale: new Vec3(1, 2, 3)
          }), tween().to(2, {
            position: new Vec3(3, 0, 3)
          })).call(function () {
            console.log('All tweens finished.');
          });
        };
        _proto.onEnable = function onEnable() {
          this.tweenParallel.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenParallel.stop();
        };
        return TweenParallel;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenReadOnly.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "a81b0C8OG5PFaVOGa6dOOGJ", "TweenReadOnly", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = TweenReadOnly
       * DateTime = Wed Jan 19 2022 16:38:23 GMT+0800 (中国标准时间)
       * Author = zmzczy
       * FileBasename = TweenReadOnly.ts
       * FileBasenameNoExtension = TweenReadOnly
       * URL = db://assets/cases/tween/script/TweenReadOnly.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var TweenReadOnly = exports('TweenReadOnly', (_dec = ccclass('TweenReadOnly'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenReadOnly, _Component);
        function TweenReadOnly() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _this.tweenRed = null;
          _this.tweenGreen = null;
          _this.spriteRed = null;
          _this.spriteGreen = null;
          _this.oriRedPos = null;
          _this.oriGreenPos = null;
          return _this;
        }
        var _proto = TweenReadOnly.prototype;
        _proto.start = function start() {
          var _this$node$getChildBy, _this$node$getChildBy2;
          // [3]
          this.spriteRed = (_this$node$getChildBy = this.node.getChildByName('SpriteRed')) == null ? void 0 : _this$node$getChildBy.getComponent(Sprite);
          this.oriRedPos = this.spriteRed.node.position;
          this.spriteGreen = (_this$node$getChildBy2 = this.node.getChildByName('SpriteGreen')) == null ? void 0 : _this$node$getChildBy2.getComponent(Sprite);
          this.oriGreenPos = this.spriteGreen.node.position;
          this.tweenStart();
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto.onDisable = function onDisable() {
          this.tweenRed.stop();
          this.tweenGreen.stop();
        };
        _proto.onDestroy = function onDestroy() {
          this.tweenRed.stop();
          this.tweenGreen.stop();
        };
        _proto.tweenStart = function tweenStart() {
          var _this2 = this;
          this.tweenRed = new Tween(this.spriteRed.node).to(2, {
            position: new Vec3(this.oriRedPos.x, -200, 0)
          }).call(function () {
            if (_this2.spriteRed && _this2.spriteRed.node) {
              _this2.spriteRed.node.position = new Vec3(_this2.oriRedPos.x, 0, 0);
            }
          }).union().repeatForever().start();
          this.tweenGreen = new Tween(this.spriteGreen.node.position).to(2, {
            y: -200
          }).call(function () {
            if (_this2.spriteGreen && _this2.spriteGreen.node) {
              _this2.spriteGreen.node.position = new Vec3(_this2.oriGreenPos.x, 0, 0);
            }
          }).union().repeatForever().start();
        };
        return TweenReadOnly;
      }(Component)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/decorator.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenRemoveSelf.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "c7949ZkV0JICKrGvOPs4iyK", "TweenRemoveSelf", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenRemoveSelf = exports('TweenRemoveSelf', (_dec = ccclass("TweenRemoveSelf"), _dec2 = menu("tween/TweenRemoveSelf"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenRemoveSelf, _Component);
        function TweenRemoveSelf() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenRemoveSelf = void 0;
          return _this;
        }
        var _proto = TweenRemoveSelf.prototype;
        _proto.onLoad = function onLoad() {
          /**
           * 注意 target 需要是 Node 的，才可以使用 removeSelf
           */
          this.tweenRemoveSelf = tween(this.node).delay(1).removeSelf();
        };
        _proto.onEnable = function onEnable() {
          this.tweenRemoveSelf.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenRemoveSelf.stop();
        };
        return TweenRemoveSelf;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenRepeat.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "7529cHC0KVCgqpBE8238J1i", "TweenRepeat", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenRepeat = exports('TweenRepeat', (_dec = ccclass("TweenRepeat"), _dec2 = menu("tween/TweenRepeat"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenRepeat, _Component);
        function TweenRepeat() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenRepeat = void 0;
          return _this;
        }
        var _proto = TweenRepeat.prototype;
        _proto.onLoad = function onLoad() {
          this.tweenRepeat = tween(this.node).by(1, {
            scale: new Vec3(2, 2, 2)
          })
          // 对前一个 by 重复执行 3次
          .repeat(3).call(function () {
            console.log('All tweens finished.');
          });
        };
        _proto.onEnable = function onEnable() {
          this.tweenRepeat.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenRepeat.stop();
        };
        return TweenRepeat;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenRepeat2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "5de1coi5aBBspa8mURWNyUS", "TweenRepeat2", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenRepeat2 = exports('TweenRepeat2', (_dec = ccclass("TweenRepeat2"), _dec2 = menu("tween/TweenRepeat2"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenRepeat2, _Component);
        function TweenRepeat2() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenRepeat = void 0;
          return _this;
        }
        var _proto = TweenRepeat2.prototype;
        _proto.onLoad = function onLoad() {
          /**
           * 这里 repeat 重复的是嵌入的 Tween, target 将取上下文中的
           * 这个例子和脚本 TweenRepeat 中的效果是一样的
           */
          this.tweenRepeat = tween(this.node).repeat(3, tween().by(1, {
            scale: new Vec3(2, 2, 2)
          }));
        };
        _proto.onEnable = function onEnable() {
          this.tweenRepeat.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenRepeat.stop();
        };
        return TweenRepeat2;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenRepeatForever.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "b06c2YjnhhEwJmoSA0i153H", "TweenRepeatForever", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenRepeatForever = exports('TweenRepeatForever', (_dec = ccclass("TweenRepeatForever"), _dec2 = menu("tween/TweenRepeatForever"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenRepeatForever, _Component);
        function TweenRepeatForever() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenRF = void 0;
          return _this;
        }
        var _proto = TweenRepeatForever.prototype;
        _proto.onLoad = function onLoad() {
          // 一直重复执行下去
          this.tweenRF = tween(this.node).by(1, {
            scale: new Vec3(2, 2, 2)
          }).repeatForever();
        };
        _proto.onEnable = function onEnable() {
          this.tweenRF.start();
        };
        _proto.onDisable = function onDisable() {
          /**
           * v1.0.4 版本开始，当缓动目标为 node 后，节点销毁后将会自动进行 stop
           */
          // this.tweenRF.stop();
        };
        return TweenRepeatForever;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenRepeatUnion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "3a51c4YYaJFWr37pkGgnKFn", "TweenRepeatUnion", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * Predefined variables
       * Name = TweenRepeatUnion
       * DateTime = Wed Jan 19 2022 15:58:04 GMT+0800 (中国标准时间)
       * Author = zmzczy
       * FileBasename = TweenRepeatUnion.ts
       * FileBasenameNoExtension = TweenRepeatUnion
       * URL = db://assets/cases/tween/script/TweenRepeatUnion.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var TweenRepeatUnion = exports('TweenRepeatUnion', (_dec = ccclass('TweenRepeatUnion'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenRepeatUnion, _Component);
        function TweenRepeatUnion() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          // [1]
          // dummy = '';
          // [2]
          // @property
          // serializableDummy = 0;
          _this.spriteRed = null;
          _this.spriteGreen = null;
          _this.spriteBlue = null;
          _this.oriRedPos = null;
          _this.oriGreenPos = null;
          _this.oriBluePos = null;
          return _this;
        }
        var _proto = TweenRepeatUnion.prototype;
        _proto.start = function start() {
          var _this$node$getChildBy, _this$node$getChildBy2, _this$node$getChildBy3;
          // [3]
          this.spriteRed = (_this$node$getChildBy = this.node.getChildByName('SpriteRed')) == null ? void 0 : _this$node$getChildBy.getComponent(Sprite);
          this.oriRedPos = this.spriteRed.node.position;
          this.spriteGreen = (_this$node$getChildBy2 = this.node.getChildByName('SpriteGreen')) == null ? void 0 : _this$node$getChildBy2.getComponent(Sprite);
          this.oriGreenPos = this.spriteGreen.node.position;
          this.spriteBlue = (_this$node$getChildBy3 = this.node.getChildByName('SpriteBlue')) == null ? void 0 : _this$node$getChildBy3.getComponent(Sprite);
          this.oriBluePos = this.spriteBlue.node.position;
          this.tweenStart();
        }

        // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto.tweenStart = function tweenStart() {
          var _this2 = this;
          tween(this.spriteRed.node).to(2, {
            scale: new Vec3(2, 2, 2)
          }).call(function () {
            _this2.spriteRed.node.scale = Vec3.ONE;
          }).union().repeatForever().start();
          tween(this.spriteRed.node).to(2, {
            position: new Vec3(this.oriRedPos.x, -200, 0)
          }).start();
          tween(this.spriteGreen.node).to(2, {
            position: new Vec3(this.oriGreenPos.x, -200, 0)
          }).call(function () {
            _this2.spriteGreen.node.position = new Vec3(_this2.oriGreenPos.x, 0, 0);
          }).union().repeatForever().start();
          tween(this.spriteGreen.node).to(2, {
            scale: new Vec3(2, 2, 2)
          }).start();
          tween(this.spriteBlue.node).parallel(tween().to(2, {
            position: new Vec3(this.oriBluePos.x, -200, 0)
          }), tween().to(2, {
            scale: new Vec3(2, 2, 2)
          })).call(function () {
            _this2.spriteBlue.node.scale = Vec3.ONE;
            _this2.spriteBlue.node.position = new Vec3(_this2.oriBluePos.x, 0, 0);
          }).union().repeatForever().start();
        };
        return TweenRepeatUnion;
      }(Component)) || _class));

      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/decorator.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenShowHide.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "6a2e0eywUlNDLyQo4AyRY+G", "TweenShowHide", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenShowHide = exports('TweenShowHide', (_dec = ccclass("TweenShowHide"), _dec2 = menu("tween/TweenShowHide"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenShowHide, _Component);
        function TweenShowHide() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenSH = void 0;
          return _this;
        }
        var _proto = TweenShowHide.prototype;
        _proto.onLoad = function onLoad() {
          /**
           * 注意 target 需要是 Node 的，才可以使用 show 和 hide
           */
          this.tweenSH = tween(this.node).delay(0.1).hide().delay(0.1).show().union().repeatForever();
        };
        _proto.onEnable = function onEnable() {
          this.tweenSH.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenSH.stop();
        };
        return TweenShowHide;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenStop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Quat, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "5372db1ch5D9rAE0w2hyKmg", "TweenStop", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenStop = exports('TweenStop', (_dec = ccclass("TweenStop"), _dec2 = menu("tween/TweenStop"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenStop, _Component);
        function TweenStop() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenStop = void 0;
          return _this;
        }
        var _proto = TweenStop.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          var scale = tween().to(1, {
            scale: new Vec3(3, 3, 3)
          });
          var rotate = tween().to(1, {
            rotation: new Quat(Math.sin(60), Math.sin(60), Math.sin(60), Math.cos(60))
          });
          this.tweenStop = tween(this.node).then(scale).call(function () {
            // 停止缓动
            _this2.tweenStop.stop();
          }).then(rotate);
        };
        _proto.onEnable = function onEnable() {
          this.tweenStop.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenStop.stop();
        };
        return TweenStop;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TweenThen.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class;
      cclegacy._RF.push({}, "41b6eByJ95GqoEm8dx4EHvo", "TweenThen", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var TweenThen = exports('TweenThen', (_dec = ccclass("TweenThen"), _dec2 = menu("tween/TweenThen"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TweenThen, _Component);
        function TweenThen() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.tweenThen = void 0;
          return _this;
        }
        var _proto = TweenThen.prototype;
        _proto.onLoad = function onLoad() {
          var scale = tween().to(1, {
            scale: new Vec3(2, 2, 2)
          });
          var rotate = tween().to(1, {
            eulerAngles: new Vec3(45, 45, 45)
          });
          var move = tween().to(1, {
            position: new Vec3(0, 5, 0)
          });

          // 先缩放，再旋转，再移动
          this.tweenThen = tween(this.node).then(scale).then(rotate).then(move);
        };
        _proto.onEnable = function onEnable() {
          this.tweenThen.start();
        };
        _proto.onDisable = function onDisable() {
          this.tweenThen.stop();
        };
        return TweenThen;
      }(Component)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-log.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, _decorator, Prefab, Vec3, instantiate, ScrollView, Layout, UITransform, Widget, safeMeasureText, fragmentText, Label, Component, Size;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Vec3 = module.Vec3;
      instantiate = module.instantiate;
      ScrollView = module.ScrollView;
      Layout = module.Layout;
      UITransform = module.UITransform;
      Widget = module.Widget;
      safeMeasureText = module.safeMeasureText;
      fragmentText = module.fragmentText;
      Label = module.Label;
      Component = module.Component;
      Size = module.Size;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "582baHkZuZBgLuu7k76+F1C", "ui-log", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var FIXED_HEIGHT = 20;
      var TOTAL_PADDING = 4;
      var UILog = exports('UILog', (_dec = ccclass("UILog"), _dec2 = menu('UI/UILog'), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UILog, _Component);
        function UILog() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "panel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "item", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "workOnLoad", _descriptor3, _assertThisInitialized(_this));
          _this.logPanel = null;
          _initializerDefineProperty(_this, "_size", _descriptor4, _assertThisInitialized(_this));
          _this._itemList = [];
          _this._itemPool = [];
          _this._context = null;
          _this._scrollView = null;
          _this._offset = new Vec3();
          _this._originPos = new Vec3();
          _this._layout = null;
          return _this;
        }
        var _proto = UILog.prototype;
        _proto.onLoad = function onLoad() {
          var canvas = document.createElement('canvas');
          this._context = canvas.getContext('2d');
          if (this._context) {
            this._context.font = FIXED_HEIGHT + "px Arial";
            this._context.lineWidth = FIXED_HEIGHT + 2;
          }
          if (this.workOnLoad) {
            this.initLog({
              isAlign: true,
              isAlignLeft: true,
              isAlignBottom: true,
              left: 50,
              bottom: 50
            });
          }
        };
        _proto.initLog = function initLog(config) {
          config = config || {
            isAlign: false
          };
          var panel = this.logPanel = instantiate(this.panel);
          panel.parent = this.node;
          var scrollView = panel.getComponent(ScrollView);
          this._scrollView = scrollView;
          this._layout = scrollView.content.getComponent(Layout);
          this._originPos.set(scrollView.content.position);
          this._originPos.y = this._size.height / 2;
          var transform = panel.getComponent(UITransform);
          transform.contentSize = this.size;
          if (config.pos) {
            panel.setPosition(config.pos);
          }
          if (!!config.isAlign) {
            var widget = panel.addComponent(Widget);
            widget.isAlignLeft = !!config.isAlignLeft;
            widget.isAlignBottom = !!config.isAlignBottom;
            widget.isAlignRight = !!config.isAlignRight;
            widget.isAlignTop = !!config.isAlignTop;
            widget.left = config.left || 0;
            widget.bottom = config.bottom || 0;
            widget.right = config.right || 0;
            widget.top = config.top || 0;
          }
          var mask = panel.getChildByName('view');
          var maskWidget = mask.addComponent(Widget);
          maskWidget.isAlignBottom = maskWidget.isAlignLeft = maskWidget.isAlignRight = maskWidget.isAlignTop = true;
          maskWidget.left = maskWidget.right = maskWidget.top = maskWidget.bottom = 0;
        };
        _proto.addLabel = function addLabel(str) {
          var _this$_context, _this$_layout;
          if (!this.item || !this.logPanel || str.length <= 0) {
            return;
          }
          var paragraphedStrings = str.split('\n');
          var spliteStrings = [];
          var maxWidth = this._size.width;
          (_this$_context = this._context) == null || _this$_context.clearRect(0, 0, maxWidth, this._size.height);
          for (var _iterator = _createForOfIteratorHelperLoose(paragraphedStrings), _step; !(_step = _iterator()).done;) {
            var para = _step.value;
            var allWidth = safeMeasureText(this._context, para);
            var textFragment = fragmentText(para, allWidth, maxWidth - TOTAL_PADDING, this._measureText());
            spliteStrings = spliteStrings.concat(textFragment);
          }
          var text = spliteStrings.join('\n');
          var item = this._allocItem();
          var content = this._scrollView ? this._scrollView.content : null;
          item.parent = content;
          var itemTransComp = item.getComponent(UITransform);
          var itemBgTransComp = item.children[0].getComponent(UITransform);
          itemBgTransComp.width = itemTransComp.width = maxWidth;
          var itemHeight = spliteStrings.length * (FIXED_HEIGHT + 2);
          itemBgTransComp.height = itemTransComp.height = itemHeight;
          var labelTransComp = item.children[1].getComponent(UITransform);
          labelTransComp.width = maxWidth - TOTAL_PADDING;
          labelTransComp.height = spliteStrings.length * FIXED_HEIGHT;
          var labelComp = labelTransComp.getComponent(Label);
          labelComp.string = text;
          (_this$_layout = this._layout) == null || _this$_layout.updateLayout();
          var conteTrans = content ? content.getComponent(UITransform) : null;
          if (conteTrans && conteTrans.height > this._size.height) {
            var _this$_scrollView;
            this._offset.set(0, conteTrans.height - this._size.height, 0);
            (_this$_scrollView = this._scrollView) == null || _this$_scrollView.scrollToOffset(this._offset, 0.5, true);
          }
        };
        _proto.clearLabel = function clearLabel() {
          for (var i = 0; i < this._itemList.length; i++) {
            var e = this._itemList[i];
            this._freeItem(e);
          }
          this._itemList.length = 0;
        };
        _proto._allocItem = function _allocItem() {
          if (this._itemPool.length > 0) {
            return this._itemPool.pop();
          }
          var root = instantiate(this.item);
          return root;
        };
        _proto._freeItem = function _freeItem(item) {
          this._itemPool.push(item);
        };
        _proto._measureText = function _measureText() {
          var ctx = this._context;
          return function (str) {
            return safeMeasureText(ctx, str);
          };
        };
        _createClass(UILog, [{
          key: "size",
          get: function get() {
            return this._size;
          },
          set: function set(value) {
            if (this._size.equals(value)) {
              return;
            }
            this._size.set(value);
            if (this.logPanel) {
              var transform = this.logPanel.getComponent(UITransform);
              transform.contentSize = this._size;
            }
          }
        }]);
        return UILog;
      }(Component), (_applyDecoratedDescriptor(_class2.prototype, "size", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "size"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "workOnLoad", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_size", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Size(100, 100);
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UniformKTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Animation, animation, AnimationClip, MeshRenderer, math, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      animation = module.animation;
      AnimationClip = module.AnimationClip;
      MeshRenderer = module.MeshRenderer;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "83558/TWJFKr7fv70/K70at", "UniformKTest", undefined);
      var ccclass = _decorator.ccclass;
      var UniformKTest = exports('UniformKTest', (_dec = ccclass('UniformKTest'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UniformKTest, _Component);
        function UniformKTest() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = UniformKTest.prototype;
        _proto.start = function start() {
          var testClip = this._makeTestClip(0);
          testClip.name = 'forward';
          var testClip2 = this._makeTestClip(1);
          testClip2.name = 'deferred';
          var animationComponent = this.node.addComponent(Animation);
          animationComponent.clips = [testClip, testClip2];
          animationComponent.defaultClip = testClip;
          //animationComponent.playOnLoad = true;
          var state1 = animationComponent.getState('forward');
          state1.play();
          var state2 = animationComponent.getState('deferred');
          state2.play();
        };
        _proto._makeTestClip = function _makeTestClip(passIndex) {
          var uniformValueAdapter = new animation.UniformProxyFactory();
          uniformValueAdapter.passIndex = passIndex;
          uniformValueAdapter.uniformName = 'albedo';
          var animationClip = new AnimationClip();
          animationClip.wrapMode = AnimationClip.WrapMode.Loop;
          animationClip.duration = 2.0;
          var track = new animation.ColorTrack();
          track.path.toHierarchy('Nested');
          track.path.toComponent(MeshRenderer);
          track.path.toProperty("sharedMaterials");
          track.path.toElement(0);
          track.proxy = uniformValueAdapter;
          var _track$channels = track.channels(),
            r = _track$channels[0],
            g = _track$channels[1],
            b = _track$channels[2],
            a = _track$channels[3];
          var keys = [0, 0.3, 0.5, 1.0, 1.7, 2.0];
          var colors = [new math.Color(0), new math.Color(10), new math.Color(70), new math.Color(80), new math.Color(150), new math.Color(255)];
          r.curve.assignSorted(keys, colors.map(function (c) {
            return c.r;
          }));
          g.curve.assignSorted(keys, colors.map(function (c) {
            return c.g;
          }));
          b.curve.assignSorted(keys, colors.map(function (c) {
            return c.b;
          }));
          a.curve.assignSorted(keys, colors.map(function (c) {
            return c.a;
          }));
          animationClip.addTrack(track);
          return animationClip;
        };
        return UniformKTest;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/unlit-quad.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, _createClass, cclegacy, _decorator, gfx, Vec3, SpriteFrame, Texture2D, Material, utils, builtinResMgr, ModelComponent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      gfx = module.gfx;
      Vec3 = module.Vec3;
      SpriteFrame = module.SpriteFrame;
      Texture2D = module.Texture2D;
      Material = module.Material;
      utils = module.utils;
      builtinResMgr = module.builtinResMgr;
      ModelComponent = module.ModelComponent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "39202sHQERK85gaOXtKVrbH", "unlit-quad", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var mesh = null;
      var vbInfo = null;
      var vbuffer = null;
      var material = null;
      var materialInfo = {
        effectName: 'builtin-unlit',
        technique: 0,
        defines: {
          USE_TEXTURE: true
        },
        states: {
          rasterizerState: {
            cullMode: gfx.CullMode.NONE
          }
        }
      };
      var default_uvs = [0, 1, 1, 1, 0, 0, 1, 0];
      var meshInfo = {
        positions: [-0.5, -0.5, 0,
        // bottom-left
        0.5, -0.5, 0,
        // bottom-right
        -0.5, 0.5, 0,
        // top-left
        0.5, 0.5, 0 // top-right
        ],

        uvs: default_uvs,
        indices: [0, 1, 2, 2, 1, 3],
        minPos: new Vec3(-0.5, -0.5, 0),
        maxPos: new Vec3(0.5, 0.5, 0)
      };
      var enableBlend = {
        blendState: {
          targets: [{
            blend: true,
            blendSrc: gfx.BlendFactor.SRC_ALPHA,
            blendDst: gfx.BlendFactor.ONE_MINUS_SRC_ALPHA,
            blendDstAlpha: gfx.BlendFactor.ONE_MINUS_SRC_ALPHA
          }]
        }
      };
      var UnlitQuadComponent = exports('UnlitQuadComponent', (_dec = ccclass('UnlitQuadComponent'), _dec2 = property(SpriteFrame), _dec3 = property(Texture2D), _dec4 = property({
        override: true,
        visible: false
      }), _dec5 = property({
        override: true,
        visible: false
      }), _dec6 = property({
        type: Texture2D
      }), _dec7 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_ModelComponent) {
        _inheritsLoose(UnlitQuadComponent, _ModelComponent);
        function UnlitQuadComponent() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _ModelComponent.call.apply(_ModelComponent, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "_sprite", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_texture", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "_transparent", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = UnlitQuadComponent.prototype;
        _proto.onLoad = function onLoad() {
          if (!material) {
            material = new Material();
            material.initialize(materialInfo);
            mesh = utils.createMesh(meshInfo);
            vbInfo = mesh.struct.vertexBundles[0].view;
            vbuffer = mesh.data.buffer.slice(vbInfo.offset, vbInfo.offset + vbInfo.length);
          }
          this.material = material;
          this._mesh = mesh;
          _ModelComponent.prototype.onLoad.call(this);
          this.updateTexture();
          this.transparent = this._transparent;
        };
        _proto.updateTexture = function updateTexture() {
          // update pass
          var pass = this.material && this.material.passes[0];
          var binding = pass && pass.getBinding('mainTexture');
          if (typeof binding !== 'number') {
            return;
          }
          var target = this._sprite ? this._sprite : this._texture ? this._texture : builtinResMgr.get('grey-texture');
          pass.bindTexture(binding, target.getGFXTexture());
          // update UV (handle atlas)
          var model = this.model && this.model.subModels[0];
          var ia = model && model.inputAssembler;
          if (!ia) {
            return;
          }
          var uv = default_uvs;
          if (this._sprite) {
            this._sprite._calculateUV();
            uv = this._sprite.uv;
          }
          var offset = 0;
          var format = gfx.Format.UNKNOWN;
          for (var _iterator = _createForOfIteratorHelperLoose(ia.attributes), _step; !(_step = _iterator()).done;) {
            var a = _step.value;
            if (a.name === gfx.AttributeName.ATTR_TEX_COORD) {
              format = a.format;
              break;
            }
            offset += gfx.FormatInfos[a.format].size;
          }
          var vb = ia.vertexBuffers[0];
          utils.writeBuffer(new DataView(vbuffer), uv, format, offset, vb.stride);
          vb.update(vbuffer);
        };
        _createClass(UnlitQuadComponent, [{
          key: "sharedMaterials",
          get: function get() {
            return _ModelComponent.prototype.sharedMaterials;
          },
          set: function set(val) {
            this.sharedMaterials = val;
          }
        }, {
          key: "mesh",
          get: function get() {
            return _ModelComponent.prototype.mesh;
          },
          set: function set(val) {
            this.mesh = val;
          }
        }, {
          key: "texture",
          get: function get() {
            return this._texture;
          },
          set: function set(val) {
            this._texture = val;
            this.updateTexture();
          }
        }, {
          key: "spriteFrame",
          get: function get() {
            return this._sprite;
          },
          set: function set(val) {
            this._sprite = val;
            this.updateTexture();
          }
        }, {
          key: "transparent",
          get: function get() {
            return this._transparent;
          },
          set: function set(val) {
            this._transparent = val;
            this.material.overridePipelineStates(val ? enableBlend : {});
          }
        }]);
        return UnlitQuadComponent;
      }(ModelComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_sprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_texture", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "sharedMaterials", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "sharedMaterials"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "mesh", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "mesh"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "texture", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "texture"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "spriteFrame", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "spriteFrame"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_transparent", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "transparent", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "transparent"), _class2.prototype)), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/use-render-texture-asset.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, RenderTexture, Sprite, Camera, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RenderTexture = module.RenderTexture;
      Sprite = module.Sprite;
      Camera = module.Camera;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "07d94W9KPNNpZuDMYnjBRSX", "use-render-texture-asset", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var UseRenderTextureAsset = exports('UseRenderTextureAsset', (_dec = ccclass("UseRenderTextureAsset"), _dec2 = menu('RenderTexture/UseRenderTextureAsset'), _dec3 = property(RenderTexture), _dec4 = property(Sprite), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UseRenderTextureAsset, _Component);
        function UseRenderTextureAsset() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "render", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "content", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = UseRenderTextureAsset.prototype;
        _proto.start = function start() {
          var renderTex = this.render;
          var camera = this.getComponent(Camera);
          camera.targetTexture = renderTex;
          var spriteFrame = this.content.spriteFrame;
          var sp = new SpriteFrame();
          sp.reset({
            originalSize: spriteFrame.originalSize,
            rect: spriteFrame.rect,
            offset: spriteFrame.offset,
            isRotate: spriteFrame.rotated
          });
          sp.texture = renderTex;
          this.content.spriteFrame = sp;
          this.content.updateMaterial();
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return UseRenderTextureAsset;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "render", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/use-render-texture-to-model.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _extends, cclegacy, _decorator, MeshRenderer, RenderTexture, Material, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      RenderTexture = module.RenderTexture;
      Material = module.Material;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "273937WXQBIKKGFsZAzGHKx", "use-render-texture-to-model", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var UseRenderTextureToModel = exports('UseRenderTextureToModel', (_dec = ccclass('UseRenderTextureToModel'), _dec2 = property(MeshRenderer), _dec3 = property(RenderTexture), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UseRenderTextureToModel, _Component);
        function UseRenderTextureToModel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "quad", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rtTexture", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = UseRenderTextureToModel.prototype;
        _proto.start = function start() {
          var _this2 = this;
          // Your initialization goes here.
          this.scheduleOnce(function () {
            var material = _this2.quad.getMaterialInstance(0);
            if (!material) {
              return;
            }
            var defines = _extends({
              SAMPLE_FROM_RT: true
            }, material.passes[0].defines);
            var renderMat = new Material();
            renderMat.initialize({
              effectAsset: material.effectAsset,
              technique: material.technique,
              defines: defines
            });
            _this2.quad.setMaterialInstance(0, renderMat);
            renderMat.setProperty('mainTexture', _this2.rtTexture, 0);
          }, 3);
        }

        // update (deltaTime: number) {
        //     // Your update function goes here.
        // }
        ;

        return UseRenderTextureToModel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "quad", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rtTexture", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/use-render-texture-to-sprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, RenderTexture, SpriteFrame, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RenderTexture = module.RenderTexture;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "977eavsJ0tLkJ4Oyd3LtHF5", "use-render-texture-to-sprite", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var UseRenderTextureToSprite = exports('UseRenderTextureToSprite', (_dec = ccclass('UseRenderTextureToSprite'), _dec2 = property(RenderTexture), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UseRenderTextureToSprite, _Component);
        function UseRenderTextureToSprite() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "render", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = UseRenderTextureToSprite.prototype;
        _proto.start = function start() {
          var renderTex = this.render;
          var spriteFrame = new SpriteFrame();
          spriteFrame.texture = renderTex;
          var sprite = this.getComponent(Sprite);
          sprite.spriteFrame = spriteFrame;
          // 引擎内部结构调整，需要手动调用材质更新，下个测试包代码会从Sprite内部调整
          sprite.updateMaterial();
        };
        return UseRenderTextureToSprite;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "render", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('isEmptyObject', isEmptyObject);
      cclegacy._RF.push({}, "04e49novIVI34Kk+WZjsnZW", "Utils", undefined);
      function isEmptyObject(obj) {
        for (var i in obj) {
          return false;
        }
        return true;
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/video-player-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, VideoClip, VideoPlayer, Label, Slider, Node, sys, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      VideoClip = module.VideoClip;
      VideoPlayer = module.VideoPlayer;
      Label = module.Label;
      Slider = module.Slider;
      Node = module.Node;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
      cclegacy._RF.push({}, "94e230TPKRPMqKKeFyoIO/J", "video-player-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var VideoPlayerCtrl = exports('VideoPlayerCtrl', (_dec = ccclass('VideoPlayerCtrl'), _dec2 = type(VideoClip), _dec3 = type(VideoPlayer), _dec4 = type(Label), _dec5 = type(Label), _dec6 = type(Slider), _dec7 = type(Node), _dec8 = type(Node), _dec9 = type(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VideoPlayerCtrl, _Component);
        function VideoPlayerCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "videClip", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "videoPlayer", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "playbackRate", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "stayOnBottom", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "slider", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "stayOnBottomTips", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "noSupport", _descriptor7, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "platform", _descriptor8, _assertThisInitialized(_this));
          _this._playbackRate = 0;
          return _this;
        }
        var _proto = VideoPlayerCtrl.prototype;
        _proto.start = function start() {
          // 隐藏不支持 video player 的平台
          switch (sys.platform) {
            case sys.Platform.MACOS:
            case sys.Platform.ALIPAY_MINI_GAME:
            // case sys.Platform.BYTEDANCE_MINI_GAME:
            case sys.Platform.COCOSPLAY:
            case sys.Platform.HUAWEI_QUICK_GAME:
            case sys.Platform.VIVO_MINI_GAME:
            case sys.Platform.MIGU_MINI_GAME:
            case sys.Platform.HONOR_MINI_GAME:
            case sys.Platform.XIAOMI_QUICK_GAME:
            case sys.Platform.BAIDU_MINI_GAME:
            case sys.Platform.LINKSURE_MINI_GAME:
            case sys.Platform.QTT_MINI_GAME:
            case sys.Platform.WIN32:
              this.noSupport.active = true;
              this.videoPlayer.node.active = false;
              break;
          }
          this.platform.string = "platform: " + sys.platform;
        };
        _proto.onStayOnBottom = function onStayOnBottom() {
          this.videoPlayer.stayOnBottom = !this.videoPlayer.stayOnBottom;
          var state = this.videoPlayer.stayOnBottom ? '关闭' : '打开';
          this.stayOnBottom.string = state + " stayOnBottom";
          this.stayOnBottomTips.active = this.videoPlayer.stayOnBottom;
        };
        _proto.onPlaybackRate = function onPlaybackRate() {
          var playbackRates = [];
          if (sys.platform === sys.BYTEDANCE_MINI_GAME || sys.platform === sys.WECHAT_GAME) {
            // The rate at which the WeChat mini-game and douyin platform  is played is fixed at a few values。
            if (sys.platform === sys.WECHAT_GAME) {
              // https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.playbackRate.html
              playbackRates = [1.0, 1.25, 1.5, 0.5, 0.8];
            } else if (sys.platform === sys.BYTEDANCE_MINI_GAME) {
              // https://developer.open-douyin.com/docs/resource/zh-CN/mini-game/develop/api/media/video/video
              // Douyin mini-games do not yet support settings
              playbackRates = [1.0];
            }
          } else {
            playbackRates = [1.0, 2.0, 3.0];
          }
          this._playbackRate += 1;
          this._playbackRate = this._playbackRate % playbackRates.length;
          this.videoPlayer.playbackRate = playbackRates[this._playbackRate];
          this.playbackRate.string = "x" + playbackRates[this._playbackRate];
        };
        _proto.onSlider = function onSlider(slider) {
          this.videoPlayer.currentTime = slider.progress * this.videoPlayer.duration;
        };
        _proto.onPlayLocalVideo = function onPlayLocalVideo() {
          this.videoPlayer.resourceType = VideoPlayer.ResourceType.LOCAL;
          if (this.videoPlayer.clip !== this.videClip) {
            this.videoPlayer.clip = this.videClip;
          }
          if (!this.videoPlayer.isPlaying) {
            this.videoPlayer.play();
          }
        };
        _proto.onPlayRemoteVideo = function onPlayRemoteVideo() {
          this.videoPlayer.resourceType = VideoPlayer.ResourceType.REMOTE;
          var remoteURL = 'https://download.cocos.org/CocosTest/test-case/movie.mp4';
          if (this.videoPlayer.remoteURL !== remoteURL) {
            this.videoPlayer.remoteURL = remoteURL;
          }
          if (!this.videoPlayer.isPlaying) {
            this.videoPlayer.play();
          }
        };
        _proto.onEventType = function onEventType(target, type) {
          switch (type) {
            case VideoPlayer.EventType.READY_TO_PLAY:
              {
                if (!this.videoPlayer.isPlaying) {
                  this.videoPlayer.play();
                }
                break;
              }
          }
        };
        _proto.update = function update() {
          this.slider.progress = this.videoPlayer.currentTime / this.videoPlayer.duration;
        };
        return VideoPlayerCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "videClip", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "videoPlayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "playbackRate", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stayOnBottom", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "slider", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "stayOnBottomTips", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "noSupport", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "platform", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/VietnameseText.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Label, instantiate, Button, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      instantiate = module.instantiate;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "54840w6jdBA04OnbcmGl51n", "VietnameseText", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TEXTS = ['Bạn không thể nhận phần thưởng do có vật phẩm đã đầy! Phần thưởng sẽ được lưu trữ ở hộp thư, sau 15 ngày nếu không nhận thì phần thưởng phải bị thu hồi', 'Bộ Cá bơn (danh pháp khoa học: Pleuronectiformes), còn gọi là cá thờn bơn, cá thân bẹt, là một bộ cá trong số các loài cá vây tia, còn được gọi là Heterosomata, đôi khi được phân loại như là phân bộ của Perciformes. Tên gọi này có nghĩa là "bơi bằng lườn" trong tiếng Hy Lạp. Đặc điểm nổi bật của nhiều loài cá trong bộ này là có cả hai mắt nằm ở một mặt bên của đầu (còn mặt bên kia thì không có mắt nào cả); trên thực tế lúc mới sinh cá thân bẹt có 2 mắt nằm 2 bên đầu như các loài cá thông thường nhưng trong quá trình phát triển thì một mắt dần dần chuyển sang mặt bên kia. Một số loài quay mặt "trái" lên trên, một số khác lại quay mặt "phải" lên trên, còn các loài còn lại thì khi thì quay mặt này, khi thì quay mặt kia lên trên.', 'Trong giải tích toán học, đạo hàm của một hàm số là một đại lượng mô tả sự biến thiên của hàm tại một điểm nào đó. Đạo hàm là một khái niệm cơ bản trong giải tích. Chẳng hạn, trong vật lý, đạo hàm biểu diễn vận tốc tức thời của một điểm chuyển động hoặc cường độ dòng điện tức thời tại một điểm trên dây dẫn.', 'Gấu trúc đỏ có bộ lông màu nâu đỏ, đuôi dài, xù xì và dáng đi lạch bạch do hai chân trước ngắn hơn; nó gần bằng kích thước của một con mèo nhà, mặc dù có cơ thể dài hơn và có phần nặng hơn. Nó là động vật ăn thực vật và chủ yếu ăn tre, nhưng cũng ăn trứng, chim và côn trùng. Nó là một loài động vật sống đơn độc, chủ yếu hoạt động từ hoàng hôn đến bình minh, và phần lớn ít vận động vào ban ngày. Nó còn được gọi là gấu trúc nhỏ và gấu mèo đỏ.', 'Tích vô hướng (tên tiếng Anh: dot product hoặc scalar product) là một phép toán đại số lấy hai chuỗi số có độ dài bằng nhau (thường là các vectơ tọa độ) và cho kết quả là một số. Trong hình học Euclid, tích vô hướng với tọa độ Descartes của hai vectơ thường được sử dụng. Tích vô hướng cũng thường được gọi là tích trong Euclid dù nó không phải là loại tích trong duy nhất có thể được định nghĩa trong không gian Euclid (xem thêm tại Không gian tích trong).', 'Mùa sưu đến, chị Dậu phải chạy vạy khắp nơi vay tiền để nộp cho chồng, nhưng không kiếm đâu ra. Anh Dậu dù bị ốm nhưng vẫn bị bọn cai lệ cùm kẹp lôi ra giam ở đình làng. Cuối cùng, bần cùng quá, chị buộc lòng phải dứt ruột bán đi cái Tí, đứa con gái đầu lòng 7 tuổi ngoan ngoãn, hiếu thảo và ổ chó mới đẻ chưa kịp mở mắt cho vợ chồng lão Nghị Quế bên thôn Đoài để lấy hai đồng nộp sưu. Nhưng vừa đủ tiền nộp xong suất sưu cho chồng, bọn cai trong làng lại ép chị nộp cả tiền sưu cho em trai anh Dậu với lý do chết ở năm ta nhưng lúc đó lịch năm tây đã sang năm mới. Vậy là anh Dậu vẫn bị bắt không được về nhà.', 'Cá voi sát thủ linh hoạt, nhanh nhẹn và là một loài động vật ăn thịt thông minh. Một số ăn cá, một số săn các loài thú biển như sư tử biển, hải cẩu, cá voi và cả loài cá mập trắng lớn cũng là nạn nhân của nó. Nó là loài săn mồi đỉnh cao ở đại dương và không có kẻ thù tự nhiên xứng tầm nào ngoài con người. Có thể có đến 5 loại cá heo voi khác nhau, một số có thể tách thành các giống, phụ thậm chí là tách thành loài riêng biệt. Cá voi sát thủ là loài có tổ chức xã hội cao, một số theo chế độ mẫu hệ, bền vững hơn bất kì loài thú nào khác, tất nhiên là trừ loài người. Cách cư xử xã hội phức tạp, kỹ thuật săn mồi, âm thanh giao tiếp của cá heo voi được coi là một nét văn hóa của chúng.', 'Khi bắt đầu sự nghiệp của mình, Einstein đã nhận ra cơ học Newton không còn có thể thống nhất các định luật của cơ học cổ điển với các định luật của trường điện từ. Từ đó ông phát triển thuyết tương đối đặc biệt, với các bài báo đăng trong năm 1905. Tuy nhiên, ông nhận thấy nguyên lý tương đối có thể mở rộng cho cả trường hấp dẫn, và điều này dẫn đến sự ra đời của lý thuyết về hấp dẫn trong năm 1916, năm ông xuất bản một bài báo về thuyết tương đối tổng quát. Ông tiếp tục nghiên cứu các bài toán của cơ học thống kê và lý thuyết lượng tử, trong đó đưa ra những giải thích về lý thuyết hạt và sự chuyển động của các phân tử.', 'Tự kỷ ám thị (tự mình che mắt) hay tự thôi miên (Autosuggestion) tự tâm niệm là thuật ngữ đề cập đến tất cả những hình thức tự kích thích và khuyến khích bản thân qua năm giác quan của con người, là quá trình tự tâm niệm, tự khích lệ. Tự kỷ ám thị đóng vai trò cầu nối giữ một bên là phần ý thức tạo ra tư duy và một bên là phần tiềm thức tạo ra hành động. Thông qua những suy nghĩ chi phối tâm trí bấy lâu nay vẫn tồn tại trong ý thức (không quan trọng đó là những ý nghĩ tích cực hay tiêu cực), những nguyên tắc của tự kỷ ám thị sẽ chạm đến tiềm thức của con người và tác động đến tiềm thức bằng những suy nghĩ đó.[1] Trong tiếng Việt, tự kỷ ám thị là một từ ghép giữa tự kỷ và ám thị hay còn gọi là tự thôi miên.'];
      var VietnameseText = exports('VietnameseText', (_dec = ccclass('VietnameseText'), _dec2 = property(Node), _dec3 = property(Prefab), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VietnameseText, _Component);
        function VietnameseText() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "btnContainer", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "btnPrefab", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "previewLabel", _descriptor3, _assertThisInitialized(_this));
          _this.isLoadButton = false;
          return _this;
        }
        var _proto = VietnameseText.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          TEXTS.forEach(function (_, idx) {
            var node = instantiate(_this2.btnPrefab);
            node.getComponentInChildren(Label).string = "Text " + (idx + 1);
            node.on(Button.EventType.CLICK, function () {
              _this2.previewLabel.string = TEXTS[idx];
            });
            _this2.btnContainer.addChild(node);
          });
          this.isLoadButton = true;
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return VietnameseText;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "previewLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/visibility-changed.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "4718c1lvcRNgoBh13xZK3lW", "visibility-changed", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var VisibilityChanged = exports('VisibilityChanged', (_dec = ccclass("VisibilityChanged"), _dec2 = menu('UI/VisibilityChanged'), _dec3 = property(Node), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(VisibilityChanged, _Component);
        function VisibilityChanged() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "target", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = VisibilityChanged.prototype;
        _proto.start = function start() {
          var _this2 = this;
          this.scheduleOnce(function () {
            _this2.node.setParent(_this2.target);
            _this2.node.walk(function (child) {
              child.layer = _this2.target.layer;
            });
          }, 1);
        };
        return VisibilityChanged;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/webview-ctrl.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, WebView, Label, Node, sys, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      WebView = module.WebView;
      Label = module.Label;
      Node = module.Node;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
      cclegacy._RF.push({}, "802edHUpoRJ75rf3RFyK+c0", "webview-ctrl", undefined);
      var ccclass = _decorator.ccclass,
        type = _decorator.type;
      var WebviewCtrl = exports('WebviewCtrl', (_dec = ccclass('WebviewCtrl'), _dec2 = type(WebView), _dec3 = type(Label), _dec4 = type(Node), _dec5 = type(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WebviewCtrl, _Component);
        function WebviewCtrl() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "webview", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "eventTips", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "noSupport", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "platform", _descriptor4, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = WebviewCtrl.prototype;
        _proto.start = function start() {
          // 隐藏不支持 video player 的平台
          switch (sys.platform) {
            case sys.Platform.MACOS:
            case sys.Platform.ALIPAY_MINI_GAME:
            case sys.Platform.BYTEDANCE_MINI_GAME:
            case sys.Platform.COCOSPLAY:
            case sys.Platform.HUAWEI_QUICK_GAME:
            case sys.Platform.OPPO_MINI_GAME:
            case sys.Platform.VIVO_MINI_GAME:
            case sys.Platform.MIGU_MINI_GAME:
            case sys.Platform.HONOR_MINI_GAME:
            case sys.Platform.XIAOMI_QUICK_GAME:
            case sys.Platform.BAIDU_MINI_GAME:
            case sys.Platform.WECHAT_GAME:
            case sys.Platform.LINKSURE_MINI_GAME:
            case sys.Platform.QTT_MINI_GAME:
            case sys.Platform.WIN32:
              this.noSupport.active = true;
              this.webview.node.active = false;
              break;
          }
          this.platform.string = "platform: " + sys.platform;
        };
        _proto.onGoTo = function onGoTo() {
          this.webview.url = 'https://docs.cocos.com/creator/manual/zh/';
        };
        _proto.onEventTypes = function onEventTypes(target, eventType) {
          this.eventTips.string = '触发事件：' + eventType;
        };
        return WebviewCtrl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "webview", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventTips", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "noSupport", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "platform", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/widget-destroy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Label, Vec3, find, Widget, instantiate, director, widgetManager, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Label = module.Label;
      Vec3 = module.Vec3;
      find = module.find;
      Widget = module.Widget;
      instantiate = module.instantiate;
      director = module.director;
      widgetManager = module.widgetManager;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "c5e6bCykblPn6fE7lnHQtss", "widget-destroy", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var WidgetDestroy = exports('WidgetDestroy', (_dec = ccclass("WidgetDestroy"), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Label
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WidgetDestroy, _Component);
        function WidgetDestroy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "defaultPre", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "coinNumber", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "activeWidgetNum", _descriptor3, _assertThisInitialized(_this));
          _this.movePos = new Vec3(-200, 0, 0);
          _this.persistRootNodeWidgetCount = 0;
          return _this;
        }
        var _proto = WidgetDestroy.prototype;
        _proto.start = function start() {
          var persistRootNode = find("backRoot");
          if (persistRootNode) {
            var widgetArr = persistRootNode.getComponentsInChildren(Widget);
            for (var i = 0; i < widgetArr.length; i++) {
              if (widgetArr[i].enabled && widgetArr[i].node.active) {
                this.persistRootNodeWidgetCount += 1;
              }
            }
          }
        };
        _proto.createPrefab = function createPrefab() {
          var item = instantiate(this.defaultPre);
          this.node.addChild(item);
          this.schedule(this.updateLabel, 0.5);
        };
        _proto.destroyThenCreate = function destroyThenCreate() {
          if (this.node.children.length < 1) {
            return;
          }
          this.node.children[this.node.children.length - 1].destroy();
          this.createPrefab();
        };
        _proto.moveRoot = function moveRoot() {
          this.movePos.x += 20;
          this.node.setPosition(this.movePos);
        };
        _proto.updateLabel = function updateLabel() {
          this.coinNumber.string = 'The Coin Num is:' + director.getScene().children[2].children[3].children.length;
          this.activeWidgetNum.string = 'The active Widget Num is:' + (widgetManager._activeWidgetsIterator.length - this.persistRootNodeWidgetCount);
          // 此处的 6 为当前场景非create出的组件的widget数量
          // 提示中的 activeNode 和 iconNum 的差值为常驻节点的激活的 widget 数量（目前为5）
        };

        return WidgetDestroy;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "defaultPre", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coinNumber", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "activeWidgetNum", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/widget-preformance.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, SpriteFrame, instantiate, Sprite, Widget, Color, UITransform, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      SpriteFrame = module.SpriteFrame;
      instantiate = module.instantiate;
      Sprite = module.Sprite;
      Widget = module.Widget;
      Color = module.Color;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "c4ef3eRVBJBtpMR5pXx2QQZ", "widget-preformance", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property,
        menu = _decorator.menu;
      var WidgetPreformance = exports('WidgetPreformance', (_dec = ccclass("WidgetPreformance"), _dec2 = menu('UI/WidgetPreformance'), _dec3 = property(Prefab), _dec4 = property(SpriteFrame), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WidgetPreformance, _Component);
        function WidgetPreformance() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "performancePrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bgTex", _descriptor2, _assertThisInitialized(_this));
          _this.nodeA = null;
          _this.curSize = 0;
          _this.unitSize = 20;
          _this.maxSize = 200;
          return _this;
        }
        var _proto = WidgetPreformance.prototype;
        _proto.start = function start() {
          var i = 0;
          this.nodeA = instantiate(this.performancePrefab);
          this.node.addChild(this.nodeA);
          var sprite = this.nodeA.getComponent(Sprite);
          sprite.spriteFrame = this.bgTex;
          var arr = [true, false];
          for (i = 0; i < 500; i++) {
            var child = instantiate(this.performancePrefab);
            child.name = "layer_" + (i + 1);
            this.nodeA.addChild(child);
            var childWidgetComp = child.getComponent(Widget);
            childWidgetComp.isAlignTop = true;
            var bol = arr[Math.floor(Math.random() * arr.length)];
            childWidgetComp.isAlignLeft = bol;
            bol = arr[Math.floor(Math.random() * arr.length)];
            childWidgetComp.isAlignBottom = true;
            childWidgetComp.isAlignRight = bol;
            childWidgetComp.top = 0;
            childWidgetComp.left = Math.random() * 200;
            childWidgetComp.bottom = 0;
            childWidgetComp.right = Math.random() * 150;
            var renderComp = child.getComponent(Sprite);
            renderComp.color = new Color(Math.random() * 255, Math.random() * 255, Math.random() * 255, 255);
          }
          var uiTrans = this.nodeA.getComponent(UITransform);
          var size = uiTrans.contentSize;
          uiTrans.setContentSize(size.width, 0);
          this.schedule(this.adjustWidget, 0.5);
        };
        _proto.onDisable = function onDisable() {
          this.unschedule(this.adjustWidget);
        };
        _proto.adjustWidget = function adjustWidget() {
          var uiTrans = this.nodeA.getComponent(UITransform);
          var size = uiTrans.contentSize;
          this.curSize = (this.curSize + this.unitSize) % this.maxSize;
          uiTrans.setContentSize(size.width, this.curSize);
        };
        return WidgetPreformance;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "performancePrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bgTex", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/wire-frame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Material, gfx, Vec4, MeshRenderer, utils, primitives, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      gfx = module.gfx;
      Vec4 = module.Vec4;
      MeshRenderer = module.MeshRenderer;
      utils = module.utils;
      primitives = module.primitives;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "b4f9555Y+ZOYbMoZ8HBVqT8", "wire-frame", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var wireFrame = exports('wireFrame', (_dec = ccclass('wireFrame'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(wireFrame, _Component);
        function wireFrame() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = wireFrame.prototype;
        _proto.onEnable = function onEnable() {
          if (wireFrame.lineMat == null) {
            wireFrame.lineMat = new Material();
            wireFrame.lineMat.initialize({
              effectName: 'builtin-unlit',
              states: {
                primitive: gfx.PrimitiveMode.LINE_LIST
              }
            });
            wireFrame.lineMat.setProperty('mainColor', new Vec4(0, 0, 0, 1));
          }
          var model = this.getComponent(MeshRenderer);
          if (model && model.mesh && model.mesh.subMeshCount > 0) {
            var newModel = this.addComponent(MeshRenderer);
            var geo = {
              positions: model.mesh.renderingSubMeshes[0].geometricInfo.positions.slice(),
              indices: model.mesh.renderingSubMeshes[0].geometricInfo.indices.slice()
            };
            var mesh = utils.createMesh(primitives.wireframed(geo));
            newModel.material = wireFrame.lineMat;
            newModel.mesh = mesh;
          }
        };
        return wireFrame;
      }(Component), _class2.lineMat = null, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,