[1,["e695f9b0-2ab2-46ae-9874-e26e417a39eb","1263d74c-8167-4928-91a6-4e2672411f47@17020","c228b542-60a9-4db6-93f4-40cc98ccda4d","a0fbdafc-797e-4f5f-9b54-d35973a024dd@b47c0","7ddc9023-3d44-4be7-bc31-f20790dda4ba","a92a9894-6777-4ee6-9fc0-9a8a9d94b86d","49ce9353-b4c8-4cd6-b1bb-e8ad1169a0ef","56722c8e-654c-4952-bbcf-b4f976c234a6","1263d74c-8167-4928-91a6-4e2672411f47@fc873","c8f66d17-351a-48da-a12c-0212d28575c4"],["node","root","_mesh","asset","data","scene","_envmapHDR","_envmapLDR","_targetTexture","effect","_effectAsset"],[["cc.Node",["_name","_id","_layer","_objFlags","__editorExtras__","_components","_parent","_lpos","_prefab","_children","_lrot","_euler","_lscale"],-2,9,1,5,4,2,5,5,5],"cc.ImageAsset",["cc.Camera",["_clearFlags","_visibility","_name","_fov","_near","_far","node","_color","__prefab","_targetTexture"],-3,1,5,4,6],["cc.SphereLight",["_size","_luminanceHDR","_luminanceLDR","_range","_name","node","_staticSettings"],-2,1,4],["cc.SpotLight",["_size","_luminanceHDR","_luminanceLDR","_range","_spotAngle","_shadowBias","_name","node","_staticSettings"],-4,1,4],["cc.MeshRenderer",["_name","node","_materials","bakeSettings","_mesh","__prefab"],2,1,3,4,6,4],"cc.TextureCube","cc.RenderTexture",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","autoReleaseAssets","_children","_prefab","_globals"],1,2,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumHDR","_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],1,5,5,5,5],["cc.ShadowsInfo",["_size"],3,5],["cc.SkyboxInfo",["_envLightingType","_enabled","_envmapHDR","_envmapLDR"],1,6,6],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.SkinInfo",[],3],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["6bb243zHfFJi4MLeBdak3WZ",["node"],3,1],["445598TP61LhoVLGOAdP05g",["node"],3,1],["cc.StaticLightSettings",[],3],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,4],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["cc.TargetInfo",["localID"],2],["cc.ModelBakeSettings",[],3],["cc.Prefab",["_name"],2],["41074J7W0lCe40VLTiO+Uxi",["node","__prefab","effect"],3,1,4,6],["cc.CompPrefabInfo",["fileId"],2],["bd5838x//xGMYENw1vAlfIM",["node","__prefab"],3,1,4],["cc.Material",["_name","_states","_defines","_props"],0,12]],[[29,0,2],[28,0,1,2,3],[30,1],[12,0,1,2,3,4,5,4],[0,3,4,6,8,3],[26,0,1,2,3],[0,0,6,5,7,12,2],[25,1],[27,0,1,2,2],[5,0,1,2,3,4,2],[33,0,2],[13,0,1,2,3,4,5,5],[0,0,1,6,9,5,7,3],[0,0,1,6,9,5,7,10,11,3],[31,0,2],[8,0,1,2,4],[9,0,2],[10,0,1,2,3,4,3],[11,0,1,2,3,4,5,6],[14,0,1,2,3,4,5,6,7,1],[15,0,1,2,3,4,5,3],[16,0,1],[17,0,1,2,3,3],[18,0,1],[19,1],[20,1],[21,1],[22,1],[0,0,1,6,5,7,10,11,3],[0,0,2,9,5,8,3],[0,0,2,6,5,8,3],[0,0,5,8,2],[23,0,1],[2,0,1,6,7,3],[2,2,3,4,5,0,1,6,8,7,9,7],[24,0,1],[3,4,0,1,2,3,5,6,6],[3,0,1,2,3,5,6,5],[4,6,0,1,2,3,4,5,7,8,8],[4,0,1,2,3,4,5,7,8,7],[5,0,1,5,2,3,4,2],[32,0,1,2,1],[34,0,1,1],[35,0,1,2,3,4]],[[[[15,"../cases/material/pre-filter-envmap/pre-filter-envmap",[{"hash":3134140720,"name":"../cases/material/pre-filter-envmap/pre-filter-envmap|pre-filter-vs:vert|pre-filter-fs:frag","blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"roughness","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constant","stageFlags":16,"binding":0,"members":[{"name":"roughness","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[{"name":"cc_environment","typename":"samplerCube","type":31,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"global"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout vec3 worldPos;\nvec4 vert () {\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  worldPos = position.xyz;\n  return cc_matViewProj * cc_matWorld * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n}\nuniform samplerCube cc_environment;\nin vec3 worldPos;\nlayout(std140) uniform Constant {\n  float roughness;\n};\nfloat DistributionGGX (vec3 N, vec3 H, float roughness) {\n  float a = roughness * roughness;\n  float a2 = a * a;\n  float NdotH = max(dot(N, H), 0.0);\n  float NdotH2 = NdotH * NdotH;\n  float nom = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = PI * denom * denom;\n  return nom / denom;\n}\nfloat VanDerCorpus (int n, int base) {\n  float invBase = 1.0 / float(base);\n  float denom   = 1.0;\n  float result  = 0.0;\n  for (int i = 0; i < 32; i++) {\n    if (n > 0) {\n      denom   = mod(float(n), 2.0);\n      result += denom * invBase;\n      invBase = invBase / 2.0;\n      n       = int(float(n) / 2.0);\n    }\n  }\n  return result;\n}\nvec2 HammersleyNoBitOps (int i, int N) {\n  return vec2(float(i) / float(N), VanDerCorpus(i, 2));\n}\nvec3 ImportanceSampleGGX (vec2 Xi, vec3 N, float roughness) {\n  float a = roughness * roughness;\n  float phi = 2.0 * PI * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n  vec3 H;\n  H.x = cos(phi) * sinTheta;\n  H.y = sin(phi) * sinTheta;\n  H.z = cosTheta;\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n}\nvec4 frag () {\n  vec3 N = normalize(worldPos);\n  vec3 R = N;\n  vec3 V = R;\n  const int SAMPLE_COUNT = 1024;\n  vec3 prefilteredColor = vec3(0.0);\n  float totalWeight = 0.0;\n  for(int i = 0; i < SAMPLE_COUNT; i++) {\n    vec2 Xi = HammersleyNoBitOps(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0) {\n      float D   = DistributionGGX(N, H, roughness);\n      float NdotH = max(dot(N, H), 0.0);\n      float HdotV = max(dot(H, V), 0.0);\n      float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n      float resolution = 512.0;\n      float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);\n      float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);\n      float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);\n      vec4 envmap = fragTextureLod(cc_environment, L, mipLevel);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      prefilteredColor += env * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n  #if CC_USE_IBL == 2\n    float v = max(max(prefilteredColor.r, prefilteredColor.g), prefilteredColor.b);\n    float e = ceil(log(v) / log(1.1));\n    float s = 1.0 / pow(1.1, e);\n    return vec4(prefilteredColor * s, e * (1.0 / 255.0) + (128.0 / 255.0));\n  #else\n    return vec4(LinearToSRGB(prefilteredColor), 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nvarying vec3 worldPos;\nvec4 vert () {\n  vec4 position;\n    position = vec4(a_position, 1.0);\n  worldPos = position.xyz;\n  return cc_matViewProj * cc_matWorld * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\nuniform samplerCube cc_environment;\nvarying vec3 worldPos;\n   uniform float roughness;\nfloat DistributionGGX (vec3 N, vec3 H, float roughness) {\n  float a = roughness * roughness;\n  float a2 = a * a;\n  float NdotH = max(dot(N, H), 0.0);\n  float NdotH2 = NdotH * NdotH;\n  float nom = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = PI * denom * denom;\n  return nom / denom;\n}\nfloat VanDerCorpus (int n, int base) {\n  float invBase = 1.0 / float(base);\n  float denom   = 1.0;\n  float result  = 0.0;\n  for (int i = 0; i < 32; i++) {\n    if (n > 0) {\n      denom   = mod(float(n), 2.0);\n      result += denom * invBase;\n      invBase = invBase / 2.0;\n      n       = int(float(n) / 2.0);\n    }\n  }\n  return result;\n}\nvec2 HammersleyNoBitOps (int i, int N) {\n  return vec2(float(i) / float(N), VanDerCorpus(i, 2));\n}\nvec3 ImportanceSampleGGX (vec2 Xi, vec3 N, float roughness) {\n  float a = roughness * roughness;\n  float phi = 2.0 * PI * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n  vec3 H;\n  H.x = cos(phi) * sinTheta;\n  H.y = sin(phi) * sinTheta;\n  H.z = cosTheta;\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n}\nvec4 frag () {\n  vec3 N = normalize(worldPos);\n  vec3 R = N;\n  vec3 V = R;\n  const int SAMPLE_COUNT = 1024;\n  vec3 prefilteredColor = vec3(0.0);\n  float totalWeight = 0.0;\n  for(int i = 0; i < SAMPLE_COUNT; i++) {\n    vec2 Xi = HammersleyNoBitOps(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0) {\n      float D   = DistributionGGX(N, H, roughness);\n      float NdotH = max(dot(N, H), 0.0);\n      float HdotV = max(dot(H, V), 0.0);\n      float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n      float resolution = 512.0;\n      float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);\n      float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);\n      float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);\n      vec4 envmap = fragTextureLod(cc_environment, L, mipLevel);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      prefilteredColor += env * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n  #if CC_USE_IBL == 2\n    float v = max(max(prefilteredColor.r, prefilteredColor.g), prefilteredColor.b);\n    float e = ceil(log(v) / log(1.1));\n    float s = 1.0 / pow(1.1, e);\n    return vec4(prefilteredColor * s, e * (1.0 / 255.0) + (128.0 / 255.0));\n  #else\n    return vec4(LinearToSRGB(prefilteredColor), 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_environment","defines":[]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SURFACES_ENABLE_DEBUG_VIEW","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]}]}],[{"passes":[{"program":"../cases/material/pre-filter-envmap/pre-filter-envmap|pre-filter-vs:vert|pre-filter-fs:frag","properties":{"roughness":{"type":13}}}]}]]],0,0,[],[],[]],[[[16,"pbr-parameter"],[17,"pbr",true,[-6,-7,-8,-9,-10,-11,-12],[18,null,null,"5f9212dc-78a3-4a2f-a0f8-8a3721009bab",null,null,[-1,-2,-3,-4,-5]],[19,[20,40000,1.5625,[2,0.2,0.5019607843137255,0.8,1.04166625],[2,0.043137254901960784,0.16470588235294117,0,0.2901960784313725],[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.043137254901960784,0.16470588235294117,0,0.2901960784313725]],[21,[0,512,512]],[22,1,true,13,14],[23,[4,4292993505]],[24],[25],[26],[27]]],[12,"geoms-procedural","9ch9zsrf5O47GS5WFWcOLu",1,[-14,-15,-16,-17],[[32,-13]],[1,0,0,-2]],[28,"camera","8bdq6Uj2tLurbFEBQjLwyJ",1,[[33,14,1820327937,-18,[4,4294967295]],[35,-19]],[1,-15,10,12],[3,-0.20981930316983052,-0.4262589171079334,-0.10233571186610668,0.8739602952538267],[1,-27,-52,0]],[12,"l1","c0exUyMIlMs6uOXhfs5yg8",1,[-21],[[36,"l1<SphereLight>",1,79577.32475232864,20723.261654252256,50,-20,[7]]],[1,-10,10,10]],[4,0,{},4,[3,"2egYxw9mVJV4pvsv+kQAyK",null,null,-22,[5,"f5qIy+nsRGyIiJD3Id2ZU4",null,[[8,["lightmapSettings"],[0,["7biFLyCjhBmauX2vDqHRgX"]],[2]],[1,1,["_shadowReceivingMode"],[0,["7biFLyCjhBmauX2vDqHRgX"]]],[1,true,["_enableMorph"],[0,["7biFLyCjhBmauX2vDqHRgX"]]]]],8]],[12,"l2","dc4AuCeRtFm4WMEeH6/3BX",1,[-24],[[37,1,79577.32475232864,20723.261654252256,50,-23,[7]]],[1,10,10,10]],[4,0,{},6,[3,"2egYxw9mVJV4pvsv+kQAyK",null,null,-25,[5,"8402OIdctFGagoBjXbHOby",null,[[8,["lightmapSettings"],[0,["7biFLyCjhBmauX2vDqHRgX"]],[2]],[1,1,["_shadowReceivingMode"],[0,["7biFLyCjhBmauX2vDqHRgX"]]],[1,true,["_enableMorph"],[0,["7biFLyCjhBmauX2vDqHRgX"]]]]],9]],[13,"l3","16n0jyyCJPUo6ZDYvKJ8BF",1,[-27],[[38,"l3<SpotLight>",1,79577.32475232864,20723.261654252256,50,120,0.1,-26,[7]]],[1,-10,-10,10],[3,0.24999999999999997,-0.24999999999999997,0.06698729810778066,0.9330127018922194],[1,30,-30,0]],[4,0,{},8,[3,"2egYxw9mVJV4pvsv+kQAyK",null,null,-28,[5,"d7u2sDpFVBfKJfRq2gqvq1",null,[[8,["lightmapSettings"],[0,["7biFLyCjhBmauX2vDqHRgX"]],[2]],[1,1,["_shadowReceivingMode"],[0,["7biFLyCjhBmauX2vDqHRgX"]]],[1,true,["_enableMorph"],[0,["7biFLyCjhBmauX2vDqHRgX"]]]]],10]],[13,"l4","3auhSVA05FRI8L42xzH0qq",1,[-30],[[39,1,79577.32475232864,20723.261654252256,50,120,0.1,-29,[7]]],[1,10,-10,10],[3,0.24999999999999997,0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,30,30,0]],[4,0,{},10,[3,"2egYxw9mVJV4pvsv+kQAyK",null,null,-31,[5,"ffZFVywQ1PbZTZ/alAzGzU",null,[[8,["lightmapSettings"],[0,["7biFLyCjhBmauX2vDqHRgX"]],[2]],[1,1,["_shadowReceivingMode"],[0,["7biFLyCjhBmauX2vDqHRgX"]]],[1,true,["_enableMorph"],[0,["7biFLyCjhBmauX2vDqHRgX"]]]]],11]],[4,0,{},1,[3,"e0ft3CpblN75cm7fcjI2Hl",null,null,-32,[5,"8cMd6hT3JKnbcsqgl4/Ku9",null,[[1,false,["_active"],[0,["e0ft3CpblN75cm7fcjI2Hl"]]],[1,0,["_fovAxis"],[0,["a9oGl4aW5AoIS8kpdZR8oK"]]],[1,19,["_aperture"],[0,["a9oGl4aW5AoIS8kpdZR8oK"]]],[1,7,["_shutter"],[0,["a9oGl4aW5AoIS8kpdZR8oK"]]],[1,0,["_iso"],[0,["a9oGl4aW5AoIS8kpdZR8oK"]]],[1,0,["blurriness"],[0,["269jpWOCtEm4mG2x3hgjdH"]]]]],12]],[6,"sphere",2,[[9,"sphere<MeshRenderer>",-33,[0],[2],1]],[1,-8.75,-8.75,0],[1,2,2,2]],[6,"sphere",2,[[9,"sphere<MeshRenderer>",-34,[2],[2],3]],[1,7.5,7.5,0],[1,2,2,2]],[6,"sphere",2,[[9,"sphere<MeshRenderer>",-35,[4],[2],5]],[1,-7.5,7.5,0],[1,2,2,2]],[6,"sphere",2,[[9,"sphere<MeshRenderer>",-36,[6],[2],7]],[1,7.5,-7.5,0],[1,2,2,2]]],0,[0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,12,0,-1,3,0,-2,2,0,-3,4,0,-4,6,0,-5,8,0,-6,10,0,-7,12,0,0,2,0,-1,13,0,-2,14,0,-3,15,0,-4,16,0,0,3,0,0,3,0,0,4,0,-1,5,0,1,5,0,0,6,0,-1,7,0,1,7,0,0,8,0,-1,9,0,1,9,0,0,10,0,-1,11,0,1,11,0,1,12,0,0,13,0,0,14,0,0,15,0,0,16,0,5,1,36],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,2,-1,2,-1,2,-1,2,3,3,3,3,3,6,7],[0,1,0,1,0,1,0,1,2,2,2,2,4,3,3]],[[[14,"pre-filter-envmap"],[29,"pre-filter-envmap",1,[-3],[[41,-2,[10,"269jpWOCtEm4mG2x3hgjdH"],1]],[11,"e0ft3CpblN75cm7fcjI2Hl",null,null,null,-1,0]],[30,"camera",1,1,[[34,"camera<Camera>",90,0.1,2,6,524289,-4,[10,"a9oGl4aW5AoIS8kpdZR8oK"],[4,4278255615],0]],[11,"c5Pby/NJNFv5fyA9dwne88",null,null,null,1,0]]],0,[0,1,1,0,0,1,0,-1,2,0,0,2,0,4,1,4],[0,0],[8,9],[5,6]],[[{"base":"2,2,2,2,2,1","rgbe":true,"mipmaps":[{"front":"a0fbdafc-797e-4f5f-9b54-d35973a024dd@b47c0@e9a6d","back":"a0fbdafc-797e-4f5f-9b54-d35973a024dd@b47c0@40c10","left":"a0fbdafc-797e-4f5f-9b54-d35973a024dd@b47c0@8fd34","right":"a0fbdafc-797e-4f5f-9b54-d35973a024dd@b47c0@74afd","top":"a0fbdafc-797e-4f5f-9b54-d35973a024dd@b47c0@bb97f","bottom":"a0fbdafc-797e-4f5f-9b54-d35973a024dd@b47c0@7d38f"}]}],[6],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","w":512,"h":512,"n":"pre-filter-envmap"}],[7],0,[],[],[]],[[[14,"light-hint"],[31,"light-hint",[[40,"Quad<MeshRenderer>",-2,[10,"7biFLyCjhBmauX2vDqHRgX"],[0],[2],1],[42,-3,[10,"dbw0NB04FFba+S2OgqOSTh"]]],[11,"2egYxw9mVJV4pvsv+kQAyK",null,null,null,-1,0]]],0,[0,1,1,0,0,1,0,0,1,0,4,1,3],[0,0],[-1,2],[7,8]],[[[43,"redBall",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{},{},{},{}],[[[{"roughness":0.1,"metallic":0.2},"mainColor",8,[4,4278190260]],{},{},{},{},{}],11,0,0,0,0,0]]],0,0,[0],[10],[9]]]]
